#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppinnoNew
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AppInnonew")]
	public partial class DataAccessDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertaccessTbl(accessTbl instance);
    partial void UpdateaccessTbl(accessTbl instance);
    partial void DeleteaccessTbl(accessTbl instance);
    partial void InsertuserTbl(userTbl instance);
    partial void UpdateuserTbl(userTbl instance);
    partial void DeleteuserTbl(userTbl instance);
    partial void InsertanswerContentTbl(answerContentTbl instance);
    partial void UpdateanswerContentTbl(answerContentTbl instance);
    partial void DeleteanswerContentTbl(answerContentTbl instance);
    partial void InsertanswerTbl(answerTbl instance);
    partial void UpdateanswerTbl(answerTbl instance);
    partial void DeleteanswerTbl(answerTbl instance);
    partial void InsertbestIdeaCompetitionsContentTbl(bestIdeaCompetitionsContentTbl instance);
    partial void UpdatebestIdeaCompetitionsContentTbl(bestIdeaCompetitionsContentTbl instance);
    partial void DeletebestIdeaCompetitionsContentTbl(bestIdeaCompetitionsContentTbl instance);
    partial void InsertbestIdeaCompetitionsTagTbl(bestIdeaCompetitionsTagTbl instance);
    partial void UpdatebestIdeaCompetitionsTagTbl(bestIdeaCompetitionsTagTbl instance);
    partial void DeletebestIdeaCompetitionsTagTbl(bestIdeaCompetitionsTagTbl instance);
    partial void InsertbestIdeaCompetitionsTbl(bestIdeaCompetitionsTbl instance);
    partial void UpdatebestIdeaCompetitionsTbl(bestIdeaCompetitionsTbl instance);
    partial void DeletebestIdeaCompetitionsTbl(bestIdeaCompetitionsTbl instance);
    partial void InsertchartTbl(chartTbl instance);
    partial void UpdatechartTbl(chartTbl instance);
    partial void DeletechartTbl(chartTbl instance);
    partial void InsertcreativityCompetitionContentTbl(creativityCompetitionContentTbl instance);
    partial void UpdatecreativityCompetitionContentTbl(creativityCompetitionContentTbl instance);
    partial void DeletecreativityCompetitionContentTbl(creativityCompetitionContentTbl instance);
    partial void InsertcreativityCompetitionTagTbl(creativityCompetitionTagTbl instance);
    partial void UpdatecreativityCompetitionTagTbl(creativityCompetitionTagTbl instance);
    partial void DeletecreativityCompetitionTagTbl(creativityCompetitionTagTbl instance);
    partial void InsertcreativityCompetitionTbl(creativityCompetitionTbl instance);
    partial void UpdatecreativityCompetitionTbl(creativityCompetitionTbl instance);
    partial void DeletecreativityCompetitionTbl(creativityCompetitionTbl instance);
    partial void InsertdownloadCommentTbl(downloadCommentTbl instance);
    partial void UpdatedownloadCommentTbl(downloadCommentTbl instance);
    partial void DeletedownloadCommentTbl(downloadCommentTbl instance);
    partial void InsertdownloadContentTbl(downloadContentTbl instance);
    partial void UpdatedownloadContentTbl(downloadContentTbl instance);
    partial void DeletedownloadContentTbl(downloadContentTbl instance);
    partial void InsertdownloadLikeTbl(downloadLikeTbl instance);
    partial void UpdatedownloadLikeTbl(downloadLikeTbl instance);
    partial void DeletedownloadLikeTbl(downloadLikeTbl instance);
    partial void InsertdownloadSubGroupTbl(downloadSubGroupTbl instance);
    partial void UpdatedownloadSubGroupTbl(downloadSubGroupTbl instance);
    partial void DeletedownloadSubGroupTbl(downloadSubGroupTbl instance);
    partial void InsertdownloadTagTbl(downloadTagTbl instance);
    partial void UpdatedownloadTagTbl(downloadTagTbl instance);
    partial void DeletedownloadTagTbl(downloadTagTbl instance);
    partial void InsertdownloadTbl(downloadTbl instance);
    partial void UpdatedownloadTbl(downloadTbl instance);
    partial void DeletedownloadTbl(downloadTbl instance);
    partial void InserteventCommentTbl(eventCommentTbl instance);
    partial void UpdateeventCommentTbl(eventCommentTbl instance);
    partial void DeleteeventCommentTbl(eventCommentTbl instance);
    partial void InserteventsContentTbl(eventsContentTbl instance);
    partial void UpdateeventsContentTbl(eventsContentTbl instance);
    partial void DeleteeventsContentTbl(eventsContentTbl instance);
    partial void InserteventsLikeTbl(eventsLikeTbl instance);
    partial void UpdateeventsLikeTbl(eventsLikeTbl instance);
    partial void DeleteeventsLikeTbl(eventsLikeTbl instance);
    partial void InserteventsSubGroupTbl(eventsSubGroupTbl instance);
    partial void UpdateeventsSubGroupTbl(eventsSubGroupTbl instance);
    partial void DeleteeventsSubGroupTbl(eventsSubGroupTbl instance);
    partial void InserteventsTbl(eventsTbl instance);
    partial void UpdateeventsTbl(eventsTbl instance);
    partial void DeleteeventsTbl(eventsTbl instance);
    partial void InserteventTagTbl(eventTagTbl instance);
    partial void UpdateeventTagTbl(eventTagTbl instance);
    partial void DeleteeventTagTbl(eventTagTbl instance);
    partial void InsertGroupTbl(GroupTbl instance);
    partial void UpdateGroupTbl(GroupTbl instance);
    partial void DeleteGroupTbl(GroupTbl instance);
    partial void InserticanCommentTbl(icanCommentTbl instance);
    partial void UpdateicanCommentTbl(icanCommentTbl instance);
    partial void DeleteicanCommentTbl(icanCommentTbl instance);
    partial void InserticanContentTbl(icanContentTbl instance);
    partial void UpdateicanContentTbl(icanContentTbl instance);
    partial void DeleteicanContentTbl(icanContentTbl instance);
    partial void InserticanTbl(icanTbl instance);
    partial void UpdateicanTbl(icanTbl instance);
    partial void DeleteicanTbl(icanTbl instance);
    partial void InsertideasContentTbl(ideasContentTbl instance);
    partial void UpdateideasContentTbl(ideasContentTbl instance);
    partial void DeleteideasContentTbl(ideasContentTbl instance);
    partial void InsertideasLikeTbl(ideasLikeTbl instance);
    partial void UpdateideasLikeTbl(ideasLikeTbl instance);
    partial void DeleteideasLikeTbl(ideasLikeTbl instance);
    partial void InsertideasTagTbl(ideasTagTbl instance);
    partial void UpdateideasTagTbl(ideasTagTbl instance);
    partial void DeleteideasTagTbl(ideasTagTbl instance);
    partial void InsertideasTbl(ideasTbl instance);
    partial void UpdateideasTbl(ideasTbl instance);
    partial void DeleteideasTbl(ideasTbl instance);
    partial void InsertioCommentTbl(ioCommentTbl instance);
    partial void UpdateioCommentTbl(ioCommentTbl instance);
    partial void DeleteioCommentTbl(ioCommentTbl instance);
    partial void InsertioContentTbl(ioContentTbl instance);
    partial void UpdateioContentTbl(ioContentTbl instance);
    partial void DeleteioContentTbl(ioContentTbl instance);
    partial void InsertioLikeTbl(ioLikeTbl instance);
    partial void UpdateioLikeTbl(ioLikeTbl instance);
    partial void DeleteioLikeTbl(ioLikeTbl instance);
    partial void InsertioSubGroupTbl(ioSubGroupTbl instance);
    partial void UpdateioSubGroupTbl(ioSubGroupTbl instance);
    partial void DeleteioSubGroupTbl(ioSubGroupTbl instance);
    partial void InsertioTagTbl(ioTagTbl instance);
    partial void UpdateioTagTbl(ioTagTbl instance);
    partial void DeleteioTagTbl(ioTagTbl instance);
    partial void InsertioTbl(ioTbl instance);
    partial void UpdateioTbl(ioTbl instance);
    partial void DeleteioTbl(ioTbl instance);
    partial void InsertipTbl(ipTbl instance);
    partial void UpdateipTbl(ipTbl instance);
    partial void DeleteipTbl(ipTbl instance);
    partial void InsertmasterReportContentTbl(masterReportContentTbl instance);
    partial void UpdatemasterReportContentTbl(masterReportContentTbl instance);
    partial void DeletemasterReportContentTbl(masterReportContentTbl instance);
    partial void InsertmasterReportTagTbl(masterReportTagTbl instance);
    partial void UpdatemasterReportTagTbl(masterReportTagTbl instance);
    partial void DeletemasterReportTagTbl(masterReportTagTbl instance);
    partial void InsertmasterReportTbl(masterReportTbl instance);
    partial void UpdatemasterReportTbl(masterReportTbl instance);
    partial void DeletemasterReportTbl(masterReportTbl instance);
    partial void InsertmasterRreportSubGroupTbl(masterRreportSubGroupTbl instance);
    partial void UpdatemasterRreportSubGroupTbl(masterRreportSubGroupTbl instance);
    partial void DeletemasterRreportSubGroupTbl(masterRreportSubGroupTbl instance);
    partial void InsertmessageRecieverTbl(messageRecieverTbl instance);
    partial void UpdatemessageRecieverTbl(messageRecieverTbl instance);
    partial void DeletemessageRecieverTbl(messageRecieverTbl instance);
    partial void InsertmessageSubGroupTbl(messageSubGroupTbl instance);
    partial void UpdatemessageSubGroupTbl(messageSubGroupTbl instance);
    partial void DeletemessageSubGroupTbl(messageSubGroupTbl instance);
    partial void InsertmessageTbl(messageTbl instance);
    partial void UpdatemessageTbl(messageTbl instance);
    partial void DeletemessageTbl(messageTbl instance);
    partial void InsertmUserOptionTbl(mUserOptionTbl instance);
    partial void UpdatemUserOptionTbl(mUserOptionTbl instance);
    partial void DeletemUserOptionTbl(mUserOptionTbl instance);
    partial void InsertmUserTbl(mUserTbl instance);
    partial void UpdatemUserTbl(mUserTbl instance);
    partial void DeletemUserTbl(mUserTbl instance);
    partial void InsertmyIranContentTbl(myIranContentTbl instance);
    partial void UpdatemyIranContentTbl(myIranContentTbl instance);
    partial void DeletemyIranContentTbl(myIranContentTbl instance);
    partial void InsertmyIranTagTbl(myIranTagTbl instance);
    partial void UpdatemyIranTagTbl(myIranTagTbl instance);
    partial void DeletemyIranTagTbl(myIranTagTbl instance);
    partial void InsertmyIranTbl(myIranTbl instance);
    partial void UpdatemyIranTbl(myIranTbl instance);
    partial void DeletemyIranTbl(myIranTbl instance);
    partial void InsertnewsCommentTbl(newsCommentTbl instance);
    partial void UpdatenewsCommentTbl(newsCommentTbl instance);
    partial void DeletenewsCommentTbl(newsCommentTbl instance);
    partial void InsertnewsContentTbl(newsContentTbl instance);
    partial void UpdatenewsContentTbl(newsContentTbl instance);
    partial void DeletenewsContentTbl(newsContentTbl instance);
    partial void InsertnewsLikeTbl(newsLikeTbl instance);
    partial void UpdatenewsLikeTbl(newsLikeTbl instance);
    partial void DeletenewsLikeTbl(newsLikeTbl instance);
    partial void InsertnewsSubGroupTbl(newsSubGroupTbl instance);
    partial void UpdatenewsSubGroupTbl(newsSubGroupTbl instance);
    partial void DeletenewsSubGroupTbl(newsSubGroupTbl instance);
    partial void InsertnewsTagTbl(newsTagTbl instance);
    partial void UpdatenewsTagTbl(newsTagTbl instance);
    partial void DeletenewsTagTbl(newsTagTbl instance);
    partial void InsertnewsTbl(newsTbl instance);
    partial void UpdatenewsTbl(newsTbl instance);
    partial void DeletenewsTbl(newsTbl instance);
    partial void InsertoptionTbl(optionTbl instance);
    partial void UpdateoptionTbl(optionTbl instance);
    partial void DeleteoptionTbl(optionTbl instance);
    partial void InsertpacketUploadServiceTbl(packetUploadServiceTbl instance);
    partial void UpdatepacketUploadServiceTbl(packetUploadServiceTbl instance);
    partial void DeletepacketUploadServiceTbl(packetUploadServiceTbl instance);
    partial void InsertpartnersTbl(partnersTbl instance);
    partial void UpdatepartnersTbl(partnersTbl instance);
    partial void DeletepartnersTbl(partnersTbl instance);
    partial void InsertpollContentTbl(pollContentTbl instance);
    partial void UpdatepollContentTbl(pollContentTbl instance);
    partial void DeletepollContentTbl(pollContentTbl instance);
    partial void InsertpollSubGroupTbl(pollSubGroupTbl instance);
    partial void UpdatepollSubGroupTbl(pollSubGroupTbl instance);
    partial void DeletepollSubGroupTbl(pollSubGroupTbl instance);
    partial void InsertpollTagTbl(pollTagTbl instance);
    partial void UpdatepollTagTbl(pollTagTbl instance);
    partial void DeletepollTagTbl(pollTagTbl instance);
    partial void InsertpollTbl(pollTbl instance);
    partial void UpdatepollTbl(pollTbl instance);
    partial void DeletepollTbl(pollTbl instance);
    partial void InsertpublicationCommentTbl(publicationCommentTbl instance);
    partial void UpdatepublicationCommentTbl(publicationCommentTbl instance);
    partial void DeletepublicationCommentTbl(publicationCommentTbl instance);
    partial void InsertpublicationContentTbl(publicationContentTbl instance);
    partial void UpdatepublicationContentTbl(publicationContentTbl instance);
    partial void DeletepublicationContentTbl(publicationContentTbl instance);
    partial void InsertpublicationLikeTbl(publicationLikeTbl instance);
    partial void UpdatepublicationLikeTbl(publicationLikeTbl instance);
    partial void DeletepublicationLikeTbl(publicationLikeTbl instance);
    partial void InsertpublicationSubGroupTbl(publicationSubGroupTbl instance);
    partial void UpdatepublicationSubGroupTbl(publicationSubGroupTbl instance);
    partial void DeletepublicationSubGroupTbl(publicationSubGroupTbl instance);
    partial void InsertpublicationTagTbl(publicationTagTbl instance);
    partial void UpdatepublicationTagTbl(publicationTagTbl instance);
    partial void DeletepublicationTagTbl(publicationTagTbl instance);
    partial void InsertpublicationTbl(publicationTbl instance);
    partial void UpdatepublicationTbl(publicationTbl instance);
    partial void DeletepublicationTbl(publicationTbl instance);
    partial void InsertpushMessageSubGroupTbl(pushMessageSubGroupTbl instance);
    partial void UpdatepushMessageSubGroupTbl(pushMessageSubGroupTbl instance);
    partial void DeletepushMessageSubGroupTbl(pushMessageSubGroupTbl instance);
    partial void InsertpushMessageTbl(pushMessageTbl instance);
    partial void UpdatepushMessageTbl(pushMessageTbl instance);
    partial void DeletepushMessageTbl(pushMessageTbl instance);
    partial void InsertpushUserTbl(pushUserTbl instance);
    partial void UpdatepushUserTbl(pushUserTbl instance);
    partial void DeletepushUserTbl(pushUserTbl instance);
    partial void InsertreportCommentTbl(reportCommentTbl instance);
    partial void UpdatereportCommentTbl(reportCommentTbl instance);
    partial void DeletereportCommentTbl(reportCommentTbl instance);
    partial void InsertreportTbl(reportTbl instance);
    partial void UpdatereportTbl(reportTbl instance);
    partial void DeletereportTbl(reportTbl instance);
    partial void InsertresponseContentTbl(responseContentTbl instance);
    partial void UpdateresponseContentTbl(responseContentTbl instance);
    partial void DeleteresponseContentTbl(responseContentTbl instance);
    partial void InsertresponseTbl(responseTbl instance);
    partial void UpdateresponseTbl(responseTbl instance);
    partial void DeleteresponseTbl(responseTbl instance);
    partial void InsertsettingTbl(settingTbl instance);
    partial void UpdatesettingTbl(settingTbl instance);
    partial void DeletesettingTbl(settingTbl instance);
    partial void InsertsubGroupPushTbl(subGroupPushTbl instance);
    partial void UpdatesubGroupPushTbl(subGroupPushTbl instance);
    partial void DeletesubGroupPushTbl(subGroupPushTbl instance);
    partial void InsertSubGroupTbl(SubGroupTbl instance);
    partial void UpdateSubGroupTbl(SubGroupTbl instance);
    partial void DeleteSubGroupTbl(SubGroupTbl instance);
    partial void InserttagTbl(tagTbl instance);
    partial void UpdatetagTbl(tagTbl instance);
    partial void DeletetagTbl(tagTbl instance);
    partial void InserttemporaryRegistrationTbl(temporaryRegistrationTbl instance);
    partial void UpdatetemporaryRegistrationTbl(temporaryRegistrationTbl instance);
    partial void DeletetemporaryRegistrationTbl(temporaryRegistrationTbl instance);
    partial void InserttokenUploadServiceTbl(tokenUploadServiceTbl instance);
    partial void UpdatetokenUploadServiceTbl(tokenUploadServiceTbl instance);
    partial void DeletetokenUploadServiceTbl(tokenUploadServiceTbl instance);
    partial void InsertuserSubGroupTbl(userSubGroupTbl instance);
    partial void UpdateuserSubGroupTbl(userSubGroupTbl instance);
    partial void DeleteuserSubGroupTbl(userSubGroupTbl instance);
    #endregion
		
		public DataAccessDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AppInnonewConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<accessTbl> accessTbls
		{
			get
			{
				return this.GetTable<accessTbl>();
			}
		}
		
		public System.Data.Linq.Table<userTbl> userTbls
		{
			get
			{
				return this.GetTable<userTbl>();
			}
		}
		
		public System.Data.Linq.Table<answerContentTbl> answerContentTbls
		{
			get
			{
				return this.GetTable<answerContentTbl>();
			}
		}
		
		public System.Data.Linq.Table<answerTbl> answerTbls
		{
			get
			{
				return this.GetTable<answerTbl>();
			}
		}
		
		public System.Data.Linq.Table<bestIdeaCompetitionsContentTbl> bestIdeaCompetitionsContentTbls
		{
			get
			{
				return this.GetTable<bestIdeaCompetitionsContentTbl>();
			}
		}
		
		public System.Data.Linq.Table<bestIdeaCompetitionsTagTbl> bestIdeaCompetitionsTagTbls
		{
			get
			{
				return this.GetTable<bestIdeaCompetitionsTagTbl>();
			}
		}
		
		public System.Data.Linq.Table<bestIdeaCompetitionsTbl> bestIdeaCompetitionsTbls
		{
			get
			{
				return this.GetTable<bestIdeaCompetitionsTbl>();
			}
		}
		
		public System.Data.Linq.Table<chartTbl> chartTbls
		{
			get
			{
				return this.GetTable<chartTbl>();
			}
		}
		
		public System.Data.Linq.Table<creativityCompetitionContentTbl> creativityCompetitionContentTbls
		{
			get
			{
				return this.GetTable<creativityCompetitionContentTbl>();
			}
		}
		
		public System.Data.Linq.Table<creativityCompetitionTagTbl> creativityCompetitionTagTbls
		{
			get
			{
				return this.GetTable<creativityCompetitionTagTbl>();
			}
		}
		
		public System.Data.Linq.Table<creativityCompetitionTbl> creativityCompetitionTbls
		{
			get
			{
				return this.GetTable<creativityCompetitionTbl>();
			}
		}
		
		public System.Data.Linq.Table<downloadCommentTbl> downloadCommentTbls
		{
			get
			{
				return this.GetTable<downloadCommentTbl>();
			}
		}
		
		public System.Data.Linq.Table<downloadContentTbl> downloadContentTbls
		{
			get
			{
				return this.GetTable<downloadContentTbl>();
			}
		}
		
		public System.Data.Linq.Table<downloadLikeTbl> downloadLikeTbls
		{
			get
			{
				return this.GetTable<downloadLikeTbl>();
			}
		}
		
		public System.Data.Linq.Table<downloadSubGroupTbl> downloadSubGroupTbls
		{
			get
			{
				return this.GetTable<downloadSubGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<downloadTagTbl> downloadTagTbls
		{
			get
			{
				return this.GetTable<downloadTagTbl>();
			}
		}
		
		public System.Data.Linq.Table<downloadTbl> downloadTbls
		{
			get
			{
				return this.GetTable<downloadTbl>();
			}
		}
		
		public System.Data.Linq.Table<eventCommentTbl> eventCommentTbls
		{
			get
			{
				return this.GetTable<eventCommentTbl>();
			}
		}
		
		public System.Data.Linq.Table<eventsContentTbl> eventsContentTbls
		{
			get
			{
				return this.GetTable<eventsContentTbl>();
			}
		}
		
		public System.Data.Linq.Table<eventsLikeTbl> eventsLikeTbls
		{
			get
			{
				return this.GetTable<eventsLikeTbl>();
			}
		}
		
		public System.Data.Linq.Table<eventsSubGroupTbl> eventsSubGroupTbls
		{
			get
			{
				return this.GetTable<eventsSubGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<eventsTbl> eventsTbls
		{
			get
			{
				return this.GetTable<eventsTbl>();
			}
		}
		
		public System.Data.Linq.Table<eventTagTbl> eventTagTbls
		{
			get
			{
				return this.GetTable<eventTagTbl>();
			}
		}
		
		public System.Data.Linq.Table<GroupTbl> GroupTbls
		{
			get
			{
				return this.GetTable<GroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<icanCommentTbl> icanCommentTbls
		{
			get
			{
				return this.GetTable<icanCommentTbl>();
			}
		}
		
		public System.Data.Linq.Table<icanContentTbl> icanContentTbls
		{
			get
			{
				return this.GetTable<icanContentTbl>();
			}
		}
		
		public System.Data.Linq.Table<icanTbl> icanTbls
		{
			get
			{
				return this.GetTable<icanTbl>();
			}
		}
		
		public System.Data.Linq.Table<ideasContentTbl> ideasContentTbls
		{
			get
			{
				return this.GetTable<ideasContentTbl>();
			}
		}
		
		public System.Data.Linq.Table<ideasLikeTbl> ideasLikeTbls
		{
			get
			{
				return this.GetTable<ideasLikeTbl>();
			}
		}
		
		public System.Data.Linq.Table<ideasTagTbl> ideasTagTbls
		{
			get
			{
				return this.GetTable<ideasTagTbl>();
			}
		}
		
		public System.Data.Linq.Table<ideasTbl> ideasTbls
		{
			get
			{
				return this.GetTable<ideasTbl>();
			}
		}
		
		public System.Data.Linq.Table<ioCommentTbl> ioCommentTbls
		{
			get
			{
				return this.GetTable<ioCommentTbl>();
			}
		}
		
		public System.Data.Linq.Table<ioContentTbl> ioContentTbls
		{
			get
			{
				return this.GetTable<ioContentTbl>();
			}
		}
		
		public System.Data.Linq.Table<ioLikeTbl> ioLikeTbls
		{
			get
			{
				return this.GetTable<ioLikeTbl>();
			}
		}
		
		public System.Data.Linq.Table<ioSubGroupTbl> ioSubGroupTbls
		{
			get
			{
				return this.GetTable<ioSubGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<ioTagTbl> ioTagTbls
		{
			get
			{
				return this.GetTable<ioTagTbl>();
			}
		}
		
		public System.Data.Linq.Table<ioTbl> ioTbls
		{
			get
			{
				return this.GetTable<ioTbl>();
			}
		}
		
		public System.Data.Linq.Table<ipTbl> ipTbls
		{
			get
			{
				return this.GetTable<ipTbl>();
			}
		}
		
		public System.Data.Linq.Table<masterReportContentTbl> masterReportContentTbls
		{
			get
			{
				return this.GetTable<masterReportContentTbl>();
			}
		}
		
		public System.Data.Linq.Table<masterReportTagTbl> masterReportTagTbls
		{
			get
			{
				return this.GetTable<masterReportTagTbl>();
			}
		}
		
		public System.Data.Linq.Table<masterReportTbl> masterReportTbls
		{
			get
			{
				return this.GetTable<masterReportTbl>();
			}
		}
		
		public System.Data.Linq.Table<masterRreportSubGroupTbl> masterRreportSubGroupTbls
		{
			get
			{
				return this.GetTable<masterRreportSubGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<messageRecieverTbl> messageRecieverTbls
		{
			get
			{
				return this.GetTable<messageRecieverTbl>();
			}
		}
		
		public System.Data.Linq.Table<messageSubGroupTbl> messageSubGroupTbls
		{
			get
			{
				return this.GetTable<messageSubGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<messageTbl> messageTbls
		{
			get
			{
				return this.GetTable<messageTbl>();
			}
		}
		
		public System.Data.Linq.Table<mUserOptionTbl> mUserOptionTbls
		{
			get
			{
				return this.GetTable<mUserOptionTbl>();
			}
		}
		
		public System.Data.Linq.Table<mUserTbl> mUserTbls
		{
			get
			{
				return this.GetTable<mUserTbl>();
			}
		}
		
		public System.Data.Linq.Table<myIranContentTbl> myIranContentTbls
		{
			get
			{
				return this.GetTable<myIranContentTbl>();
			}
		}
		
		public System.Data.Linq.Table<myIranTagTbl> myIranTagTbls
		{
			get
			{
				return this.GetTable<myIranTagTbl>();
			}
		}
		
		public System.Data.Linq.Table<myIranTbl> myIranTbls
		{
			get
			{
				return this.GetTable<myIranTbl>();
			}
		}
		
		public System.Data.Linq.Table<newsCommentTbl> newsCommentTbls
		{
			get
			{
				return this.GetTable<newsCommentTbl>();
			}
		}
		
		public System.Data.Linq.Table<newsContentTbl> newsContentTbls
		{
			get
			{
				return this.GetTable<newsContentTbl>();
			}
		}
		
		public System.Data.Linq.Table<newsLikeTbl> newsLikeTbls
		{
			get
			{
				return this.GetTable<newsLikeTbl>();
			}
		}
		
		public System.Data.Linq.Table<newsSubGroupTbl> newsSubGroupTbls
		{
			get
			{
				return this.GetTable<newsSubGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<newsTagTbl> newsTagTbls
		{
			get
			{
				return this.GetTable<newsTagTbl>();
			}
		}
		
		public System.Data.Linq.Table<newsTbl> newsTbls
		{
			get
			{
				return this.GetTable<newsTbl>();
			}
		}
		
		public System.Data.Linq.Table<optionTbl> optionTbls
		{
			get
			{
				return this.GetTable<optionTbl>();
			}
		}
		
		public System.Data.Linq.Table<packetUploadServiceTbl> packetUploadServiceTbls
		{
			get
			{
				return this.GetTable<packetUploadServiceTbl>();
			}
		}
		
		public System.Data.Linq.Table<partnersTbl> partnersTbls
		{
			get
			{
				return this.GetTable<partnersTbl>();
			}
		}
		
		public System.Data.Linq.Table<pollContentTbl> pollContentTbls
		{
			get
			{
				return this.GetTable<pollContentTbl>();
			}
		}
		
		public System.Data.Linq.Table<pollSubGroupTbl> pollSubGroupTbls
		{
			get
			{
				return this.GetTable<pollSubGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<pollTagTbl> pollTagTbls
		{
			get
			{
				return this.GetTable<pollTagTbl>();
			}
		}
		
		public System.Data.Linq.Table<pollTbl> pollTbls
		{
			get
			{
				return this.GetTable<pollTbl>();
			}
		}
		
		public System.Data.Linq.Table<publicationCommentTbl> publicationCommentTbls
		{
			get
			{
				return this.GetTable<publicationCommentTbl>();
			}
		}
		
		public System.Data.Linq.Table<publicationContentTbl> publicationContentTbls
		{
			get
			{
				return this.GetTable<publicationContentTbl>();
			}
		}
		
		public System.Data.Linq.Table<publicationLikeTbl> publicationLikeTbls
		{
			get
			{
				return this.GetTable<publicationLikeTbl>();
			}
		}
		
		public System.Data.Linq.Table<publicationSubGroupTbl> publicationSubGroupTbls
		{
			get
			{
				return this.GetTable<publicationSubGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<publicationTagTbl> publicationTagTbls
		{
			get
			{
				return this.GetTable<publicationTagTbl>();
			}
		}
		
		public System.Data.Linq.Table<publicationTbl> publicationTbls
		{
			get
			{
				return this.GetTable<publicationTbl>();
			}
		}
		
		public System.Data.Linq.Table<pushMessageSubGroupTbl> pushMessageSubGroupTbls
		{
			get
			{
				return this.GetTable<pushMessageSubGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<pushMessageTbl> pushMessageTbls
		{
			get
			{
				return this.GetTable<pushMessageTbl>();
			}
		}
		
		public System.Data.Linq.Table<pushUserTbl> pushUserTbls
		{
			get
			{
				return this.GetTable<pushUserTbl>();
			}
		}
		
		public System.Data.Linq.Table<reportCommentTbl> reportCommentTbls
		{
			get
			{
				return this.GetTable<reportCommentTbl>();
			}
		}
		
		public System.Data.Linq.Table<reportTbl> reportTbls
		{
			get
			{
				return this.GetTable<reportTbl>();
			}
		}
		
		public System.Data.Linq.Table<responseContentTbl> responseContentTbls
		{
			get
			{
				return this.GetTable<responseContentTbl>();
			}
		}
		
		public System.Data.Linq.Table<responseTbl> responseTbls
		{
			get
			{
				return this.GetTable<responseTbl>();
			}
		}
		
		public System.Data.Linq.Table<settingTbl> settingTbls
		{
			get
			{
				return this.GetTable<settingTbl>();
			}
		}
		
		public System.Data.Linq.Table<subGroupPushTbl> subGroupPushTbls
		{
			get
			{
				return this.GetTable<subGroupPushTbl>();
			}
		}
		
		public System.Data.Linq.Table<SubGroupTbl> SubGroupTbls
		{
			get
			{
				return this.GetTable<SubGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<tagTbl> tagTbls
		{
			get
			{
				return this.GetTable<tagTbl>();
			}
		}
		
		public System.Data.Linq.Table<temporaryRegistrationTbl> temporaryRegistrationTbls
		{
			get
			{
				return this.GetTable<temporaryRegistrationTbl>();
			}
		}
		
		public System.Data.Linq.Table<tokenUploadServiceTbl> tokenUploadServiceTbls
		{
			get
			{
				return this.GetTable<tokenUploadServiceTbl>();
			}
		}
		
		public System.Data.Linq.Table<userSubGroupTbl> userSubGroupTbls
		{
			get
			{
				return this.GetTable<userSubGroupTbl>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.accessTbl")]
	public partial class accessTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _per;
		
		private string _title;
		
		private int _accessID;
		
		private EntitySet<userTbl> _userTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnperChanging(string value);
    partial void OnperChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnaccessIDChanging(int value);
    partial void OnaccessIDChanged();
    #endregion
		
		public accessTbl()
		{
			this._userTbls = new EntitySet<userTbl>(new Action<userTbl>(this.attach_userTbls), new Action<userTbl>(this.detach_userTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string per
		{
			get
			{
				return this._per;
			}
			set
			{
				if ((this._per != value))
				{
					this.OnperChanging(value);
					this.SendPropertyChanging();
					this._per = value;
					this.SendPropertyChanged("per");
					this.OnperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accessID", DbType="Int NOT NULL")]
		public int accessID
		{
			get
			{
				return this._accessID;
			}
			set
			{
				if ((this._accessID != value))
				{
					this.OnaccessIDChanging(value);
					this.SendPropertyChanging();
					this._accessID = value;
					this.SendPropertyChanged("accessID");
					this.OnaccessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="accessTbl_userTbl", Storage="_userTbls", ThisKey="ID", OtherKey="accessID")]
		public EntitySet<userTbl> userTbls
		{
			get
			{
				return this._userTbls;
			}
			set
			{
				this._userTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_userTbls(userTbl entity)
		{
			this.SendPropertyChanging();
			entity.accessTbl = this;
		}
		
		private void detach_userTbls(userTbl entity)
		{
			this.SendPropertyChanging();
			entity.accessTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.userTbl")]
	public partial class userTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _accessID;
		
		private string _name;
		
		private string _family;
		
		private string _emailtell;
		
		private string _password;
		
		private bool _isBlock;
		
		private string _lastedit;
		
		private System.DateTime _regDate;
		
		private EntitySet<bestIdeaCompetitionsTbl> _bestIdeaCompetitionsTbls;
		
		private EntitySet<creativityCompetitionTbl> _creativityCompetitionTbls;
		
		private EntitySet<myIranTbl> _myIranTbls;
		
		private EntitySet<pollTbl> _pollTbls;
		
		private EntitySet<pushMessageTbl> _pushMessageTbls;
		
		private EntityRef<accessTbl> _accessTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnaccessIDChanging(int value);
    partial void OnaccessIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnfamilyChanging(string value);
    partial void OnfamilyChanged();
    partial void OnemailtellChanging(string value);
    partial void OnemailtellChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnlasteditChanging(string value);
    partial void OnlasteditChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public userTbl()
		{
			this._bestIdeaCompetitionsTbls = new EntitySet<bestIdeaCompetitionsTbl>(new Action<bestIdeaCompetitionsTbl>(this.attach_bestIdeaCompetitionsTbls), new Action<bestIdeaCompetitionsTbl>(this.detach_bestIdeaCompetitionsTbls));
			this._creativityCompetitionTbls = new EntitySet<creativityCompetitionTbl>(new Action<creativityCompetitionTbl>(this.attach_creativityCompetitionTbls), new Action<creativityCompetitionTbl>(this.detach_creativityCompetitionTbls));
			this._myIranTbls = new EntitySet<myIranTbl>(new Action<myIranTbl>(this.attach_myIranTbls), new Action<myIranTbl>(this.detach_myIranTbls));
			this._pollTbls = new EntitySet<pollTbl>(new Action<pollTbl>(this.attach_pollTbls), new Action<pollTbl>(this.detach_pollTbls));
			this._pushMessageTbls = new EntitySet<pushMessageTbl>(new Action<pushMessageTbl>(this.attach_pushMessageTbls), new Action<pushMessageTbl>(this.detach_pushMessageTbls));
			this._accessTbl = default(EntityRef<accessTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accessID", DbType="Int NOT NULL")]
		public int accessID
		{
			get
			{
				return this._accessID;
			}
			set
			{
				if ((this._accessID != value))
				{
					if (this._accessTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaccessIDChanging(value);
					this.SendPropertyChanging();
					this._accessID = value;
					this.SendPropertyChanged("accessID");
					this.OnaccessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_family", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string family
		{
			get
			{
				return this._family;
			}
			set
			{
				if ((this._family != value))
				{
					this.OnfamilyChanging(value);
					this.SendPropertyChanging();
					this._family = value;
					this.SendPropertyChanged("family");
					this.OnfamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailtell", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string emailtell
		{
			get
			{
				return this._emailtell;
			}
			set
			{
				if ((this._emailtell != value))
				{
					this.OnemailtellChanging(value);
					this.SendPropertyChanging();
					this._emailtell = value;
					this.SendPropertyChanged("emailtell");
					this.OnemailtellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastedit", DbType="NVarChar(550) NOT NULL", CanBeNull=false)]
		public string lastedit
		{
			get
			{
				return this._lastedit;
			}
			set
			{
				if ((this._lastedit != value))
				{
					this.OnlasteditChanging(value);
					this.SendPropertyChanging();
					this._lastedit = value;
					this.SendPropertyChanged("lastedit");
					this.OnlasteditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_bestIdeaCompetitionsTbl", Storage="_bestIdeaCompetitionsTbls", ThisKey="ID", OtherKey="creatorID")]
		public EntitySet<bestIdeaCompetitionsTbl> bestIdeaCompetitionsTbls
		{
			get
			{
				return this._bestIdeaCompetitionsTbls;
			}
			set
			{
				this._bestIdeaCompetitionsTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_creativityCompetitionTbl", Storage="_creativityCompetitionTbls", ThisKey="ID", OtherKey="userID")]
		public EntitySet<creativityCompetitionTbl> creativityCompetitionTbls
		{
			get
			{
				return this._creativityCompetitionTbls;
			}
			set
			{
				this._creativityCompetitionTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_myIranTbl", Storage="_myIranTbls", ThisKey="ID", OtherKey="userID")]
		public EntitySet<myIranTbl> myIranTbls
		{
			get
			{
				return this._myIranTbls;
			}
			set
			{
				this._myIranTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_pollTbl", Storage="_pollTbls", ThisKey="ID", OtherKey="userID")]
		public EntitySet<pollTbl> pollTbls
		{
			get
			{
				return this._pollTbls;
			}
			set
			{
				this._pollTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_pushMessageTbl", Storage="_pushMessageTbls", ThisKey="ID", OtherKey="creatorID")]
		public EntitySet<pushMessageTbl> pushMessageTbls
		{
			get
			{
				return this._pushMessageTbls;
			}
			set
			{
				this._pushMessageTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="accessTbl_userTbl", Storage="_accessTbl", ThisKey="accessID", OtherKey="ID", IsForeignKey=true)]
		public accessTbl accessTbl
		{
			get
			{
				return this._accessTbl.Entity;
			}
			set
			{
				accessTbl previousValue = this._accessTbl.Entity;
				if (((previousValue != value) 
							|| (this._accessTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._accessTbl.Entity = null;
						previousValue.userTbls.Remove(this);
					}
					this._accessTbl.Entity = value;
					if ((value != null))
					{
						value.userTbls.Add(this);
						this._accessID = value.ID;
					}
					else
					{
						this._accessID = default(int);
					}
					this.SendPropertyChanged("accessTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_bestIdeaCompetitionsTbls(bestIdeaCompetitionsTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_bestIdeaCompetitionsTbls(bestIdeaCompetitionsTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_creativityCompetitionTbls(creativityCompetitionTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_creativityCompetitionTbls(creativityCompetitionTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_myIranTbls(myIranTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_myIranTbls(myIranTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_pollTbls(pollTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_pollTbls(pollTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_pushMessageTbls(pushMessageTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_pushMessageTbls(pushMessageTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.answerContentTbl")]
	public partial class answerContentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _answerID;
		
		private int _contentType;
		
		private string _value;
		
		private long _pri;
		
		private System.DateTime _regDate;
		
		private EntityRef<answerTbl> _answerTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnanswerIDChanging(long value);
    partial void OnanswerIDChanged();
    partial void OncontentTypeChanging(int value);
    partial void OncontentTypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnpriChanging(long value);
    partial void OnpriChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public answerContentTbl()
		{
			this._answerTbl = default(EntityRef<answerTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answerID", DbType="BigInt NOT NULL")]
		public long answerID
		{
			get
			{
				return this._answerID;
			}
			set
			{
				if ((this._answerID != value))
				{
					if (this._answerTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnanswerIDChanging(value);
					this.SendPropertyChanging();
					this._answerID = value;
					this.SendPropertyChanged("answerID");
					this.OnanswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentType", DbType="Int NOT NULL")]
		public int contentType
		{
			get
			{
				return this._contentType;
			}
			set
			{
				if ((this._contentType != value))
				{
					this.OncontentTypeChanging(value);
					this.SendPropertyChanging();
					this._contentType = value;
					this.SendPropertyChanged("contentType");
					this.OncontentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pri", DbType="BigInt NOT NULL")]
		public long pri
		{
			get
			{
				return this._pri;
			}
			set
			{
				if ((this._pri != value))
				{
					this.OnpriChanging(value);
					this.SendPropertyChanging();
					this._pri = value;
					this.SendPropertyChanged("pri");
					this.OnpriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="answerTbl_answerContentTbl", Storage="_answerTbl", ThisKey="answerID", OtherKey="ID", IsForeignKey=true)]
		public answerTbl answerTbl
		{
			get
			{
				return this._answerTbl.Entity;
			}
			set
			{
				answerTbl previousValue = this._answerTbl.Entity;
				if (((previousValue != value) 
							|| (this._answerTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._answerTbl.Entity = null;
						previousValue.answerContentTbls.Remove(this);
					}
					this._answerTbl.Entity = value;
					if ((value != null))
					{
						value.answerContentTbls.Add(this);
						this._answerID = value.ID;
					}
					else
					{
						this._answerID = default(long);
					}
					this.SendPropertyChanged("answerTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.answerTbl")]
	public partial class answerTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _mUserID;
		
		private long _creativityCompetitionID;
		
		private string _title;
		
		private bool _isCorrect;
		
		private bool _isWinner;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private System.Nullable<long> _userID;
		
		private EntitySet<answerContentTbl> _answerContentTbls;
		
		private EntityRef<creativityCompetitionTbl> _creativityCompetitionTbl;
		
		private EntityRef<mUserTbl> _mUserTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnmUserIDChanging(long value);
    partial void OnmUserIDChanged();
    partial void OncreativityCompetitionIDChanging(long value);
    partial void OncreativityCompetitionIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnisCorrectChanging(bool value);
    partial void OnisCorrectChanged();
    partial void OnisWinnerChanging(bool value);
    partial void OnisWinnerChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    #endregion
		
		public answerTbl()
		{
			this._answerContentTbls = new EntitySet<answerContentTbl>(new Action<answerContentTbl>(this.attach_answerContentTbls), new Action<answerContentTbl>(this.detach_answerContentTbls));
			this._creativityCompetitionTbl = default(EntityRef<creativityCompetitionTbl>);
			this._mUserTbl = default(EntityRef<mUserTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt NOT NULL")]
		public long mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					if (this._mUserTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creativityCompetitionID", DbType="BigInt NOT NULL")]
		public long creativityCompetitionID
		{
			get
			{
				return this._creativityCompetitionID;
			}
			set
			{
				if ((this._creativityCompetitionID != value))
				{
					if (this._creativityCompetitionTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncreativityCompetitionIDChanging(value);
					this.SendPropertyChanging();
					this._creativityCompetitionID = value;
					this.SendPropertyChanged("creativityCompetitionID");
					this.OncreativityCompetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isCorrect", DbType="Bit NOT NULL")]
		public bool isCorrect
		{
			get
			{
				return this._isCorrect;
			}
			set
			{
				if ((this._isCorrect != value))
				{
					this.OnisCorrectChanging(value);
					this.SendPropertyChanging();
					this._isCorrect = value;
					this.SendPropertyChanged("isCorrect");
					this.OnisCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isWinner", DbType="Bit NOT NULL")]
		public bool isWinner
		{
			get
			{
				return this._isWinner;
			}
			set
			{
				if ((this._isWinner != value))
				{
					this.OnisWinnerChanging(value);
					this.SendPropertyChanging();
					this._isWinner = value;
					this.SendPropertyChanged("isWinner");
					this.OnisWinnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="answerTbl_answerContentTbl", Storage="_answerContentTbls", ThisKey="ID", OtherKey="answerID")]
		public EntitySet<answerContentTbl> answerContentTbls
		{
			get
			{
				return this._answerContentTbls;
			}
			set
			{
				this._answerContentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="creativityCompetitionTbl_answerTbl", Storage="_creativityCompetitionTbl", ThisKey="creativityCompetitionID", OtherKey="ID", IsForeignKey=true)]
		public creativityCompetitionTbl creativityCompetitionTbl
		{
			get
			{
				return this._creativityCompetitionTbl.Entity;
			}
			set
			{
				creativityCompetitionTbl previousValue = this._creativityCompetitionTbl.Entity;
				if (((previousValue != value) 
							|| (this._creativityCompetitionTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._creativityCompetitionTbl.Entity = null;
						previousValue.answerTbls.Remove(this);
					}
					this._creativityCompetitionTbl.Entity = value;
					if ((value != null))
					{
						value.answerTbls.Add(this);
						this._creativityCompetitionID = value.ID;
					}
					else
					{
						this._creativityCompetitionID = default(long);
					}
					this.SendPropertyChanged("creativityCompetitionTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_answerTbl", Storage="_mUserTbl", ThisKey="mUserID", OtherKey="ID", IsForeignKey=true)]
		public mUserTbl mUserTbl
		{
			get
			{
				return this._mUserTbl.Entity;
			}
			set
			{
				mUserTbl previousValue = this._mUserTbl.Entity;
				if (((previousValue != value) 
							|| (this._mUserTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mUserTbl.Entity = null;
						previousValue.answerTbls.Remove(this);
					}
					this._mUserTbl.Entity = value;
					if ((value != null))
					{
						value.answerTbls.Add(this);
						this._mUserID = value.ID;
					}
					else
					{
						this._mUserID = default(long);
					}
					this.SendPropertyChanged("mUserTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_answerContentTbls(answerContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.answerTbl = this;
		}
		
		private void detach_answerContentTbls(answerContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.answerTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bestIdeaCompetitionsContentTbl")]
	public partial class bestIdeaCompetitionsContentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _bestIdeaCompetitionsID;
		
		private int _contentType;
		
		private string _value;
		
		private long _pri;
		
		private System.DateTime _regDate;
		
		private EntityRef<bestIdeaCompetitionsTbl> _bestIdeaCompetitionsTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnbestIdeaCompetitionsIDChanging(long value);
    partial void OnbestIdeaCompetitionsIDChanged();
    partial void OncontentTypeChanging(int value);
    partial void OncontentTypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnpriChanging(long value);
    partial void OnpriChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public bestIdeaCompetitionsContentTbl()
		{
			this._bestIdeaCompetitionsTbl = default(EntityRef<bestIdeaCompetitionsTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bestIdeaCompetitionsID", DbType="BigInt NOT NULL")]
		public long bestIdeaCompetitionsID
		{
			get
			{
				return this._bestIdeaCompetitionsID;
			}
			set
			{
				if ((this._bestIdeaCompetitionsID != value))
				{
					if (this._bestIdeaCompetitionsTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbestIdeaCompetitionsIDChanging(value);
					this.SendPropertyChanging();
					this._bestIdeaCompetitionsID = value;
					this.SendPropertyChanged("bestIdeaCompetitionsID");
					this.OnbestIdeaCompetitionsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentType", DbType="Int NOT NULL")]
		public int contentType
		{
			get
			{
				return this._contentType;
			}
			set
			{
				if ((this._contentType != value))
				{
					this.OncontentTypeChanging(value);
					this.SendPropertyChanging();
					this._contentType = value;
					this.SendPropertyChanged("contentType");
					this.OncontentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pri", DbType="BigInt NOT NULL")]
		public long pri
		{
			get
			{
				return this._pri;
			}
			set
			{
				if ((this._pri != value))
				{
					this.OnpriChanging(value);
					this.SendPropertyChanging();
					this._pri = value;
					this.SendPropertyChanged("pri");
					this.OnpriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bestIdeaCompetitionsTbl_bestIdeaCompetitionsContentTbl", Storage="_bestIdeaCompetitionsTbl", ThisKey="bestIdeaCompetitionsID", OtherKey="ID", IsForeignKey=true)]
		public bestIdeaCompetitionsTbl bestIdeaCompetitionsTbl
		{
			get
			{
				return this._bestIdeaCompetitionsTbl.Entity;
			}
			set
			{
				bestIdeaCompetitionsTbl previousValue = this._bestIdeaCompetitionsTbl.Entity;
				if (((previousValue != value) 
							|| (this._bestIdeaCompetitionsTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._bestIdeaCompetitionsTbl.Entity = null;
						previousValue.bestIdeaCompetitionsContentTbls.Remove(this);
					}
					this._bestIdeaCompetitionsTbl.Entity = value;
					if ((value != null))
					{
						value.bestIdeaCompetitionsContentTbls.Add(this);
						this._bestIdeaCompetitionsID = value.ID;
					}
					else
					{
						this._bestIdeaCompetitionsID = default(long);
					}
					this.SendPropertyChanged("bestIdeaCompetitionsTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bestIdeaCompetitionsTagTbl")]
	public partial class bestIdeaCompetitionsTagTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _tagID;
		
		private long _bestIdeaCompetitionsID;
		
		private EntityRef<bestIdeaCompetitionsTbl> _bestIdeaCompetitionsTbl;
		
		private EntityRef<tagTbl> _tagTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OntagIDChanging(long value);
    partial void OntagIDChanged();
    partial void OnbestIdeaCompetitionsIDChanging(long value);
    partial void OnbestIdeaCompetitionsIDChanged();
    #endregion
		
		public bestIdeaCompetitionsTagTbl()
		{
			this._bestIdeaCompetitionsTbl = default(EntityRef<bestIdeaCompetitionsTbl>);
			this._tagTbl = default(EntityRef<tagTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tagID", DbType="BigInt NOT NULL")]
		public long tagID
		{
			get
			{
				return this._tagID;
			}
			set
			{
				if ((this._tagID != value))
				{
					if (this._tagTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntagIDChanging(value);
					this.SendPropertyChanging();
					this._tagID = value;
					this.SendPropertyChanged("tagID");
					this.OntagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bestIdeaCompetitionsID", DbType="BigInt NOT NULL")]
		public long bestIdeaCompetitionsID
		{
			get
			{
				return this._bestIdeaCompetitionsID;
			}
			set
			{
				if ((this._bestIdeaCompetitionsID != value))
				{
					if (this._bestIdeaCompetitionsTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbestIdeaCompetitionsIDChanging(value);
					this.SendPropertyChanging();
					this._bestIdeaCompetitionsID = value;
					this.SendPropertyChanged("bestIdeaCompetitionsID");
					this.OnbestIdeaCompetitionsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bestIdeaCompetitionsTbl_bestIdeaCompetitionsTagTbl", Storage="_bestIdeaCompetitionsTbl", ThisKey="bestIdeaCompetitionsID", OtherKey="ID", IsForeignKey=true)]
		public bestIdeaCompetitionsTbl bestIdeaCompetitionsTbl
		{
			get
			{
				return this._bestIdeaCompetitionsTbl.Entity;
			}
			set
			{
				bestIdeaCompetitionsTbl previousValue = this._bestIdeaCompetitionsTbl.Entity;
				if (((previousValue != value) 
							|| (this._bestIdeaCompetitionsTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._bestIdeaCompetitionsTbl.Entity = null;
						previousValue.bestIdeaCompetitionsTagTbls.Remove(this);
					}
					this._bestIdeaCompetitionsTbl.Entity = value;
					if ((value != null))
					{
						value.bestIdeaCompetitionsTagTbls.Add(this);
						this._bestIdeaCompetitionsID = value.ID;
					}
					else
					{
						this._bestIdeaCompetitionsID = default(long);
					}
					this.SendPropertyChanged("bestIdeaCompetitionsTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_bestIdeaCompetitionsTagTbl", Storage="_tagTbl", ThisKey="tagID", OtherKey="ID", IsForeignKey=true)]
		public tagTbl tagTbl
		{
			get
			{
				return this._tagTbl.Entity;
			}
			set
			{
				tagTbl previousValue = this._tagTbl.Entity;
				if (((previousValue != value) 
							|| (this._tagTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tagTbl.Entity = null;
						previousValue.bestIdeaCompetitionsTagTbls.Remove(this);
					}
					this._tagTbl.Entity = value;
					if ((value != null))
					{
						value.bestIdeaCompetitionsTagTbls.Add(this);
						this._tagID = value.ID;
					}
					else
					{
						this._tagID = default(long);
					}
					this.SendPropertyChanged("tagTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bestIdeaCompetitionsTbl")]
	public partial class bestIdeaCompetitionsTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _creatorID;
		
		private string _title;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private System.DateTime _resultVoteDate;
		
		private bool _isSendNotification;
		
		private string _notificationText;
		
		private EntitySet<bestIdeaCompetitionsContentTbl> _bestIdeaCompetitionsContentTbls;
		
		private EntitySet<bestIdeaCompetitionsTagTbl> _bestIdeaCompetitionsTagTbls;
		
		private EntitySet<ideasTbl> _ideasTbls;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OncreatorIDChanging(long value);
    partial void OncreatorIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    partial void OnresultVoteDateChanging(System.DateTime value);
    partial void OnresultVoteDateChanged();
    partial void OnisSendNotificationChanging(bool value);
    partial void OnisSendNotificationChanged();
    partial void OnnotificationTextChanging(string value);
    partial void OnnotificationTextChanged();
    #endregion
		
		public bestIdeaCompetitionsTbl()
		{
			this._bestIdeaCompetitionsContentTbls = new EntitySet<bestIdeaCompetitionsContentTbl>(new Action<bestIdeaCompetitionsContentTbl>(this.attach_bestIdeaCompetitionsContentTbls), new Action<bestIdeaCompetitionsContentTbl>(this.detach_bestIdeaCompetitionsContentTbls));
			this._bestIdeaCompetitionsTagTbls = new EntitySet<bestIdeaCompetitionsTagTbl>(new Action<bestIdeaCompetitionsTagTbl>(this.attach_bestIdeaCompetitionsTagTbls), new Action<bestIdeaCompetitionsTagTbl>(this.detach_bestIdeaCompetitionsTagTbls));
			this._ideasTbls = new EntitySet<ideasTbl>(new Action<ideasTbl>(this.attach_ideasTbls), new Action<ideasTbl>(this.detach_ideasTbls));
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creatorID", DbType="BigInt NOT NULL")]
		public long creatorID
		{
			get
			{
				return this._creatorID;
			}
			set
			{
				if ((this._creatorID != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncreatorIDChanging(value);
					this.SendPropertyChanging();
					this._creatorID = value;
					this.SendPropertyChanged("creatorID");
					this.OncreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="DateTime NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="DateTime NOT NULL")]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_resultVoteDate", DbType="DateTime NOT NULL")]
		public System.DateTime resultVoteDate
		{
			get
			{
				return this._resultVoteDate;
			}
			set
			{
				if ((this._resultVoteDate != value))
				{
					this.OnresultVoteDateChanging(value);
					this.SendPropertyChanging();
					this._resultVoteDate = value;
					this.SendPropertyChanged("resultVoteDate");
					this.OnresultVoteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSendNotification", DbType="Bit NOT NULL")]
		public bool isSendNotification
		{
			get
			{
				return this._isSendNotification;
			}
			set
			{
				if ((this._isSendNotification != value))
				{
					this.OnisSendNotificationChanging(value);
					this.SendPropertyChanging();
					this._isSendNotification = value;
					this.SendPropertyChanged("isSendNotification");
					this.OnisSendNotificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notificationText", DbType="NVarChar(250)")]
		public string notificationText
		{
			get
			{
				return this._notificationText;
			}
			set
			{
				if ((this._notificationText != value))
				{
					this.OnnotificationTextChanging(value);
					this.SendPropertyChanging();
					this._notificationText = value;
					this.SendPropertyChanged("notificationText");
					this.OnnotificationTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bestIdeaCompetitionsTbl_bestIdeaCompetitionsContentTbl", Storage="_bestIdeaCompetitionsContentTbls", ThisKey="ID", OtherKey="bestIdeaCompetitionsID")]
		public EntitySet<bestIdeaCompetitionsContentTbl> bestIdeaCompetitionsContentTbls
		{
			get
			{
				return this._bestIdeaCompetitionsContentTbls;
			}
			set
			{
				this._bestIdeaCompetitionsContentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bestIdeaCompetitionsTbl_bestIdeaCompetitionsTagTbl", Storage="_bestIdeaCompetitionsTagTbls", ThisKey="ID", OtherKey="bestIdeaCompetitionsID")]
		public EntitySet<bestIdeaCompetitionsTagTbl> bestIdeaCompetitionsTagTbls
		{
			get
			{
				return this._bestIdeaCompetitionsTagTbls;
			}
			set
			{
				this._bestIdeaCompetitionsTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bestIdeaCompetitionsTbl_ideasTbl", Storage="_ideasTbls", ThisKey="ID", OtherKey="bestIdeaCompetitionsID")]
		public EntitySet<ideasTbl> ideasTbls
		{
			get
			{
				return this._ideasTbls;
			}
			set
			{
				this._ideasTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_bestIdeaCompetitionsTbl", Storage="_userTbl", ThisKey="creatorID", OtherKey="ID", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.bestIdeaCompetitionsTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.bestIdeaCompetitionsTbls.Add(this);
						this._creatorID = value.ID;
					}
					else
					{
						this._creatorID = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_bestIdeaCompetitionsContentTbls(bestIdeaCompetitionsContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.bestIdeaCompetitionsTbl = this;
		}
		
		private void detach_bestIdeaCompetitionsContentTbls(bestIdeaCompetitionsContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.bestIdeaCompetitionsTbl = null;
		}
		
		private void attach_bestIdeaCompetitionsTagTbls(bestIdeaCompetitionsTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.bestIdeaCompetitionsTbl = this;
		}
		
		private void detach_bestIdeaCompetitionsTagTbls(bestIdeaCompetitionsTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.bestIdeaCompetitionsTbl = null;
		}
		
		private void attach_ideasTbls(ideasTbl entity)
		{
			this.SendPropertyChanging();
			entity.bestIdeaCompetitionsTbl = this;
		}
		
		private void detach_ideasTbls(ideasTbl entity)
		{
			this.SendPropertyChanging();
			entity.bestIdeaCompetitionsTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.chartTbl")]
	public partial class chartTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _reportID;
		
		private string _xTitle;
		
		private double _yValue;
		
		private EntityRef<reportTbl> _reportTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnreportIDChanging(long value);
    partial void OnreportIDChanged();
    partial void OnxTitleChanging(string value);
    partial void OnxTitleChanged();
    partial void OnyValueChanging(double value);
    partial void OnyValueChanged();
    #endregion
		
		public chartTbl()
		{
			this._reportTbl = default(EntityRef<reportTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reportID", DbType="BigInt NOT NULL")]
		public long reportID
		{
			get
			{
				return this._reportID;
			}
			set
			{
				if ((this._reportID != value))
				{
					if (this._reportTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreportIDChanging(value);
					this.SendPropertyChanging();
					this._reportID = value;
					this.SendPropertyChanged("reportID");
					this.OnreportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xTitle", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string xTitle
		{
			get
			{
				return this._xTitle;
			}
			set
			{
				if ((this._xTitle != value))
				{
					this.OnxTitleChanging(value);
					this.SendPropertyChanging();
					this._xTitle = value;
					this.SendPropertyChanged("xTitle");
					this.OnxTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_yValue", DbType="Float NOT NULL")]
		public double yValue
		{
			get
			{
				return this._yValue;
			}
			set
			{
				if ((this._yValue != value))
				{
					this.OnyValueChanging(value);
					this.SendPropertyChanging();
					this._yValue = value;
					this.SendPropertyChanged("yValue");
					this.OnyValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="reportTbl_chartTbl", Storage="_reportTbl", ThisKey="reportID", OtherKey="ID", IsForeignKey=true)]
		public reportTbl reportTbl
		{
			get
			{
				return this._reportTbl.Entity;
			}
			set
			{
				reportTbl previousValue = this._reportTbl.Entity;
				if (((previousValue != value) 
							|| (this._reportTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._reportTbl.Entity = null;
						previousValue.chartTbls.Remove(this);
					}
					this._reportTbl.Entity = value;
					if ((value != null))
					{
						value.chartTbls.Add(this);
						this._reportID = value.ID;
					}
					else
					{
						this._reportID = default(long);
					}
					this.SendPropertyChanged("reportTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.creativityCompetitionContentTbl")]
	public partial class creativityCompetitionContentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _creativityCompetitionID;
		
		private int _contentType;
		
		private string _value;
		
		private long _pri;
		
		private System.DateTime _regDate;
		
		private EntityRef<creativityCompetitionTbl> _creativityCompetitionTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OncreativityCompetitionIDChanging(long value);
    partial void OncreativityCompetitionIDChanged();
    partial void OncontentTypeChanging(int value);
    partial void OncontentTypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnpriChanging(long value);
    partial void OnpriChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public creativityCompetitionContentTbl()
		{
			this._creativityCompetitionTbl = default(EntityRef<creativityCompetitionTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creativityCompetitionID", DbType="BigInt NOT NULL")]
		public long creativityCompetitionID
		{
			get
			{
				return this._creativityCompetitionID;
			}
			set
			{
				if ((this._creativityCompetitionID != value))
				{
					if (this._creativityCompetitionTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncreativityCompetitionIDChanging(value);
					this.SendPropertyChanging();
					this._creativityCompetitionID = value;
					this.SendPropertyChanged("creativityCompetitionID");
					this.OncreativityCompetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentType", DbType="Int NOT NULL")]
		public int contentType
		{
			get
			{
				return this._contentType;
			}
			set
			{
				if ((this._contentType != value))
				{
					this.OncontentTypeChanging(value);
					this.SendPropertyChanging();
					this._contentType = value;
					this.SendPropertyChanged("contentType");
					this.OncontentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pri", DbType="BigInt NOT NULL")]
		public long pri
		{
			get
			{
				return this._pri;
			}
			set
			{
				if ((this._pri != value))
				{
					this.OnpriChanging(value);
					this.SendPropertyChanging();
					this._pri = value;
					this.SendPropertyChanged("pri");
					this.OnpriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="creativityCompetitionTbl_creativityCompetitionContentTbl", Storage="_creativityCompetitionTbl", ThisKey="creativityCompetitionID", OtherKey="ID", IsForeignKey=true)]
		public creativityCompetitionTbl creativityCompetitionTbl
		{
			get
			{
				return this._creativityCompetitionTbl.Entity;
			}
			set
			{
				creativityCompetitionTbl previousValue = this._creativityCompetitionTbl.Entity;
				if (((previousValue != value) 
							|| (this._creativityCompetitionTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._creativityCompetitionTbl.Entity = null;
						previousValue.creativityCompetitionContentTbls.Remove(this);
					}
					this._creativityCompetitionTbl.Entity = value;
					if ((value != null))
					{
						value.creativityCompetitionContentTbls.Add(this);
						this._creativityCompetitionID = value.ID;
					}
					else
					{
						this._creativityCompetitionID = default(long);
					}
					this.SendPropertyChanged("creativityCompetitionTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.creativityCompetitionTagTbl")]
	public partial class creativityCompetitionTagTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _tagID;
		
		private long _creativityCompetitionID;
		
		private EntityRef<creativityCompetitionTbl> _creativityCompetitionTbl;
		
		private EntityRef<tagTbl> _tagTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OntagIDChanging(long value);
    partial void OntagIDChanged();
    partial void OncreativityCompetitionIDChanging(long value);
    partial void OncreativityCompetitionIDChanged();
    #endregion
		
		public creativityCompetitionTagTbl()
		{
			this._creativityCompetitionTbl = default(EntityRef<creativityCompetitionTbl>);
			this._tagTbl = default(EntityRef<tagTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tagID", DbType="BigInt NOT NULL")]
		public long tagID
		{
			get
			{
				return this._tagID;
			}
			set
			{
				if ((this._tagID != value))
				{
					if (this._tagTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntagIDChanging(value);
					this.SendPropertyChanging();
					this._tagID = value;
					this.SendPropertyChanged("tagID");
					this.OntagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creativityCompetitionID", DbType="BigInt NOT NULL")]
		public long creativityCompetitionID
		{
			get
			{
				return this._creativityCompetitionID;
			}
			set
			{
				if ((this._creativityCompetitionID != value))
				{
					if (this._creativityCompetitionTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncreativityCompetitionIDChanging(value);
					this.SendPropertyChanging();
					this._creativityCompetitionID = value;
					this.SendPropertyChanged("creativityCompetitionID");
					this.OncreativityCompetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="creativityCompetitionTbl_creativityCompetitionTagTbl", Storage="_creativityCompetitionTbl", ThisKey="creativityCompetitionID", OtherKey="ID", IsForeignKey=true)]
		public creativityCompetitionTbl creativityCompetitionTbl
		{
			get
			{
				return this._creativityCompetitionTbl.Entity;
			}
			set
			{
				creativityCompetitionTbl previousValue = this._creativityCompetitionTbl.Entity;
				if (((previousValue != value) 
							|| (this._creativityCompetitionTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._creativityCompetitionTbl.Entity = null;
						previousValue.creativityCompetitionTagTbls.Remove(this);
					}
					this._creativityCompetitionTbl.Entity = value;
					if ((value != null))
					{
						value.creativityCompetitionTagTbls.Add(this);
						this._creativityCompetitionID = value.ID;
					}
					else
					{
						this._creativityCompetitionID = default(long);
					}
					this.SendPropertyChanged("creativityCompetitionTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_creativityCompetitionTagTbl", Storage="_tagTbl", ThisKey="tagID", OtherKey="ID", IsForeignKey=true)]
		public tagTbl tagTbl
		{
			get
			{
				return this._tagTbl.Entity;
			}
			set
			{
				tagTbl previousValue = this._tagTbl.Entity;
				if (((previousValue != value) 
							|| (this._tagTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tagTbl.Entity = null;
						previousValue.creativityCompetitionTagTbls.Remove(this);
					}
					this._tagTbl.Entity = value;
					if ((value != null))
					{
						value.creativityCompetitionTagTbls.Add(this);
						this._tagID = value.ID;
					}
					else
					{
						this._tagID = default(long);
					}
					this.SendPropertyChanged("tagTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.creativityCompetitionTbl")]
	public partial class creativityCompetitionTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _userID;
		
		private string _title;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private bool _isDone;
		
		private bool _isSendNotification;
		
		private string _notificationText;
		
		private System.Nullable<System.DateTime> _doneDate;
		
		private EntitySet<answerTbl> _answerTbls;
		
		private EntitySet<creativityCompetitionContentTbl> _creativityCompetitionContentTbls;
		
		private EntitySet<creativityCompetitionTagTbl> _creativityCompetitionTagTbls;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnuserIDChanging(long value);
    partial void OnuserIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    partial void OnisDoneChanging(bool value);
    partial void OnisDoneChanged();
    partial void OnisSendNotificationChanging(bool value);
    partial void OnisSendNotificationChanged();
    partial void OnnotificationTextChanging(string value);
    partial void OnnotificationTextChanged();
    partial void OndoneDateChanging(System.Nullable<System.DateTime> value);
    partial void OndoneDateChanged();
    #endregion
		
		public creativityCompetitionTbl()
		{
			this._answerTbls = new EntitySet<answerTbl>(new Action<answerTbl>(this.attach_answerTbls), new Action<answerTbl>(this.detach_answerTbls));
			this._creativityCompetitionContentTbls = new EntitySet<creativityCompetitionContentTbl>(new Action<creativityCompetitionContentTbl>(this.attach_creativityCompetitionContentTbls), new Action<creativityCompetitionContentTbl>(this.detach_creativityCompetitionContentTbls));
			this._creativityCompetitionTagTbls = new EntitySet<creativityCompetitionTagTbl>(new Action<creativityCompetitionTagTbl>(this.attach_creativityCompetitionTagTbls), new Action<creativityCompetitionTagTbl>(this.detach_creativityCompetitionTagTbls));
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt NOT NULL")]
		public long userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="DateTime NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="DateTime NOT NULL")]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDone", DbType="Bit NOT NULL")]
		public bool isDone
		{
			get
			{
				return this._isDone;
			}
			set
			{
				if ((this._isDone != value))
				{
					this.OnisDoneChanging(value);
					this.SendPropertyChanging();
					this._isDone = value;
					this.SendPropertyChanged("isDone");
					this.OnisDoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSendNotification", DbType="Bit NOT NULL")]
		public bool isSendNotification
		{
			get
			{
				return this._isSendNotification;
			}
			set
			{
				if ((this._isSendNotification != value))
				{
					this.OnisSendNotificationChanging(value);
					this.SendPropertyChanging();
					this._isSendNotification = value;
					this.SendPropertyChanged("isSendNotification");
					this.OnisSendNotificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notificationText", DbType="NVarChar(250)")]
		public string notificationText
		{
			get
			{
				return this._notificationText;
			}
			set
			{
				if ((this._notificationText != value))
				{
					this.OnnotificationTextChanging(value);
					this.SendPropertyChanging();
					this._notificationText = value;
					this.SendPropertyChanged("notificationText");
					this.OnnotificationTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doneDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> doneDate
		{
			get
			{
				return this._doneDate;
			}
			set
			{
				if ((this._doneDate != value))
				{
					this.OndoneDateChanging(value);
					this.SendPropertyChanging();
					this._doneDate = value;
					this.SendPropertyChanged("doneDate");
					this.OndoneDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="creativityCompetitionTbl_answerTbl", Storage="_answerTbls", ThisKey="ID", OtherKey="creativityCompetitionID")]
		public EntitySet<answerTbl> answerTbls
		{
			get
			{
				return this._answerTbls;
			}
			set
			{
				this._answerTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="creativityCompetitionTbl_creativityCompetitionContentTbl", Storage="_creativityCompetitionContentTbls", ThisKey="ID", OtherKey="creativityCompetitionID")]
		public EntitySet<creativityCompetitionContentTbl> creativityCompetitionContentTbls
		{
			get
			{
				return this._creativityCompetitionContentTbls;
			}
			set
			{
				this._creativityCompetitionContentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="creativityCompetitionTbl_creativityCompetitionTagTbl", Storage="_creativityCompetitionTagTbls", ThisKey="ID", OtherKey="creativityCompetitionID")]
		public EntitySet<creativityCompetitionTagTbl> creativityCompetitionTagTbls
		{
			get
			{
				return this._creativityCompetitionTagTbls;
			}
			set
			{
				this._creativityCompetitionTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_creativityCompetitionTbl", Storage="_userTbl", ThisKey="userID", OtherKey="ID", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.creativityCompetitionTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.creativityCompetitionTbls.Add(this);
						this._userID = value.ID;
					}
					else
					{
						this._userID = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_answerTbls(answerTbl entity)
		{
			this.SendPropertyChanging();
			entity.creativityCompetitionTbl = this;
		}
		
		private void detach_answerTbls(answerTbl entity)
		{
			this.SendPropertyChanging();
			entity.creativityCompetitionTbl = null;
		}
		
		private void attach_creativityCompetitionContentTbls(creativityCompetitionContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.creativityCompetitionTbl = this;
		}
		
		private void detach_creativityCompetitionContentTbls(creativityCompetitionContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.creativityCompetitionTbl = null;
		}
		
		private void attach_creativityCompetitionTagTbls(creativityCompetitionTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.creativityCompetitionTbl = this;
		}
		
		private void detach_creativityCompetitionTagTbls(creativityCompetitionTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.creativityCompetitionTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.downloadCommentTbl")]
	public partial class downloadCommentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _downloadID;
		
		private System.Nullable<long> _mUserID;
		
		private string _fullName;
		
		private string _mobile;
		
		private string _email;
		
		private string _text;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private System.Nullable<long> _userID;
		
		private EntityRef<downloadTbl> _downloadTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OndownloadIDChanging(long value);
    partial void OndownloadIDChanged();
    partial void OnmUserIDChanging(System.Nullable<long> value);
    partial void OnmUserIDChanged();
    partial void OnfullNameChanging(string value);
    partial void OnfullNameChanged();
    partial void OnmobileChanging(string value);
    partial void OnmobileChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    #endregion
		
		public downloadCommentTbl()
		{
			this._downloadTbl = default(EntityRef<downloadTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_downloadID", DbType="BigInt NOT NULL")]
		public long downloadID
		{
			get
			{
				return this._downloadID;
			}
			set
			{
				if ((this._downloadID != value))
				{
					if (this._downloadTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndownloadIDChanging(value);
					this.SendPropertyChanging();
					this._downloadID = value;
					this.SendPropertyChanged("downloadID");
					this.OndownloadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt")]
		public System.Nullable<long> mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string fullName
		{
			get
			{
				return this._fullName;
			}
			set
			{
				if ((this._fullName != value))
				{
					this.OnfullNameChanging(value);
					this.SendPropertyChanging();
					this._fullName = value;
					this.SendPropertyChanged("fullName");
					this.OnfullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobile", DbType="NVarChar(12)")]
		public string mobile
		{
			get
			{
				return this._mobile;
			}
			set
			{
				if ((this._mobile != value))
				{
					this.OnmobileChanging(value);
					this.SendPropertyChanging();
					this._mobile = value;
					this.SendPropertyChanged("mobile");
					this.OnmobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(150)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="downloadTbl_downloadCommentTbl", Storage="_downloadTbl", ThisKey="downloadID", OtherKey="ID", IsForeignKey=true)]
		public downloadTbl downloadTbl
		{
			get
			{
				return this._downloadTbl.Entity;
			}
			set
			{
				downloadTbl previousValue = this._downloadTbl.Entity;
				if (((previousValue != value) 
							|| (this._downloadTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._downloadTbl.Entity = null;
						previousValue.downloadCommentTbls.Remove(this);
					}
					this._downloadTbl.Entity = value;
					if ((value != null))
					{
						value.downloadCommentTbls.Add(this);
						this._downloadID = value.ID;
					}
					else
					{
						this._downloadID = default(long);
					}
					this.SendPropertyChanged("downloadTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.downloadContentTbl")]
	public partial class downloadContentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _downloadID;
		
		private int _contentType;
		
		private string _value;
		
		private System.Nullable<long> _downloadCount;
		
		private string _fileType;
		
		private System.Nullable<int> _fileSize;
		
		private long _pri;
		
		private System.DateTime _regDate;
		
		private EntityRef<downloadTbl> _downloadTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OndownloadIDChanging(long value);
    partial void OndownloadIDChanged();
    partial void OncontentTypeChanging(int value);
    partial void OncontentTypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OndownloadCountChanging(System.Nullable<long> value);
    partial void OndownloadCountChanged();
    partial void OnfileTypeChanging(string value);
    partial void OnfileTypeChanged();
    partial void OnfileSizeChanging(System.Nullable<int> value);
    partial void OnfileSizeChanged();
    partial void OnpriChanging(long value);
    partial void OnpriChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public downloadContentTbl()
		{
			this._downloadTbl = default(EntityRef<downloadTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_downloadID", DbType="BigInt NOT NULL")]
		public long downloadID
		{
			get
			{
				return this._downloadID;
			}
			set
			{
				if ((this._downloadID != value))
				{
					if (this._downloadTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndownloadIDChanging(value);
					this.SendPropertyChanging();
					this._downloadID = value;
					this.SendPropertyChanged("downloadID");
					this.OndownloadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentType", DbType="Int NOT NULL")]
		public int contentType
		{
			get
			{
				return this._contentType;
			}
			set
			{
				if ((this._contentType != value))
				{
					this.OncontentTypeChanging(value);
					this.SendPropertyChanging();
					this._contentType = value;
					this.SendPropertyChanged("contentType");
					this.OncontentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_downloadCount", DbType="BigInt")]
		public System.Nullable<long> downloadCount
		{
			get
			{
				return this._downloadCount;
			}
			set
			{
				if ((this._downloadCount != value))
				{
					this.OndownloadCountChanging(value);
					this.SendPropertyChanging();
					this._downloadCount = value;
					this.SendPropertyChanged("downloadCount");
					this.OndownloadCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileType", DbType="NVarChar(50)")]
		public string fileType
		{
			get
			{
				return this._fileType;
			}
			set
			{
				if ((this._fileType != value))
				{
					this.OnfileTypeChanging(value);
					this.SendPropertyChanging();
					this._fileType = value;
					this.SendPropertyChanged("fileType");
					this.OnfileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileSize", DbType="Int")]
		public System.Nullable<int> fileSize
		{
			get
			{
				return this._fileSize;
			}
			set
			{
				if ((this._fileSize != value))
				{
					this.OnfileSizeChanging(value);
					this.SendPropertyChanging();
					this._fileSize = value;
					this.SendPropertyChanged("fileSize");
					this.OnfileSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pri", DbType="BigInt NOT NULL")]
		public long pri
		{
			get
			{
				return this._pri;
			}
			set
			{
				if ((this._pri != value))
				{
					this.OnpriChanging(value);
					this.SendPropertyChanging();
					this._pri = value;
					this.SendPropertyChanged("pri");
					this.OnpriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="downloadTbl_downloadContentTbl", Storage="_downloadTbl", ThisKey="downloadID", OtherKey="ID", IsForeignKey=true)]
		public downloadTbl downloadTbl
		{
			get
			{
				return this._downloadTbl.Entity;
			}
			set
			{
				downloadTbl previousValue = this._downloadTbl.Entity;
				if (((previousValue != value) 
							|| (this._downloadTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._downloadTbl.Entity = null;
						previousValue.downloadContentTbls.Remove(this);
					}
					this._downloadTbl.Entity = value;
					if ((value != null))
					{
						value.downloadContentTbls.Add(this);
						this._downloadID = value.ID;
					}
					else
					{
						this._downloadID = default(long);
					}
					this.SendPropertyChanged("downloadTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.downloadLikeTbl")]
	public partial class downloadLikeTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _downloadID;
		
		private long _userID;
		
		private bool _isLike;
		
		private System.DateTime _regDate;
		
		private EntityRef<downloadTbl> _downloadTbl;
		
		private EntityRef<mUserTbl> _mUserTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OndownloadIDChanging(long value);
    partial void OndownloadIDChanged();
    partial void OnuserIDChanging(long value);
    partial void OnuserIDChanged();
    partial void OnisLikeChanging(bool value);
    partial void OnisLikeChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public downloadLikeTbl()
		{
			this._downloadTbl = default(EntityRef<downloadTbl>);
			this._mUserTbl = default(EntityRef<mUserTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_downloadID", DbType="BigInt NOT NULL")]
		public long downloadID
		{
			get
			{
				return this._downloadID;
			}
			set
			{
				if ((this._downloadID != value))
				{
					if (this._downloadTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndownloadIDChanging(value);
					this.SendPropertyChanging();
					this._downloadID = value;
					this.SendPropertyChanged("downloadID");
					this.OndownloadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt NOT NULL")]
		public long userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._mUserTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isLike", DbType="Bit NOT NULL")]
		public bool isLike
		{
			get
			{
				return this._isLike;
			}
			set
			{
				if ((this._isLike != value))
				{
					this.OnisLikeChanging(value);
					this.SendPropertyChanging();
					this._isLike = value;
					this.SendPropertyChanged("isLike");
					this.OnisLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="downloadTbl_downloadLikeTbl", Storage="_downloadTbl", ThisKey="downloadID", OtherKey="ID", IsForeignKey=true)]
		public downloadTbl downloadTbl
		{
			get
			{
				return this._downloadTbl.Entity;
			}
			set
			{
				downloadTbl previousValue = this._downloadTbl.Entity;
				if (((previousValue != value) 
							|| (this._downloadTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._downloadTbl.Entity = null;
						previousValue.downloadLikeTbls.Remove(this);
					}
					this._downloadTbl.Entity = value;
					if ((value != null))
					{
						value.downloadLikeTbls.Add(this);
						this._downloadID = value.ID;
					}
					else
					{
						this._downloadID = default(long);
					}
					this.SendPropertyChanged("downloadTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_downloadLikeTbl", Storage="_mUserTbl", ThisKey="userID", OtherKey="ID", IsForeignKey=true)]
		public mUserTbl mUserTbl
		{
			get
			{
				return this._mUserTbl.Entity;
			}
			set
			{
				mUserTbl previousValue = this._mUserTbl.Entity;
				if (((previousValue != value) 
							|| (this._mUserTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mUserTbl.Entity = null;
						previousValue.downloadLikeTbls.Remove(this);
					}
					this._mUserTbl.Entity = value;
					if ((value != null))
					{
						value.downloadLikeTbls.Add(this);
						this._userID = value.ID;
					}
					else
					{
						this._userID = default(long);
					}
					this.SendPropertyChanged("mUserTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.downloadSubGroupTbl")]
	public partial class downloadSubGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _downloadID;
		
		private long _subGroupID;
		
		private EntityRef<downloadTbl> _downloadTbl;
		
		private EntityRef<SubGroupTbl> _SubGroupTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OndownloadIDChanging(long value);
    partial void OndownloadIDChanged();
    partial void OnsubGroupIDChanging(long value);
    partial void OnsubGroupIDChanged();
    #endregion
		
		public downloadSubGroupTbl()
		{
			this._downloadTbl = default(EntityRef<downloadTbl>);
			this._SubGroupTbl = default(EntityRef<SubGroupTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_downloadID", DbType="BigInt NOT NULL")]
		public long downloadID
		{
			get
			{
				return this._downloadID;
			}
			set
			{
				if ((this._downloadID != value))
				{
					if (this._downloadTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndownloadIDChanging(value);
					this.SendPropertyChanging();
					this._downloadID = value;
					this.SendPropertyChanged("downloadID");
					this.OndownloadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subGroupID", DbType="BigInt NOT NULL")]
		public long subGroupID
		{
			get
			{
				return this._subGroupID;
			}
			set
			{
				if ((this._subGroupID != value))
				{
					if (this._SubGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubGroupIDChanging(value);
					this.SendPropertyChanging();
					this._subGroupID = value;
					this.SendPropertyChanged("subGroupID");
					this.OnsubGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="downloadTbl_downloadSubGroupTbl", Storage="_downloadTbl", ThisKey="downloadID", OtherKey="ID", IsForeignKey=true)]
		public downloadTbl downloadTbl
		{
			get
			{
				return this._downloadTbl.Entity;
			}
			set
			{
				downloadTbl previousValue = this._downloadTbl.Entity;
				if (((previousValue != value) 
							|| (this._downloadTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._downloadTbl.Entity = null;
						previousValue.downloadSubGroupTbls.Remove(this);
					}
					this._downloadTbl.Entity = value;
					if ((value != null))
					{
						value.downloadSubGroupTbls.Add(this);
						this._downloadID = value.ID;
					}
					else
					{
						this._downloadID = default(long);
					}
					this.SendPropertyChanged("downloadTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_downloadSubGroupTbl", Storage="_SubGroupTbl", ThisKey="subGroupID", OtherKey="ID", IsForeignKey=true)]
		public SubGroupTbl SubGroupTbl
		{
			get
			{
				return this._SubGroupTbl.Entity;
			}
			set
			{
				SubGroupTbl previousValue = this._SubGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._SubGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubGroupTbl.Entity = null;
						previousValue.downloadSubGroupTbls.Remove(this);
					}
					this._SubGroupTbl.Entity = value;
					if ((value != null))
					{
						value.downloadSubGroupTbls.Add(this);
						this._subGroupID = value.ID;
					}
					else
					{
						this._subGroupID = default(long);
					}
					this.SendPropertyChanged("SubGroupTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.downloadTagTbl")]
	public partial class downloadTagTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _tagID;
		
		private long _downloadID;
		
		private EntityRef<downloadTbl> _downloadTbl;
		
		private EntityRef<tagTbl> _tagTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OntagIDChanging(long value);
    partial void OntagIDChanged();
    partial void OndownloadIDChanging(long value);
    partial void OndownloadIDChanged();
    #endregion
		
		public downloadTagTbl()
		{
			this._downloadTbl = default(EntityRef<downloadTbl>);
			this._tagTbl = default(EntityRef<tagTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tagID", DbType="BigInt NOT NULL")]
		public long tagID
		{
			get
			{
				return this._tagID;
			}
			set
			{
				if ((this._tagID != value))
				{
					if (this._tagTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntagIDChanging(value);
					this.SendPropertyChanging();
					this._tagID = value;
					this.SendPropertyChanged("tagID");
					this.OntagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_downloadID", DbType="BigInt NOT NULL")]
		public long downloadID
		{
			get
			{
				return this._downloadID;
			}
			set
			{
				if ((this._downloadID != value))
				{
					if (this._downloadTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndownloadIDChanging(value);
					this.SendPropertyChanging();
					this._downloadID = value;
					this.SendPropertyChanged("downloadID");
					this.OndownloadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="downloadTbl_downloadTagTbl", Storage="_downloadTbl", ThisKey="downloadID", OtherKey="ID", IsForeignKey=true)]
		public downloadTbl downloadTbl
		{
			get
			{
				return this._downloadTbl.Entity;
			}
			set
			{
				downloadTbl previousValue = this._downloadTbl.Entity;
				if (((previousValue != value) 
							|| (this._downloadTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._downloadTbl.Entity = null;
						previousValue.downloadTagTbls.Remove(this);
					}
					this._downloadTbl.Entity = value;
					if ((value != null))
					{
						value.downloadTagTbls.Add(this);
						this._downloadID = value.ID;
					}
					else
					{
						this._downloadID = default(long);
					}
					this.SendPropertyChanged("downloadTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_downloadTagTbl", Storage="_tagTbl", ThisKey="tagID", OtherKey="ID", IsForeignKey=true)]
		public tagTbl tagTbl
		{
			get
			{
				return this._tagTbl.Entity;
			}
			set
			{
				tagTbl previousValue = this._tagTbl.Entity;
				if (((previousValue != value) 
							|| (this._tagTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tagTbl.Entity = null;
						previousValue.downloadTagTbls.Remove(this);
					}
					this._tagTbl.Entity = value;
					if ((value != null))
					{
						value.downloadTagTbls.Add(this);
						this._tagID = value.ID;
					}
					else
					{
						this._tagID = default(long);
					}
					this.SendPropertyChanged("tagTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.downloadTbl")]
	public partial class downloadTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _userID;
		
		private System.Nullable<long> _mUserID;
		
		private string _title;
		
		private bool _isPublished;
		
		private int _viewCount;
		
		private System.DateTime _publishDate;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private EntitySet<downloadCommentTbl> _downloadCommentTbls;
		
		private EntitySet<downloadContentTbl> _downloadContentTbls;
		
		private EntitySet<downloadLikeTbl> _downloadLikeTbls;
		
		private EntitySet<downloadSubGroupTbl> _downloadSubGroupTbls;
		
		private EntitySet<downloadTagTbl> _downloadTagTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    partial void OnmUserIDChanging(System.Nullable<long> value);
    partial void OnmUserIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnisPublishedChanging(bool value);
    partial void OnisPublishedChanged();
    partial void OnviewCountChanging(int value);
    partial void OnviewCountChanged();
    partial void OnpublishDateChanging(System.DateTime value);
    partial void OnpublishDateChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public downloadTbl()
		{
			this._downloadCommentTbls = new EntitySet<downloadCommentTbl>(new Action<downloadCommentTbl>(this.attach_downloadCommentTbls), new Action<downloadCommentTbl>(this.detach_downloadCommentTbls));
			this._downloadContentTbls = new EntitySet<downloadContentTbl>(new Action<downloadContentTbl>(this.attach_downloadContentTbls), new Action<downloadContentTbl>(this.detach_downloadContentTbls));
			this._downloadLikeTbls = new EntitySet<downloadLikeTbl>(new Action<downloadLikeTbl>(this.attach_downloadLikeTbls), new Action<downloadLikeTbl>(this.detach_downloadLikeTbls));
			this._downloadSubGroupTbls = new EntitySet<downloadSubGroupTbl>(new Action<downloadSubGroupTbl>(this.attach_downloadSubGroupTbls), new Action<downloadSubGroupTbl>(this.detach_downloadSubGroupTbls));
			this._downloadTagTbls = new EntitySet<downloadTagTbl>(new Action<downloadTagTbl>(this.attach_downloadTagTbls), new Action<downloadTagTbl>(this.detach_downloadTagTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt")]
		public System.Nullable<long> mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPublished", DbType="Bit NOT NULL")]
		public bool isPublished
		{
			get
			{
				return this._isPublished;
			}
			set
			{
				if ((this._isPublished != value))
				{
					this.OnisPublishedChanging(value);
					this.SendPropertyChanging();
					this._isPublished = value;
					this.SendPropertyChanged("isPublished");
					this.OnisPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_viewCount", DbType="Int NOT NULL")]
		public int viewCount
		{
			get
			{
				return this._viewCount;
			}
			set
			{
				if ((this._viewCount != value))
				{
					this.OnviewCountChanging(value);
					this.SendPropertyChanging();
					this._viewCount = value;
					this.SendPropertyChanged("viewCount");
					this.OnviewCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publishDate", DbType="DateTime NOT NULL")]
		public System.DateTime publishDate
		{
			get
			{
				return this._publishDate;
			}
			set
			{
				if ((this._publishDate != value))
				{
					this.OnpublishDateChanging(value);
					this.SendPropertyChanging();
					this._publishDate = value;
					this.SendPropertyChanged("publishDate");
					this.OnpublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="downloadTbl_downloadCommentTbl", Storage="_downloadCommentTbls", ThisKey="ID", OtherKey="downloadID")]
		public EntitySet<downloadCommentTbl> downloadCommentTbls
		{
			get
			{
				return this._downloadCommentTbls;
			}
			set
			{
				this._downloadCommentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="downloadTbl_downloadContentTbl", Storage="_downloadContentTbls", ThisKey="ID", OtherKey="downloadID")]
		public EntitySet<downloadContentTbl> downloadContentTbls
		{
			get
			{
				return this._downloadContentTbls;
			}
			set
			{
				this._downloadContentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="downloadTbl_downloadLikeTbl", Storage="_downloadLikeTbls", ThisKey="ID", OtherKey="downloadID")]
		public EntitySet<downloadLikeTbl> downloadLikeTbls
		{
			get
			{
				return this._downloadLikeTbls;
			}
			set
			{
				this._downloadLikeTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="downloadTbl_downloadSubGroupTbl", Storage="_downloadSubGroupTbls", ThisKey="ID", OtherKey="downloadID")]
		public EntitySet<downloadSubGroupTbl> downloadSubGroupTbls
		{
			get
			{
				return this._downloadSubGroupTbls;
			}
			set
			{
				this._downloadSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="downloadTbl_downloadTagTbl", Storage="_downloadTagTbls", ThisKey="ID", OtherKey="downloadID")]
		public EntitySet<downloadTagTbl> downloadTagTbls
		{
			get
			{
				return this._downloadTagTbls;
			}
			set
			{
				this._downloadTagTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_downloadCommentTbls(downloadCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.downloadTbl = this;
		}
		
		private void detach_downloadCommentTbls(downloadCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.downloadTbl = null;
		}
		
		private void attach_downloadContentTbls(downloadContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.downloadTbl = this;
		}
		
		private void detach_downloadContentTbls(downloadContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.downloadTbl = null;
		}
		
		private void attach_downloadLikeTbls(downloadLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.downloadTbl = this;
		}
		
		private void detach_downloadLikeTbls(downloadLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.downloadTbl = null;
		}
		
		private void attach_downloadSubGroupTbls(downloadSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.downloadTbl = this;
		}
		
		private void detach_downloadSubGroupTbls(downloadSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.downloadTbl = null;
		}
		
		private void attach_downloadTagTbls(downloadTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.downloadTbl = this;
		}
		
		private void detach_downloadTagTbls(downloadTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.downloadTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.eventCommentTbl")]
	public partial class eventCommentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _eventID;
		
		private long _mUserID;
		
		private string _fullName;
		
		private string _mobile;
		
		private string _email;
		
		private string _text;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private System.Nullable<long> _userID;
		
		private EntityRef<eventsTbl> _eventsTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OneventIDChanging(long value);
    partial void OneventIDChanged();
    partial void OnmUserIDChanging(long value);
    partial void OnmUserIDChanged();
    partial void OnfullNameChanging(string value);
    partial void OnfullNameChanged();
    partial void OnmobileChanging(string value);
    partial void OnmobileChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    #endregion
		
		public eventCommentTbl()
		{
			this._eventsTbl = default(EntityRef<eventsTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventID", DbType="BigInt NOT NULL")]
		public long eventID
		{
			get
			{
				return this._eventID;
			}
			set
			{
				if ((this._eventID != value))
				{
					if (this._eventsTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneventIDChanging(value);
					this.SendPropertyChanging();
					this._eventID = value;
					this.SendPropertyChanged("eventID");
					this.OneventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt NOT NULL")]
		public long mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string fullName
		{
			get
			{
				return this._fullName;
			}
			set
			{
				if ((this._fullName != value))
				{
					this.OnfullNameChanging(value);
					this.SendPropertyChanging();
					this._fullName = value;
					this.SendPropertyChanged("fullName");
					this.OnfullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobile", DbType="NVarChar(12)")]
		public string mobile
		{
			get
			{
				return this._mobile;
			}
			set
			{
				if ((this._mobile != value))
				{
					this.OnmobileChanging(value);
					this.SendPropertyChanging();
					this._mobile = value;
					this.SendPropertyChanged("mobile");
					this.OnmobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(150)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eventsTbl_eventCommentTbl", Storage="_eventsTbl", ThisKey="eventID", OtherKey="ID", IsForeignKey=true)]
		public eventsTbl eventsTbl
		{
			get
			{
				return this._eventsTbl.Entity;
			}
			set
			{
				eventsTbl previousValue = this._eventsTbl.Entity;
				if (((previousValue != value) 
							|| (this._eventsTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._eventsTbl.Entity = null;
						previousValue.eventCommentTbls.Remove(this);
					}
					this._eventsTbl.Entity = value;
					if ((value != null))
					{
						value.eventCommentTbls.Add(this);
						this._eventID = value.ID;
					}
					else
					{
						this._eventID = default(long);
					}
					this.SendPropertyChanged("eventsTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.eventsContentTbl")]
	public partial class eventsContentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _eventsID;
		
		private int _contentType;
		
		private string _value;
		
		private long _pri;
		
		private System.DateTime _regDate;
		
		private EntityRef<eventsTbl> _eventsTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OneventsIDChanging(long value);
    partial void OneventsIDChanged();
    partial void OncontentTypeChanging(int value);
    partial void OncontentTypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnpriChanging(long value);
    partial void OnpriChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public eventsContentTbl()
		{
			this._eventsTbl = default(EntityRef<eventsTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventsID", DbType="BigInt NOT NULL")]
		public long eventsID
		{
			get
			{
				return this._eventsID;
			}
			set
			{
				if ((this._eventsID != value))
				{
					if (this._eventsTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneventsIDChanging(value);
					this.SendPropertyChanging();
					this._eventsID = value;
					this.SendPropertyChanged("eventsID");
					this.OneventsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentType", DbType="Int NOT NULL")]
		public int contentType
		{
			get
			{
				return this._contentType;
			}
			set
			{
				if ((this._contentType != value))
				{
					this.OncontentTypeChanging(value);
					this.SendPropertyChanging();
					this._contentType = value;
					this.SendPropertyChanged("contentType");
					this.OncontentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pri", DbType="BigInt NOT NULL")]
		public long pri
		{
			get
			{
				return this._pri;
			}
			set
			{
				if ((this._pri != value))
				{
					this.OnpriChanging(value);
					this.SendPropertyChanging();
					this._pri = value;
					this.SendPropertyChanged("pri");
					this.OnpriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eventsTbl_eventsContentTbl", Storage="_eventsTbl", ThisKey="eventsID", OtherKey="ID", IsForeignKey=true)]
		public eventsTbl eventsTbl
		{
			get
			{
				return this._eventsTbl.Entity;
			}
			set
			{
				eventsTbl previousValue = this._eventsTbl.Entity;
				if (((previousValue != value) 
							|| (this._eventsTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._eventsTbl.Entity = null;
						previousValue.eventsContentTbls.Remove(this);
					}
					this._eventsTbl.Entity = value;
					if ((value != null))
					{
						value.eventsContentTbls.Add(this);
						this._eventsID = value.ID;
					}
					else
					{
						this._eventsID = default(long);
					}
					this.SendPropertyChanged("eventsTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.eventsLikeTbl")]
	public partial class eventsLikeTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _eventsID;
		
		private long _userID;
		
		private bool _isLike;
		
		private System.DateTime _regDate;
		
		private EntityRef<eventsTbl> _eventsTbl;
		
		private EntityRef<mUserTbl> _mUserTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OneventsIDChanging(long value);
    partial void OneventsIDChanged();
    partial void OnuserIDChanging(long value);
    partial void OnuserIDChanged();
    partial void OnisLikeChanging(bool value);
    partial void OnisLikeChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public eventsLikeTbl()
		{
			this._eventsTbl = default(EntityRef<eventsTbl>);
			this._mUserTbl = default(EntityRef<mUserTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventsID", DbType="BigInt NOT NULL")]
		public long eventsID
		{
			get
			{
				return this._eventsID;
			}
			set
			{
				if ((this._eventsID != value))
				{
					if (this._eventsTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneventsIDChanging(value);
					this.SendPropertyChanging();
					this._eventsID = value;
					this.SendPropertyChanged("eventsID");
					this.OneventsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt NOT NULL")]
		public long userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._mUserTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isLike", DbType="Bit NOT NULL")]
		public bool isLike
		{
			get
			{
				return this._isLike;
			}
			set
			{
				if ((this._isLike != value))
				{
					this.OnisLikeChanging(value);
					this.SendPropertyChanging();
					this._isLike = value;
					this.SendPropertyChanged("isLike");
					this.OnisLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eventsTbl_eventsLikeTbl", Storage="_eventsTbl", ThisKey="eventsID", OtherKey="ID", IsForeignKey=true)]
		public eventsTbl eventsTbl
		{
			get
			{
				return this._eventsTbl.Entity;
			}
			set
			{
				eventsTbl previousValue = this._eventsTbl.Entity;
				if (((previousValue != value) 
							|| (this._eventsTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._eventsTbl.Entity = null;
						previousValue.eventsLikeTbls.Remove(this);
					}
					this._eventsTbl.Entity = value;
					if ((value != null))
					{
						value.eventsLikeTbls.Add(this);
						this._eventsID = value.ID;
					}
					else
					{
						this._eventsID = default(long);
					}
					this.SendPropertyChanged("eventsTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_eventsLikeTbl", Storage="_mUserTbl", ThisKey="userID", OtherKey="ID", IsForeignKey=true)]
		public mUserTbl mUserTbl
		{
			get
			{
				return this._mUserTbl.Entity;
			}
			set
			{
				mUserTbl previousValue = this._mUserTbl.Entity;
				if (((previousValue != value) 
							|| (this._mUserTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mUserTbl.Entity = null;
						previousValue.eventsLikeTbls.Remove(this);
					}
					this._mUserTbl.Entity = value;
					if ((value != null))
					{
						value.eventsLikeTbls.Add(this);
						this._userID = value.ID;
					}
					else
					{
						this._userID = default(long);
					}
					this.SendPropertyChanged("mUserTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.eventsSubGroupTbl")]
	public partial class eventsSubGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _eventsID;
		
		private long _subGroupID;
		
		private EntityRef<eventsTbl> _eventsTbl;
		
		private EntityRef<SubGroupTbl> _SubGroupTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OneventsIDChanging(long value);
    partial void OneventsIDChanged();
    partial void OnsubGroupIDChanging(long value);
    partial void OnsubGroupIDChanged();
    #endregion
		
		public eventsSubGroupTbl()
		{
			this._eventsTbl = default(EntityRef<eventsTbl>);
			this._SubGroupTbl = default(EntityRef<SubGroupTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventsID", DbType="BigInt NOT NULL")]
		public long eventsID
		{
			get
			{
				return this._eventsID;
			}
			set
			{
				if ((this._eventsID != value))
				{
					if (this._eventsTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneventsIDChanging(value);
					this.SendPropertyChanging();
					this._eventsID = value;
					this.SendPropertyChanged("eventsID");
					this.OneventsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subGroupID", DbType="BigInt NOT NULL")]
		public long subGroupID
		{
			get
			{
				return this._subGroupID;
			}
			set
			{
				if ((this._subGroupID != value))
				{
					if (this._SubGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubGroupIDChanging(value);
					this.SendPropertyChanging();
					this._subGroupID = value;
					this.SendPropertyChanged("subGroupID");
					this.OnsubGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eventsTbl_eventsSubGroupTbl", Storage="_eventsTbl", ThisKey="eventsID", OtherKey="ID", IsForeignKey=true)]
		public eventsTbl eventsTbl
		{
			get
			{
				return this._eventsTbl.Entity;
			}
			set
			{
				eventsTbl previousValue = this._eventsTbl.Entity;
				if (((previousValue != value) 
							|| (this._eventsTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._eventsTbl.Entity = null;
						previousValue.eventsSubGroupTbls.Remove(this);
					}
					this._eventsTbl.Entity = value;
					if ((value != null))
					{
						value.eventsSubGroupTbls.Add(this);
						this._eventsID = value.ID;
					}
					else
					{
						this._eventsID = default(long);
					}
					this.SendPropertyChanged("eventsTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_eventsSubGroupTbl", Storage="_SubGroupTbl", ThisKey="subGroupID", OtherKey="ID", IsForeignKey=true)]
		public SubGroupTbl SubGroupTbl
		{
			get
			{
				return this._SubGroupTbl.Entity;
			}
			set
			{
				SubGroupTbl previousValue = this._SubGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._SubGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubGroupTbl.Entity = null;
						previousValue.eventsSubGroupTbls.Remove(this);
					}
					this._SubGroupTbl.Entity = value;
					if ((value != null))
					{
						value.eventsSubGroupTbls.Add(this);
						this._subGroupID = value.ID;
					}
					else
					{
						this._subGroupID = default(long);
					}
					this.SendPropertyChanged("SubGroupTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.eventsTbl")]
	public partial class eventsTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _userID;
		
		private System.Nullable<long> _mUserID;
		
		private string _title;
		
		private bool _isPublished;
		
		private int _viewCount;
		
		private System.DateTime _fromDate;
		
		private System.DateTime _toDate;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private EntitySet<eventCommentTbl> _eventCommentTbls;
		
		private EntitySet<eventsContentTbl> _eventsContentTbls;
		
		private EntitySet<eventsLikeTbl> _eventsLikeTbls;
		
		private EntitySet<eventsSubGroupTbl> _eventsSubGroupTbls;
		
		private EntitySet<eventTagTbl> _eventTagTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    partial void OnmUserIDChanging(System.Nullable<long> value);
    partial void OnmUserIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnisPublishedChanging(bool value);
    partial void OnisPublishedChanged();
    partial void OnviewCountChanging(int value);
    partial void OnviewCountChanged();
    partial void OnfromDateChanging(System.DateTime value);
    partial void OnfromDateChanged();
    partial void OntoDateChanging(System.DateTime value);
    partial void OntoDateChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public eventsTbl()
		{
			this._eventCommentTbls = new EntitySet<eventCommentTbl>(new Action<eventCommentTbl>(this.attach_eventCommentTbls), new Action<eventCommentTbl>(this.detach_eventCommentTbls));
			this._eventsContentTbls = new EntitySet<eventsContentTbl>(new Action<eventsContentTbl>(this.attach_eventsContentTbls), new Action<eventsContentTbl>(this.detach_eventsContentTbls));
			this._eventsLikeTbls = new EntitySet<eventsLikeTbl>(new Action<eventsLikeTbl>(this.attach_eventsLikeTbls), new Action<eventsLikeTbl>(this.detach_eventsLikeTbls));
			this._eventsSubGroupTbls = new EntitySet<eventsSubGroupTbl>(new Action<eventsSubGroupTbl>(this.attach_eventsSubGroupTbls), new Action<eventsSubGroupTbl>(this.detach_eventsSubGroupTbls));
			this._eventTagTbls = new EntitySet<eventTagTbl>(new Action<eventTagTbl>(this.attach_eventTagTbls), new Action<eventTagTbl>(this.detach_eventTagTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt")]
		public System.Nullable<long> mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPublished", DbType="Bit NOT NULL")]
		public bool isPublished
		{
			get
			{
				return this._isPublished;
			}
			set
			{
				if ((this._isPublished != value))
				{
					this.OnisPublishedChanging(value);
					this.SendPropertyChanging();
					this._isPublished = value;
					this.SendPropertyChanged("isPublished");
					this.OnisPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_viewCount", DbType="Int NOT NULL")]
		public int viewCount
		{
			get
			{
				return this._viewCount;
			}
			set
			{
				if ((this._viewCount != value))
				{
					this.OnviewCountChanging(value);
					this.SendPropertyChanging();
					this._viewCount = value;
					this.SendPropertyChanged("viewCount");
					this.OnviewCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fromDate", DbType="DateTime NOT NULL")]
		public System.DateTime fromDate
		{
			get
			{
				return this._fromDate;
			}
			set
			{
				if ((this._fromDate != value))
				{
					this.OnfromDateChanging(value);
					this.SendPropertyChanging();
					this._fromDate = value;
					this.SendPropertyChanged("fromDate");
					this.OnfromDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toDate", DbType="DateTime NOT NULL")]
		public System.DateTime toDate
		{
			get
			{
				return this._toDate;
			}
			set
			{
				if ((this._toDate != value))
				{
					this.OntoDateChanging(value);
					this.SendPropertyChanging();
					this._toDate = value;
					this.SendPropertyChanged("toDate");
					this.OntoDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eventsTbl_eventCommentTbl", Storage="_eventCommentTbls", ThisKey="ID", OtherKey="eventID")]
		public EntitySet<eventCommentTbl> eventCommentTbls
		{
			get
			{
				return this._eventCommentTbls;
			}
			set
			{
				this._eventCommentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eventsTbl_eventsContentTbl", Storage="_eventsContentTbls", ThisKey="ID", OtherKey="eventsID")]
		public EntitySet<eventsContentTbl> eventsContentTbls
		{
			get
			{
				return this._eventsContentTbls;
			}
			set
			{
				this._eventsContentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eventsTbl_eventsLikeTbl", Storage="_eventsLikeTbls", ThisKey="ID", OtherKey="eventsID")]
		public EntitySet<eventsLikeTbl> eventsLikeTbls
		{
			get
			{
				return this._eventsLikeTbls;
			}
			set
			{
				this._eventsLikeTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eventsTbl_eventsSubGroupTbl", Storage="_eventsSubGroupTbls", ThisKey="ID", OtherKey="eventsID")]
		public EntitySet<eventsSubGroupTbl> eventsSubGroupTbls
		{
			get
			{
				return this._eventsSubGroupTbls;
			}
			set
			{
				this._eventsSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eventsTbl_eventTagTbl", Storage="_eventTagTbls", ThisKey="ID", OtherKey="eventID")]
		public EntitySet<eventTagTbl> eventTagTbls
		{
			get
			{
				return this._eventTagTbls;
			}
			set
			{
				this._eventTagTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_eventCommentTbls(eventCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.eventsTbl = this;
		}
		
		private void detach_eventCommentTbls(eventCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.eventsTbl = null;
		}
		
		private void attach_eventsContentTbls(eventsContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.eventsTbl = this;
		}
		
		private void detach_eventsContentTbls(eventsContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.eventsTbl = null;
		}
		
		private void attach_eventsLikeTbls(eventsLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.eventsTbl = this;
		}
		
		private void detach_eventsLikeTbls(eventsLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.eventsTbl = null;
		}
		
		private void attach_eventsSubGroupTbls(eventsSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.eventsTbl = this;
		}
		
		private void detach_eventsSubGroupTbls(eventsSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.eventsTbl = null;
		}
		
		private void attach_eventTagTbls(eventTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.eventsTbl = this;
		}
		
		private void detach_eventTagTbls(eventTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.eventsTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.eventTagTbl")]
	public partial class eventTagTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _eventID;
		
		private long _tagID;
		
		private EntityRef<eventsTbl> _eventsTbl;
		
		private EntityRef<tagTbl> _tagTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OneventIDChanging(long value);
    partial void OneventIDChanged();
    partial void OntagIDChanging(long value);
    partial void OntagIDChanged();
    #endregion
		
		public eventTagTbl()
		{
			this._eventsTbl = default(EntityRef<eventsTbl>);
			this._tagTbl = default(EntityRef<tagTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventID", DbType="BigInt NOT NULL")]
		public long eventID
		{
			get
			{
				return this._eventID;
			}
			set
			{
				if ((this._eventID != value))
				{
					if (this._eventsTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneventIDChanging(value);
					this.SendPropertyChanging();
					this._eventID = value;
					this.SendPropertyChanged("eventID");
					this.OneventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tagID", DbType="BigInt NOT NULL")]
		public long tagID
		{
			get
			{
				return this._tagID;
			}
			set
			{
				if ((this._tagID != value))
				{
					if (this._tagTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntagIDChanging(value);
					this.SendPropertyChanging();
					this._tagID = value;
					this.SendPropertyChanged("tagID");
					this.OntagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eventsTbl_eventTagTbl", Storage="_eventsTbl", ThisKey="eventID", OtherKey="ID", IsForeignKey=true)]
		public eventsTbl eventsTbl
		{
			get
			{
				return this._eventsTbl.Entity;
			}
			set
			{
				eventsTbl previousValue = this._eventsTbl.Entity;
				if (((previousValue != value) 
							|| (this._eventsTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._eventsTbl.Entity = null;
						previousValue.eventTagTbls.Remove(this);
					}
					this._eventsTbl.Entity = value;
					if ((value != null))
					{
						value.eventTagTbls.Add(this);
						this._eventID = value.ID;
					}
					else
					{
						this._eventID = default(long);
					}
					this.SendPropertyChanged("eventsTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_eventTagTbl", Storage="_tagTbl", ThisKey="tagID", OtherKey="ID", IsForeignKey=true)]
		public tagTbl tagTbl
		{
			get
			{
				return this._tagTbl.Entity;
			}
			set
			{
				tagTbl previousValue = this._tagTbl.Entity;
				if (((previousValue != value) 
							|| (this._tagTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tagTbl.Entity = null;
						previousValue.eventTagTbls.Remove(this);
					}
					this._tagTbl.Entity = value;
					if ((value != null))
					{
						value.eventTagTbls.Add(this);
						this._tagID = value.ID;
					}
					else
					{
						this._tagID = default(long);
					}
					this.SendPropertyChanged("tagTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupTbl")]
	public partial class GroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _title;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private EntitySet<SubGroupTbl> _SubGroupTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public GroupTbl()
		{
			this._SubGroupTbls = new EntitySet<SubGroupTbl>(new Action<SubGroupTbl>(this.attach_SubGroupTbls), new Action<SubGroupTbl>(this.detach_SubGroupTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(350) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupTbl_SubGroupTbl", Storage="_SubGroupTbls", ThisKey="ID", OtherKey="groupID")]
		public EntitySet<SubGroupTbl> SubGroupTbls
		{
			get
			{
				return this._SubGroupTbls;
			}
			set
			{
				this._SubGroupTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubGroupTbls(SubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.GroupTbl = this;
		}
		
		private void detach_SubGroupTbls(SubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.GroupTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.icanCommentTbl")]
	public partial class icanCommentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _icanID;
		
		private System.Nullable<long> _mUserID;
		
		private string _fullName;
		
		private string _mobile;
		
		private string _email;
		
		private string _text;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private System.Nullable<long> _userID;
		
		private EntityRef<icanTbl> _icanTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnicanIDChanging(long value);
    partial void OnicanIDChanged();
    partial void OnmUserIDChanging(System.Nullable<long> value);
    partial void OnmUserIDChanged();
    partial void OnfullNameChanging(string value);
    partial void OnfullNameChanged();
    partial void OnmobileChanging(string value);
    partial void OnmobileChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    #endregion
		
		public icanCommentTbl()
		{
			this._icanTbl = default(EntityRef<icanTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_icanID", DbType="BigInt NOT NULL")]
		public long icanID
		{
			get
			{
				return this._icanID;
			}
			set
			{
				if ((this._icanID != value))
				{
					if (this._icanTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnicanIDChanging(value);
					this.SendPropertyChanging();
					this._icanID = value;
					this.SendPropertyChanged("icanID");
					this.OnicanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt")]
		public System.Nullable<long> mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string fullName
		{
			get
			{
				return this._fullName;
			}
			set
			{
				if ((this._fullName != value))
				{
					this.OnfullNameChanging(value);
					this.SendPropertyChanging();
					this._fullName = value;
					this.SendPropertyChanged("fullName");
					this.OnfullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobile", DbType="NVarChar(12)")]
		public string mobile
		{
			get
			{
				return this._mobile;
			}
			set
			{
				if ((this._mobile != value))
				{
					this.OnmobileChanging(value);
					this.SendPropertyChanging();
					this._mobile = value;
					this.SendPropertyChanged("mobile");
					this.OnmobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(150)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="icanTbl_icanCommentTbl", Storage="_icanTbl", ThisKey="icanID", OtherKey="ID", IsForeignKey=true)]
		public icanTbl icanTbl
		{
			get
			{
				return this._icanTbl.Entity;
			}
			set
			{
				icanTbl previousValue = this._icanTbl.Entity;
				if (((previousValue != value) 
							|| (this._icanTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._icanTbl.Entity = null;
						previousValue.icanCommentTbls.Remove(this);
					}
					this._icanTbl.Entity = value;
					if ((value != null))
					{
						value.icanCommentTbls.Add(this);
						this._icanID = value.ID;
					}
					else
					{
						this._icanID = default(long);
					}
					this.SendPropertyChanged("icanTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.icanContentTbl")]
	public partial class icanContentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _icanID;
		
		private int _contentType;
		
		private string _value;
		
		private long _pri;
		
		private System.DateTime _regDate;
		
		private System.Nullable<long> _downloadCount;
		
		private string _fileType;
		
		private System.Nullable<int> _fileSize;
		
		private EntityRef<icanTbl> _icanTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnicanIDChanging(long value);
    partial void OnicanIDChanged();
    partial void OncontentTypeChanging(int value);
    partial void OncontentTypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnpriChanging(long value);
    partial void OnpriChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OndownloadCountChanging(System.Nullable<long> value);
    partial void OndownloadCountChanged();
    partial void OnfileTypeChanging(string value);
    partial void OnfileTypeChanged();
    partial void OnfileSizeChanging(System.Nullable<int> value);
    partial void OnfileSizeChanged();
    #endregion
		
		public icanContentTbl()
		{
			this._icanTbl = default(EntityRef<icanTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_icanID", DbType="BigInt NOT NULL")]
		public long icanID
		{
			get
			{
				return this._icanID;
			}
			set
			{
				if ((this._icanID != value))
				{
					if (this._icanTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnicanIDChanging(value);
					this.SendPropertyChanging();
					this._icanID = value;
					this.SendPropertyChanged("icanID");
					this.OnicanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentType", DbType="Int NOT NULL")]
		public int contentType
		{
			get
			{
				return this._contentType;
			}
			set
			{
				if ((this._contentType != value))
				{
					this.OncontentTypeChanging(value);
					this.SendPropertyChanging();
					this._contentType = value;
					this.SendPropertyChanged("contentType");
					this.OncontentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pri", DbType="BigInt NOT NULL")]
		public long pri
		{
			get
			{
				return this._pri;
			}
			set
			{
				if ((this._pri != value))
				{
					this.OnpriChanging(value);
					this.SendPropertyChanging();
					this._pri = value;
					this.SendPropertyChanged("pri");
					this.OnpriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_downloadCount", DbType="BigInt")]
		public System.Nullable<long> downloadCount
		{
			get
			{
				return this._downloadCount;
			}
			set
			{
				if ((this._downloadCount != value))
				{
					this.OndownloadCountChanging(value);
					this.SendPropertyChanging();
					this._downloadCount = value;
					this.SendPropertyChanged("downloadCount");
					this.OndownloadCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileType", DbType="NVarChar(50)")]
		public string fileType
		{
			get
			{
				return this._fileType;
			}
			set
			{
				if ((this._fileType != value))
				{
					this.OnfileTypeChanging(value);
					this.SendPropertyChanging();
					this._fileType = value;
					this.SendPropertyChanged("fileType");
					this.OnfileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileSize", DbType="Int")]
		public System.Nullable<int> fileSize
		{
			get
			{
				return this._fileSize;
			}
			set
			{
				if ((this._fileSize != value))
				{
					this.OnfileSizeChanging(value);
					this.SendPropertyChanging();
					this._fileSize = value;
					this.SendPropertyChanged("fileSize");
					this.OnfileSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="icanTbl_icanContentTbl", Storage="_icanTbl", ThisKey="icanID", OtherKey="ID", IsForeignKey=true)]
		public icanTbl icanTbl
		{
			get
			{
				return this._icanTbl.Entity;
			}
			set
			{
				icanTbl previousValue = this._icanTbl.Entity;
				if (((previousValue != value) 
							|| (this._icanTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._icanTbl.Entity = null;
						previousValue.icanContentTbls.Remove(this);
					}
					this._icanTbl.Entity = value;
					if ((value != null))
					{
						value.icanContentTbls.Add(this);
						this._icanID = value.ID;
					}
					else
					{
						this._icanID = default(long);
					}
					this.SendPropertyChanged("icanTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.icanTbl")]
	public partial class icanTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _creatorID;
		
		private string _title;
		
		private bool _isPublished;
		
		private bool _haveAttachment;
		
		private int _viewCount;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private System.Nullable<long> _userID;
		
		private EntitySet<icanCommentTbl> _icanCommentTbls;
		
		private EntitySet<icanContentTbl> _icanContentTbls;
		
		private EntityRef<mUserTbl> _mUserTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OncreatorIDChanging(long value);
    partial void OncreatorIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnisPublishedChanging(bool value);
    partial void OnisPublishedChanged();
    partial void OnhaveAttachmentChanging(bool value);
    partial void OnhaveAttachmentChanged();
    partial void OnviewCountChanging(int value);
    partial void OnviewCountChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    #endregion
		
		public icanTbl()
		{
			this._icanCommentTbls = new EntitySet<icanCommentTbl>(new Action<icanCommentTbl>(this.attach_icanCommentTbls), new Action<icanCommentTbl>(this.detach_icanCommentTbls));
			this._icanContentTbls = new EntitySet<icanContentTbl>(new Action<icanContentTbl>(this.attach_icanContentTbls), new Action<icanContentTbl>(this.detach_icanContentTbls));
			this._mUserTbl = default(EntityRef<mUserTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creatorID", DbType="BigInt NOT NULL")]
		public long creatorID
		{
			get
			{
				return this._creatorID;
			}
			set
			{
				if ((this._creatorID != value))
				{
					if (this._mUserTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncreatorIDChanging(value);
					this.SendPropertyChanging();
					this._creatorID = value;
					this.SendPropertyChanged("creatorID");
					this.OncreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPublished", DbType="Bit NOT NULL")]
		public bool isPublished
		{
			get
			{
				return this._isPublished;
			}
			set
			{
				if ((this._isPublished != value))
				{
					this.OnisPublishedChanging(value);
					this.SendPropertyChanging();
					this._isPublished = value;
					this.SendPropertyChanged("isPublished");
					this.OnisPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_haveAttachment", DbType="Bit NOT NULL")]
		public bool haveAttachment
		{
			get
			{
				return this._haveAttachment;
			}
			set
			{
				if ((this._haveAttachment != value))
				{
					this.OnhaveAttachmentChanging(value);
					this.SendPropertyChanging();
					this._haveAttachment = value;
					this.SendPropertyChanged("haveAttachment");
					this.OnhaveAttachmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_viewCount", DbType="Int NOT NULL")]
		public int viewCount
		{
			get
			{
				return this._viewCount;
			}
			set
			{
				if ((this._viewCount != value))
				{
					this.OnviewCountChanging(value);
					this.SendPropertyChanging();
					this._viewCount = value;
					this.SendPropertyChanged("viewCount");
					this.OnviewCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="icanTbl_icanCommentTbl", Storage="_icanCommentTbls", ThisKey="ID", OtherKey="icanID")]
		public EntitySet<icanCommentTbl> icanCommentTbls
		{
			get
			{
				return this._icanCommentTbls;
			}
			set
			{
				this._icanCommentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="icanTbl_icanContentTbl", Storage="_icanContentTbls", ThisKey="ID", OtherKey="icanID")]
		public EntitySet<icanContentTbl> icanContentTbls
		{
			get
			{
				return this._icanContentTbls;
			}
			set
			{
				this._icanContentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_icanTbl", Storage="_mUserTbl", ThisKey="creatorID", OtherKey="ID", IsForeignKey=true)]
		public mUserTbl mUserTbl
		{
			get
			{
				return this._mUserTbl.Entity;
			}
			set
			{
				mUserTbl previousValue = this._mUserTbl.Entity;
				if (((previousValue != value) 
							|| (this._mUserTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mUserTbl.Entity = null;
						previousValue.icanTbls.Remove(this);
					}
					this._mUserTbl.Entity = value;
					if ((value != null))
					{
						value.icanTbls.Add(this);
						this._creatorID = value.ID;
					}
					else
					{
						this._creatorID = default(long);
					}
					this.SendPropertyChanged("mUserTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_icanCommentTbls(icanCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.icanTbl = this;
		}
		
		private void detach_icanCommentTbls(icanCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.icanTbl = null;
		}
		
		private void attach_icanContentTbls(icanContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.icanTbl = this;
		}
		
		private void detach_icanContentTbls(icanContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.icanTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ideasContentTbl")]
	public partial class ideasContentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ideasID;
		
		private int _contentType;
		
		private string _value;
		
		private long _pri;
		
		private System.DateTime _regDate;
		
		private EntityRef<ideasTbl> _ideasTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnideasIDChanging(long value);
    partial void OnideasIDChanged();
    partial void OncontentTypeChanging(int value);
    partial void OncontentTypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnpriChanging(long value);
    partial void OnpriChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public ideasContentTbl()
		{
			this._ideasTbl = default(EntityRef<ideasTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ideasID", DbType="BigInt NOT NULL")]
		public long ideasID
		{
			get
			{
				return this._ideasID;
			}
			set
			{
				if ((this._ideasID != value))
				{
					if (this._ideasTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnideasIDChanging(value);
					this.SendPropertyChanging();
					this._ideasID = value;
					this.SendPropertyChanged("ideasID");
					this.OnideasIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentType", DbType="Int NOT NULL")]
		public int contentType
		{
			get
			{
				return this._contentType;
			}
			set
			{
				if ((this._contentType != value))
				{
					this.OncontentTypeChanging(value);
					this.SendPropertyChanging();
					this._contentType = value;
					this.SendPropertyChanged("contentType");
					this.OncontentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pri", DbType="BigInt NOT NULL")]
		public long pri
		{
			get
			{
				return this._pri;
			}
			set
			{
				if ((this._pri != value))
				{
					this.OnpriChanging(value);
					this.SendPropertyChanging();
					this._pri = value;
					this.SendPropertyChanged("pri");
					this.OnpriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ideasTbl_ideasContentTbl", Storage="_ideasTbl", ThisKey="ideasID", OtherKey="ID", IsForeignKey=true)]
		public ideasTbl ideasTbl
		{
			get
			{
				return this._ideasTbl.Entity;
			}
			set
			{
				ideasTbl previousValue = this._ideasTbl.Entity;
				if (((previousValue != value) 
							|| (this._ideasTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ideasTbl.Entity = null;
						previousValue.ideasContentTbls.Remove(this);
					}
					this._ideasTbl.Entity = value;
					if ((value != null))
					{
						value.ideasContentTbls.Add(this);
						this._ideasID = value.ID;
					}
					else
					{
						this._ideasID = default(long);
					}
					this.SendPropertyChanged("ideasTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ideasLikeTbl")]
	public partial class ideasLikeTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ideasID;
		
		private long _userID;
		
		private bool _isLike;
		
		private System.DateTime _regDate;
		
		private EntityRef<ideasTbl> _ideasTbl;
		
		private EntityRef<mUserTbl> _mUserTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnideasIDChanging(long value);
    partial void OnideasIDChanged();
    partial void OnuserIDChanging(long value);
    partial void OnuserIDChanged();
    partial void OnisLikeChanging(bool value);
    partial void OnisLikeChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public ideasLikeTbl()
		{
			this._ideasTbl = default(EntityRef<ideasTbl>);
			this._mUserTbl = default(EntityRef<mUserTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ideasID", DbType="BigInt NOT NULL")]
		public long ideasID
		{
			get
			{
				return this._ideasID;
			}
			set
			{
				if ((this._ideasID != value))
				{
					if (this._ideasTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnideasIDChanging(value);
					this.SendPropertyChanging();
					this._ideasID = value;
					this.SendPropertyChanged("ideasID");
					this.OnideasIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt NOT NULL")]
		public long userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._mUserTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isLike", DbType="Bit NOT NULL")]
		public bool isLike
		{
			get
			{
				return this._isLike;
			}
			set
			{
				if ((this._isLike != value))
				{
					this.OnisLikeChanging(value);
					this.SendPropertyChanging();
					this._isLike = value;
					this.SendPropertyChanged("isLike");
					this.OnisLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ideasTbl_ideasLikeTbl", Storage="_ideasTbl", ThisKey="ideasID", OtherKey="ID", IsForeignKey=true)]
		public ideasTbl ideasTbl
		{
			get
			{
				return this._ideasTbl.Entity;
			}
			set
			{
				ideasTbl previousValue = this._ideasTbl.Entity;
				if (((previousValue != value) 
							|| (this._ideasTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ideasTbl.Entity = null;
						previousValue.ideasLikeTbls.Remove(this);
					}
					this._ideasTbl.Entity = value;
					if ((value != null))
					{
						value.ideasLikeTbls.Add(this);
						this._ideasID = value.ID;
					}
					else
					{
						this._ideasID = default(long);
					}
					this.SendPropertyChanged("ideasTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_ideasLikeTbl", Storage="_mUserTbl", ThisKey="userID", OtherKey="ID", IsForeignKey=true)]
		public mUserTbl mUserTbl
		{
			get
			{
				return this._mUserTbl.Entity;
			}
			set
			{
				mUserTbl previousValue = this._mUserTbl.Entity;
				if (((previousValue != value) 
							|| (this._mUserTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mUserTbl.Entity = null;
						previousValue.ideasLikeTbls.Remove(this);
					}
					this._mUserTbl.Entity = value;
					if ((value != null))
					{
						value.ideasLikeTbls.Add(this);
						this._userID = value.ID;
					}
					else
					{
						this._userID = default(long);
					}
					this.SendPropertyChanged("mUserTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ideasTagTbl")]
	public partial class ideasTagTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _tagID;
		
		private long _ideasID;
		
		private EntityRef<ideasTbl> _ideasTbl;
		
		private EntityRef<tagTbl> _tagTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OntagIDChanging(long value);
    partial void OntagIDChanged();
    partial void OnideasIDChanging(long value);
    partial void OnideasIDChanged();
    #endregion
		
		public ideasTagTbl()
		{
			this._ideasTbl = default(EntityRef<ideasTbl>);
			this._tagTbl = default(EntityRef<tagTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tagID", DbType="BigInt NOT NULL")]
		public long tagID
		{
			get
			{
				return this._tagID;
			}
			set
			{
				if ((this._tagID != value))
				{
					if (this._tagTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntagIDChanging(value);
					this.SendPropertyChanging();
					this._tagID = value;
					this.SendPropertyChanged("tagID");
					this.OntagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ideasID", DbType="BigInt NOT NULL")]
		public long ideasID
		{
			get
			{
				return this._ideasID;
			}
			set
			{
				if ((this._ideasID != value))
				{
					if (this._ideasTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnideasIDChanging(value);
					this.SendPropertyChanging();
					this._ideasID = value;
					this.SendPropertyChanged("ideasID");
					this.OnideasIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ideasTbl_ideasTagTbl", Storage="_ideasTbl", ThisKey="ideasID", OtherKey="ID", IsForeignKey=true)]
		public ideasTbl ideasTbl
		{
			get
			{
				return this._ideasTbl.Entity;
			}
			set
			{
				ideasTbl previousValue = this._ideasTbl.Entity;
				if (((previousValue != value) 
							|| (this._ideasTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ideasTbl.Entity = null;
						previousValue.ideasTagTbls.Remove(this);
					}
					this._ideasTbl.Entity = value;
					if ((value != null))
					{
						value.ideasTagTbls.Add(this);
						this._ideasID = value.ID;
					}
					else
					{
						this._ideasID = default(long);
					}
					this.SendPropertyChanged("ideasTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_ideasTagTbl", Storage="_tagTbl", ThisKey="tagID", OtherKey="ID", IsForeignKey=true)]
		public tagTbl tagTbl
		{
			get
			{
				return this._tagTbl.Entity;
			}
			set
			{
				tagTbl previousValue = this._tagTbl.Entity;
				if (((previousValue != value) 
							|| (this._tagTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tagTbl.Entity = null;
						previousValue.ideasTagTbls.Remove(this);
					}
					this._tagTbl.Entity = value;
					if ((value != null))
					{
						value.ideasTagTbls.Add(this);
						this._tagID = value.ID;
					}
					else
					{
						this._tagID = default(long);
					}
					this.SendPropertyChanged("tagTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ideasTbl")]
	public partial class ideasTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _mUserID;
		
		private long _bestIdeaCompetitionsID;
		
		private string _title;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private System.Nullable<long> _userID;
		
		private EntitySet<ideasContentTbl> _ideasContentTbls;
		
		private EntitySet<ideasLikeTbl> _ideasLikeTbls;
		
		private EntitySet<ideasTagTbl> _ideasTagTbls;
		
		private EntityRef<bestIdeaCompetitionsTbl> _bestIdeaCompetitionsTbl;
		
		private EntityRef<mUserTbl> _mUserTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnmUserIDChanging(long value);
    partial void OnmUserIDChanged();
    partial void OnbestIdeaCompetitionsIDChanging(long value);
    partial void OnbestIdeaCompetitionsIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    #endregion
		
		public ideasTbl()
		{
			this._ideasContentTbls = new EntitySet<ideasContentTbl>(new Action<ideasContentTbl>(this.attach_ideasContentTbls), new Action<ideasContentTbl>(this.detach_ideasContentTbls));
			this._ideasLikeTbls = new EntitySet<ideasLikeTbl>(new Action<ideasLikeTbl>(this.attach_ideasLikeTbls), new Action<ideasLikeTbl>(this.detach_ideasLikeTbls));
			this._ideasTagTbls = new EntitySet<ideasTagTbl>(new Action<ideasTagTbl>(this.attach_ideasTagTbls), new Action<ideasTagTbl>(this.detach_ideasTagTbls));
			this._bestIdeaCompetitionsTbl = default(EntityRef<bestIdeaCompetitionsTbl>);
			this._mUserTbl = default(EntityRef<mUserTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt NOT NULL")]
		public long mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					if (this._mUserTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bestIdeaCompetitionsID", DbType="BigInt NOT NULL")]
		public long bestIdeaCompetitionsID
		{
			get
			{
				return this._bestIdeaCompetitionsID;
			}
			set
			{
				if ((this._bestIdeaCompetitionsID != value))
				{
					if (this._bestIdeaCompetitionsTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbestIdeaCompetitionsIDChanging(value);
					this.SendPropertyChanging();
					this._bestIdeaCompetitionsID = value;
					this.SendPropertyChanged("bestIdeaCompetitionsID");
					this.OnbestIdeaCompetitionsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ideasTbl_ideasContentTbl", Storage="_ideasContentTbls", ThisKey="ID", OtherKey="ideasID")]
		public EntitySet<ideasContentTbl> ideasContentTbls
		{
			get
			{
				return this._ideasContentTbls;
			}
			set
			{
				this._ideasContentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ideasTbl_ideasLikeTbl", Storage="_ideasLikeTbls", ThisKey="ID", OtherKey="ideasID")]
		public EntitySet<ideasLikeTbl> ideasLikeTbls
		{
			get
			{
				return this._ideasLikeTbls;
			}
			set
			{
				this._ideasLikeTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ideasTbl_ideasTagTbl", Storage="_ideasTagTbls", ThisKey="ID", OtherKey="ideasID")]
		public EntitySet<ideasTagTbl> ideasTagTbls
		{
			get
			{
				return this._ideasTagTbls;
			}
			set
			{
				this._ideasTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bestIdeaCompetitionsTbl_ideasTbl", Storage="_bestIdeaCompetitionsTbl", ThisKey="bestIdeaCompetitionsID", OtherKey="ID", IsForeignKey=true)]
		public bestIdeaCompetitionsTbl bestIdeaCompetitionsTbl
		{
			get
			{
				return this._bestIdeaCompetitionsTbl.Entity;
			}
			set
			{
				bestIdeaCompetitionsTbl previousValue = this._bestIdeaCompetitionsTbl.Entity;
				if (((previousValue != value) 
							|| (this._bestIdeaCompetitionsTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._bestIdeaCompetitionsTbl.Entity = null;
						previousValue.ideasTbls.Remove(this);
					}
					this._bestIdeaCompetitionsTbl.Entity = value;
					if ((value != null))
					{
						value.ideasTbls.Add(this);
						this._bestIdeaCompetitionsID = value.ID;
					}
					else
					{
						this._bestIdeaCompetitionsID = default(long);
					}
					this.SendPropertyChanged("bestIdeaCompetitionsTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_ideasTbl", Storage="_mUserTbl", ThisKey="mUserID", OtherKey="ID", IsForeignKey=true)]
		public mUserTbl mUserTbl
		{
			get
			{
				return this._mUserTbl.Entity;
			}
			set
			{
				mUserTbl previousValue = this._mUserTbl.Entity;
				if (((previousValue != value) 
							|| (this._mUserTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mUserTbl.Entity = null;
						previousValue.ideasTbls.Remove(this);
					}
					this._mUserTbl.Entity = value;
					if ((value != null))
					{
						value.ideasTbls.Add(this);
						this._mUserID = value.ID;
					}
					else
					{
						this._mUserID = default(long);
					}
					this.SendPropertyChanged("mUserTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ideasContentTbls(ideasContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.ideasTbl = this;
		}
		
		private void detach_ideasContentTbls(ideasContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.ideasTbl = null;
		}
		
		private void attach_ideasLikeTbls(ideasLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.ideasTbl = this;
		}
		
		private void detach_ideasLikeTbls(ideasLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.ideasTbl = null;
		}
		
		private void attach_ideasTagTbls(ideasTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.ideasTbl = this;
		}
		
		private void detach_ideasTagTbls(ideasTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.ideasTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ioCommentTbl")]
	public partial class ioCommentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ioID;
		
		private System.Nullable<long> _mUserID;
		
		private string _fullName;
		
		private string _mobile;
		
		private string _email;
		
		private string _text;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private System.Nullable<long> _userID;
		
		private EntityRef<ioTbl> _ioTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnioIDChanging(long value);
    partial void OnioIDChanged();
    partial void OnmUserIDChanging(System.Nullable<long> value);
    partial void OnmUserIDChanged();
    partial void OnfullNameChanging(string value);
    partial void OnfullNameChanged();
    partial void OnmobileChanging(string value);
    partial void OnmobileChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    #endregion
		
		public ioCommentTbl()
		{
			this._ioTbl = default(EntityRef<ioTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ioID", DbType="BigInt NOT NULL")]
		public long ioID
		{
			get
			{
				return this._ioID;
			}
			set
			{
				if ((this._ioID != value))
				{
					if (this._ioTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnioIDChanging(value);
					this.SendPropertyChanging();
					this._ioID = value;
					this.SendPropertyChanged("ioID");
					this.OnioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt")]
		public System.Nullable<long> mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string fullName
		{
			get
			{
				return this._fullName;
			}
			set
			{
				if ((this._fullName != value))
				{
					this.OnfullNameChanging(value);
					this.SendPropertyChanging();
					this._fullName = value;
					this.SendPropertyChanged("fullName");
					this.OnfullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobile", DbType="NVarChar(12)")]
		public string mobile
		{
			get
			{
				return this._mobile;
			}
			set
			{
				if ((this._mobile != value))
				{
					this.OnmobileChanging(value);
					this.SendPropertyChanging();
					this._mobile = value;
					this.SendPropertyChanged("mobile");
					this.OnmobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(150)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ioTbl_ioCommentTbl", Storage="_ioTbl", ThisKey="ioID", OtherKey="ID", IsForeignKey=true)]
		public ioTbl ioTbl
		{
			get
			{
				return this._ioTbl.Entity;
			}
			set
			{
				ioTbl previousValue = this._ioTbl.Entity;
				if (((previousValue != value) 
							|| (this._ioTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ioTbl.Entity = null;
						previousValue.ioCommentTbls.Remove(this);
					}
					this._ioTbl.Entity = value;
					if ((value != null))
					{
						value.ioCommentTbls.Add(this);
						this._ioID = value.ID;
					}
					else
					{
						this._ioID = default(long);
					}
					this.SendPropertyChanged("ioTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ioContentTbl")]
	public partial class ioContentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ioID;
		
		private int _contentType;
		
		private string _value;
		
		private long _pri;
		
		private System.DateTime _regDate;
		
		private EntityRef<ioTbl> _ioTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnioIDChanging(long value);
    partial void OnioIDChanged();
    partial void OncontentTypeChanging(int value);
    partial void OncontentTypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnpriChanging(long value);
    partial void OnpriChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public ioContentTbl()
		{
			this._ioTbl = default(EntityRef<ioTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ioID", DbType="BigInt NOT NULL")]
		public long ioID
		{
			get
			{
				return this._ioID;
			}
			set
			{
				if ((this._ioID != value))
				{
					if (this._ioTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnioIDChanging(value);
					this.SendPropertyChanging();
					this._ioID = value;
					this.SendPropertyChanged("ioID");
					this.OnioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentType", DbType="Int NOT NULL")]
		public int contentType
		{
			get
			{
				return this._contentType;
			}
			set
			{
				if ((this._contentType != value))
				{
					this.OncontentTypeChanging(value);
					this.SendPropertyChanging();
					this._contentType = value;
					this.SendPropertyChanged("contentType");
					this.OncontentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pri", DbType="BigInt NOT NULL")]
		public long pri
		{
			get
			{
				return this._pri;
			}
			set
			{
				if ((this._pri != value))
				{
					this.OnpriChanging(value);
					this.SendPropertyChanging();
					this._pri = value;
					this.SendPropertyChanged("pri");
					this.OnpriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ioTbl_ioContentTbl", Storage="_ioTbl", ThisKey="ioID", OtherKey="ID", IsForeignKey=true)]
		public ioTbl ioTbl
		{
			get
			{
				return this._ioTbl.Entity;
			}
			set
			{
				ioTbl previousValue = this._ioTbl.Entity;
				if (((previousValue != value) 
							|| (this._ioTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ioTbl.Entity = null;
						previousValue.ioContentTbls.Remove(this);
					}
					this._ioTbl.Entity = value;
					if ((value != null))
					{
						value.ioContentTbls.Add(this);
						this._ioID = value.ID;
					}
					else
					{
						this._ioID = default(long);
					}
					this.SendPropertyChanged("ioTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ioLikeTbl")]
	public partial class ioLikeTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ioID;
		
		private long _userID;
		
		private bool _isLike;
		
		private System.DateTime _regDate;
		
		private EntityRef<ioTbl> _ioTbl;
		
		private EntityRef<mUserTbl> _mUserTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnioIDChanging(long value);
    partial void OnioIDChanged();
    partial void OnuserIDChanging(long value);
    partial void OnuserIDChanged();
    partial void OnisLikeChanging(bool value);
    partial void OnisLikeChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public ioLikeTbl()
		{
			this._ioTbl = default(EntityRef<ioTbl>);
			this._mUserTbl = default(EntityRef<mUserTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ioID", DbType="BigInt NOT NULL")]
		public long ioID
		{
			get
			{
				return this._ioID;
			}
			set
			{
				if ((this._ioID != value))
				{
					if (this._ioTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnioIDChanging(value);
					this.SendPropertyChanging();
					this._ioID = value;
					this.SendPropertyChanged("ioID");
					this.OnioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt NOT NULL")]
		public long userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._mUserTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isLike", DbType="Bit NOT NULL")]
		public bool isLike
		{
			get
			{
				return this._isLike;
			}
			set
			{
				if ((this._isLike != value))
				{
					this.OnisLikeChanging(value);
					this.SendPropertyChanging();
					this._isLike = value;
					this.SendPropertyChanged("isLike");
					this.OnisLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ioTbl_ioLikeTbl", Storage="_ioTbl", ThisKey="ioID", OtherKey="ID", IsForeignKey=true)]
		public ioTbl ioTbl
		{
			get
			{
				return this._ioTbl.Entity;
			}
			set
			{
				ioTbl previousValue = this._ioTbl.Entity;
				if (((previousValue != value) 
							|| (this._ioTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ioTbl.Entity = null;
						previousValue.ioLikeTbls.Remove(this);
					}
					this._ioTbl.Entity = value;
					if ((value != null))
					{
						value.ioLikeTbls.Add(this);
						this._ioID = value.ID;
					}
					else
					{
						this._ioID = default(long);
					}
					this.SendPropertyChanged("ioTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_ioLikeTbl", Storage="_mUserTbl", ThisKey="userID", OtherKey="ID", IsForeignKey=true)]
		public mUserTbl mUserTbl
		{
			get
			{
				return this._mUserTbl.Entity;
			}
			set
			{
				mUserTbl previousValue = this._mUserTbl.Entity;
				if (((previousValue != value) 
							|| (this._mUserTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mUserTbl.Entity = null;
						previousValue.ioLikeTbls.Remove(this);
					}
					this._mUserTbl.Entity = value;
					if ((value != null))
					{
						value.ioLikeTbls.Add(this);
						this._userID = value.ID;
					}
					else
					{
						this._userID = default(long);
					}
					this.SendPropertyChanged("mUserTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ioSubGroupTbl")]
	public partial class ioSubGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ioID;
		
		private long _subGroupID;
		
		private EntityRef<ioTbl> _ioTbl;
		
		private EntityRef<SubGroupTbl> _SubGroupTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnioIDChanging(long value);
    partial void OnioIDChanged();
    partial void OnsubGroupIDChanging(long value);
    partial void OnsubGroupIDChanged();
    #endregion
		
		public ioSubGroupTbl()
		{
			this._ioTbl = default(EntityRef<ioTbl>);
			this._SubGroupTbl = default(EntityRef<SubGroupTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ioID", DbType="BigInt NOT NULL")]
		public long ioID
		{
			get
			{
				return this._ioID;
			}
			set
			{
				if ((this._ioID != value))
				{
					if (this._ioTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnioIDChanging(value);
					this.SendPropertyChanging();
					this._ioID = value;
					this.SendPropertyChanged("ioID");
					this.OnioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subGroupID", DbType="BigInt NOT NULL")]
		public long subGroupID
		{
			get
			{
				return this._subGroupID;
			}
			set
			{
				if ((this._subGroupID != value))
				{
					if (this._SubGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubGroupIDChanging(value);
					this.SendPropertyChanging();
					this._subGroupID = value;
					this.SendPropertyChanged("subGroupID");
					this.OnsubGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ioTbl_ioSubGroupTbl", Storage="_ioTbl", ThisKey="ioID", OtherKey="ID", IsForeignKey=true)]
		public ioTbl ioTbl
		{
			get
			{
				return this._ioTbl.Entity;
			}
			set
			{
				ioTbl previousValue = this._ioTbl.Entity;
				if (((previousValue != value) 
							|| (this._ioTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ioTbl.Entity = null;
						previousValue.ioSubGroupTbls.Remove(this);
					}
					this._ioTbl.Entity = value;
					if ((value != null))
					{
						value.ioSubGroupTbls.Add(this);
						this._ioID = value.ID;
					}
					else
					{
						this._ioID = default(long);
					}
					this.SendPropertyChanged("ioTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_ioSubGroupTbl", Storage="_SubGroupTbl", ThisKey="subGroupID", OtherKey="ID", IsForeignKey=true)]
		public SubGroupTbl SubGroupTbl
		{
			get
			{
				return this._SubGroupTbl.Entity;
			}
			set
			{
				SubGroupTbl previousValue = this._SubGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._SubGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubGroupTbl.Entity = null;
						previousValue.ioSubGroupTbls.Remove(this);
					}
					this._SubGroupTbl.Entity = value;
					if ((value != null))
					{
						value.ioSubGroupTbls.Add(this);
						this._subGroupID = value.ID;
					}
					else
					{
						this._subGroupID = default(long);
					}
					this.SendPropertyChanged("SubGroupTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ioTagTbl")]
	public partial class ioTagTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _tagID;
		
		private long _ioID;
		
		private EntityRef<ioTbl> _ioTbl;
		
		private EntityRef<tagTbl> _tagTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OntagIDChanging(long value);
    partial void OntagIDChanged();
    partial void OnioIDChanging(long value);
    partial void OnioIDChanged();
    #endregion
		
		public ioTagTbl()
		{
			this._ioTbl = default(EntityRef<ioTbl>);
			this._tagTbl = default(EntityRef<tagTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tagID", DbType="BigInt NOT NULL")]
		public long tagID
		{
			get
			{
				return this._tagID;
			}
			set
			{
				if ((this._tagID != value))
				{
					if (this._tagTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntagIDChanging(value);
					this.SendPropertyChanging();
					this._tagID = value;
					this.SendPropertyChanged("tagID");
					this.OntagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ioID", DbType="BigInt NOT NULL")]
		public long ioID
		{
			get
			{
				return this._ioID;
			}
			set
			{
				if ((this._ioID != value))
				{
					if (this._ioTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnioIDChanging(value);
					this.SendPropertyChanging();
					this._ioID = value;
					this.SendPropertyChanged("ioID");
					this.OnioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ioTbl_ioTagTbl", Storage="_ioTbl", ThisKey="ioID", OtherKey="ID", IsForeignKey=true)]
		public ioTbl ioTbl
		{
			get
			{
				return this._ioTbl.Entity;
			}
			set
			{
				ioTbl previousValue = this._ioTbl.Entity;
				if (((previousValue != value) 
							|| (this._ioTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ioTbl.Entity = null;
						previousValue.ioTagTbls.Remove(this);
					}
					this._ioTbl.Entity = value;
					if ((value != null))
					{
						value.ioTagTbls.Add(this);
						this._ioID = value.ID;
					}
					else
					{
						this._ioID = default(long);
					}
					this.SendPropertyChanged("ioTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_ioTagTbl", Storage="_tagTbl", ThisKey="tagID", OtherKey="ID", IsForeignKey=true)]
		public tagTbl tagTbl
		{
			get
			{
				return this._tagTbl.Entity;
			}
			set
			{
				tagTbl previousValue = this._tagTbl.Entity;
				if (((previousValue != value) 
							|| (this._tagTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tagTbl.Entity = null;
						previousValue.ioTagTbls.Remove(this);
					}
					this._tagTbl.Entity = value;
					if ((value != null))
					{
						value.ioTagTbls.Add(this);
						this._tagID = value.ID;
					}
					else
					{
						this._tagID = default(long);
					}
					this.SendPropertyChanged("tagTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ioTbl")]
	public partial class ioTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _userID;
		
		private System.Nullable<long> _mUserID;
		
		private string _title;
		
		private bool _isPublished;
		
		private int _viewCount;
		
		private System.DateTime _publishDate;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private EntitySet<ioCommentTbl> _ioCommentTbls;
		
		private EntitySet<ioContentTbl> _ioContentTbls;
		
		private EntitySet<ioLikeTbl> _ioLikeTbls;
		
		private EntitySet<ioSubGroupTbl> _ioSubGroupTbls;
		
		private EntitySet<ioTagTbl> _ioTagTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    partial void OnmUserIDChanging(System.Nullable<long> value);
    partial void OnmUserIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnisPublishedChanging(bool value);
    partial void OnisPublishedChanged();
    partial void OnviewCountChanging(int value);
    partial void OnviewCountChanged();
    partial void OnpublishDateChanging(System.DateTime value);
    partial void OnpublishDateChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public ioTbl()
		{
			this._ioCommentTbls = new EntitySet<ioCommentTbl>(new Action<ioCommentTbl>(this.attach_ioCommentTbls), new Action<ioCommentTbl>(this.detach_ioCommentTbls));
			this._ioContentTbls = new EntitySet<ioContentTbl>(new Action<ioContentTbl>(this.attach_ioContentTbls), new Action<ioContentTbl>(this.detach_ioContentTbls));
			this._ioLikeTbls = new EntitySet<ioLikeTbl>(new Action<ioLikeTbl>(this.attach_ioLikeTbls), new Action<ioLikeTbl>(this.detach_ioLikeTbls));
			this._ioSubGroupTbls = new EntitySet<ioSubGroupTbl>(new Action<ioSubGroupTbl>(this.attach_ioSubGroupTbls), new Action<ioSubGroupTbl>(this.detach_ioSubGroupTbls));
			this._ioTagTbls = new EntitySet<ioTagTbl>(new Action<ioTagTbl>(this.attach_ioTagTbls), new Action<ioTagTbl>(this.detach_ioTagTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt")]
		public System.Nullable<long> mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPublished", DbType="Bit NOT NULL")]
		public bool isPublished
		{
			get
			{
				return this._isPublished;
			}
			set
			{
				if ((this._isPublished != value))
				{
					this.OnisPublishedChanging(value);
					this.SendPropertyChanging();
					this._isPublished = value;
					this.SendPropertyChanged("isPublished");
					this.OnisPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_viewCount", DbType="Int NOT NULL")]
		public int viewCount
		{
			get
			{
				return this._viewCount;
			}
			set
			{
				if ((this._viewCount != value))
				{
					this.OnviewCountChanging(value);
					this.SendPropertyChanging();
					this._viewCount = value;
					this.SendPropertyChanged("viewCount");
					this.OnviewCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publishDate", DbType="DateTime NOT NULL")]
		public System.DateTime publishDate
		{
			get
			{
				return this._publishDate;
			}
			set
			{
				if ((this._publishDate != value))
				{
					this.OnpublishDateChanging(value);
					this.SendPropertyChanging();
					this._publishDate = value;
					this.SendPropertyChanged("publishDate");
					this.OnpublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ioTbl_ioCommentTbl", Storage="_ioCommentTbls", ThisKey="ID", OtherKey="ioID")]
		public EntitySet<ioCommentTbl> ioCommentTbls
		{
			get
			{
				return this._ioCommentTbls;
			}
			set
			{
				this._ioCommentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ioTbl_ioContentTbl", Storage="_ioContentTbls", ThisKey="ID", OtherKey="ioID")]
		public EntitySet<ioContentTbl> ioContentTbls
		{
			get
			{
				return this._ioContentTbls;
			}
			set
			{
				this._ioContentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ioTbl_ioLikeTbl", Storage="_ioLikeTbls", ThisKey="ID", OtherKey="ioID")]
		public EntitySet<ioLikeTbl> ioLikeTbls
		{
			get
			{
				return this._ioLikeTbls;
			}
			set
			{
				this._ioLikeTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ioTbl_ioSubGroupTbl", Storage="_ioSubGroupTbls", ThisKey="ID", OtherKey="ioID")]
		public EntitySet<ioSubGroupTbl> ioSubGroupTbls
		{
			get
			{
				return this._ioSubGroupTbls;
			}
			set
			{
				this._ioSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ioTbl_ioTagTbl", Storage="_ioTagTbls", ThisKey="ID", OtherKey="ioID")]
		public EntitySet<ioTagTbl> ioTagTbls
		{
			get
			{
				return this._ioTagTbls;
			}
			set
			{
				this._ioTagTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ioCommentTbls(ioCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.ioTbl = this;
		}
		
		private void detach_ioCommentTbls(ioCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.ioTbl = null;
		}
		
		private void attach_ioContentTbls(ioContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.ioTbl = this;
		}
		
		private void detach_ioContentTbls(ioContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.ioTbl = null;
		}
		
		private void attach_ioLikeTbls(ioLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.ioTbl = this;
		}
		
		private void detach_ioLikeTbls(ioLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.ioTbl = null;
		}
		
		private void attach_ioSubGroupTbls(ioSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.ioTbl = this;
		}
		
		private void detach_ioSubGroupTbls(ioSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.ioTbl = null;
		}
		
		private void attach_ioTagTbls(ioTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.ioTbl = this;
		}
		
		private void detach_ioTagTbls(ioTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.ioTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ipTbl")]
	public partial class ipTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _ip;
		
		private System.DateTime _regDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnipChanging(string value);
    partial void OnipChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public ipTbl()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ip", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ip
		{
			get
			{
				return this._ip;
			}
			set
			{
				if ((this._ip != value))
				{
					this.OnipChanging(value);
					this.SendPropertyChanging();
					this._ip = value;
					this.SendPropertyChanged("ip");
					this.OnipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.masterReportContentTbl")]
	public partial class masterReportContentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _masterReportID;
		
		private int _type;
		
		private string _value;
		
		private EntityRef<masterReportTbl> _masterReportTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnmasterReportIDChanging(long value);
    partial void OnmasterReportIDChanged();
    partial void OntypeChanging(int value);
    partial void OntypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    #endregion
		
		public masterReportContentTbl()
		{
			this._masterReportTbl = default(EntityRef<masterReportTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_masterReportID", DbType="BigInt NOT NULL")]
		public long masterReportID
		{
			get
			{
				return this._masterReportID;
			}
			set
			{
				if ((this._masterReportID != value))
				{
					if (this._masterReportTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmasterReportIDChanging(value);
					this.SendPropertyChanging();
					this._masterReportID = value;
					this.SendPropertyChanged("masterReportID");
					this.OnmasterReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Int NOT NULL")]
		public int type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="masterReportTbl_masterReportContentTbl", Storage="_masterReportTbl", ThisKey="masterReportID", OtherKey="ID", IsForeignKey=true)]
		public masterReportTbl masterReportTbl
		{
			get
			{
				return this._masterReportTbl.Entity;
			}
			set
			{
				masterReportTbl previousValue = this._masterReportTbl.Entity;
				if (((previousValue != value) 
							|| (this._masterReportTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._masterReportTbl.Entity = null;
						previousValue.masterReportContentTbls.Remove(this);
					}
					this._masterReportTbl.Entity = value;
					if ((value != null))
					{
						value.masterReportContentTbls.Add(this);
						this._masterReportID = value.ID;
					}
					else
					{
						this._masterReportID = default(long);
					}
					this.SendPropertyChanged("masterReportTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.masterReportTagTbl")]
	public partial class masterReportTagTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _tagID;
		
		private long _masterReportID;
		
		private EntityRef<masterReportTbl> _masterReportTbl;
		
		private EntityRef<tagTbl> _tagTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OntagIDChanging(long value);
    partial void OntagIDChanged();
    partial void OnmasterReportIDChanging(long value);
    partial void OnmasterReportIDChanged();
    #endregion
		
		public masterReportTagTbl()
		{
			this._masterReportTbl = default(EntityRef<masterReportTbl>);
			this._tagTbl = default(EntityRef<tagTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tagID", DbType="BigInt NOT NULL")]
		public long tagID
		{
			get
			{
				return this._tagID;
			}
			set
			{
				if ((this._tagID != value))
				{
					if (this._tagTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntagIDChanging(value);
					this.SendPropertyChanging();
					this._tagID = value;
					this.SendPropertyChanged("tagID");
					this.OntagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_masterReportID", DbType="BigInt NOT NULL")]
		public long masterReportID
		{
			get
			{
				return this._masterReportID;
			}
			set
			{
				if ((this._masterReportID != value))
				{
					if (this._masterReportTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmasterReportIDChanging(value);
					this.SendPropertyChanging();
					this._masterReportID = value;
					this.SendPropertyChanged("masterReportID");
					this.OnmasterReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="masterReportTbl_masterReportTagTbl", Storage="_masterReportTbl", ThisKey="masterReportID", OtherKey="ID", IsForeignKey=true)]
		public masterReportTbl masterReportTbl
		{
			get
			{
				return this._masterReportTbl.Entity;
			}
			set
			{
				masterReportTbl previousValue = this._masterReportTbl.Entity;
				if (((previousValue != value) 
							|| (this._masterReportTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._masterReportTbl.Entity = null;
						previousValue.masterReportTagTbls.Remove(this);
					}
					this._masterReportTbl.Entity = value;
					if ((value != null))
					{
						value.masterReportTagTbls.Add(this);
						this._masterReportID = value.ID;
					}
					else
					{
						this._masterReportID = default(long);
					}
					this.SendPropertyChanged("masterReportTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_masterReportTagTbl", Storage="_tagTbl", ThisKey="tagID", OtherKey="ID", IsForeignKey=true)]
		public tagTbl tagTbl
		{
			get
			{
				return this._tagTbl.Entity;
			}
			set
			{
				tagTbl previousValue = this._tagTbl.Entity;
				if (((previousValue != value) 
							|| (this._tagTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tagTbl.Entity = null;
						previousValue.masterReportTagTbls.Remove(this);
					}
					this._tagTbl.Entity = value;
					if ((value != null))
					{
						value.masterReportTagTbls.Add(this);
						this._tagID = value.ID;
					}
					else
					{
						this._tagID = default(long);
					}
					this.SendPropertyChanged("tagTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.masterReportTbl")]
	public partial class masterReportTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _userID;
		
		private System.Nullable<long> _mUserID;
		
		private string _title;
		
		private bool _isBlock;
		
		private long _viewCount;
		
		private System.DateTime _publishDate;
		
		private System.DateTime _regDate;
		
		private EntitySet<masterReportContentTbl> _masterReportContentTbls;
		
		private EntitySet<masterReportTagTbl> _masterReportTagTbls;
		
		private EntitySet<masterRreportSubGroupTbl> _masterRreportSubGroupTbls;
		
		private EntitySet<reportCommentTbl> _reportCommentTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    partial void OnmUserIDChanging(System.Nullable<long> value);
    partial void OnmUserIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnviewCountChanging(long value);
    partial void OnviewCountChanged();
    partial void OnpublishDateChanging(System.DateTime value);
    partial void OnpublishDateChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public masterReportTbl()
		{
			this._masterReportContentTbls = new EntitySet<masterReportContentTbl>(new Action<masterReportContentTbl>(this.attach_masterReportContentTbls), new Action<masterReportContentTbl>(this.detach_masterReportContentTbls));
			this._masterReportTagTbls = new EntitySet<masterReportTagTbl>(new Action<masterReportTagTbl>(this.attach_masterReportTagTbls), new Action<masterReportTagTbl>(this.detach_masterReportTagTbls));
			this._masterRreportSubGroupTbls = new EntitySet<masterRreportSubGroupTbl>(new Action<masterRreportSubGroupTbl>(this.attach_masterRreportSubGroupTbls), new Action<masterRreportSubGroupTbl>(this.detach_masterRreportSubGroupTbls));
			this._reportCommentTbls = new EntitySet<reportCommentTbl>(new Action<reportCommentTbl>(this.attach_reportCommentTbls), new Action<reportCommentTbl>(this.detach_reportCommentTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt")]
		public System.Nullable<long> mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_viewCount", DbType="BigInt NOT NULL")]
		public long viewCount
		{
			get
			{
				return this._viewCount;
			}
			set
			{
				if ((this._viewCount != value))
				{
					this.OnviewCountChanging(value);
					this.SendPropertyChanging();
					this._viewCount = value;
					this.SendPropertyChanged("viewCount");
					this.OnviewCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publishDate", DbType="DateTime NOT NULL")]
		public System.DateTime publishDate
		{
			get
			{
				return this._publishDate;
			}
			set
			{
				if ((this._publishDate != value))
				{
					this.OnpublishDateChanging(value);
					this.SendPropertyChanging();
					this._publishDate = value;
					this.SendPropertyChanged("publishDate");
					this.OnpublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="masterReportTbl_masterReportContentTbl", Storage="_masterReportContentTbls", ThisKey="ID", OtherKey="masterReportID")]
		public EntitySet<masterReportContentTbl> masterReportContentTbls
		{
			get
			{
				return this._masterReportContentTbls;
			}
			set
			{
				this._masterReportContentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="masterReportTbl_masterReportTagTbl", Storage="_masterReportTagTbls", ThisKey="ID", OtherKey="masterReportID")]
		public EntitySet<masterReportTagTbl> masterReportTagTbls
		{
			get
			{
				return this._masterReportTagTbls;
			}
			set
			{
				this._masterReportTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="masterReportTbl_masterRreportSubGroupTbl", Storage="_masterRreportSubGroupTbls", ThisKey="ID", OtherKey="reportID")]
		public EntitySet<masterRreportSubGroupTbl> masterRreportSubGroupTbls
		{
			get
			{
				return this._masterRreportSubGroupTbls;
			}
			set
			{
				this._masterRreportSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="masterReportTbl_reportCommentTbl", Storage="_reportCommentTbls", ThisKey="ID", OtherKey="reportID")]
		public EntitySet<reportCommentTbl> reportCommentTbls
		{
			get
			{
				return this._reportCommentTbls;
			}
			set
			{
				this._reportCommentTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_masterReportContentTbls(masterReportContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.masterReportTbl = this;
		}
		
		private void detach_masterReportContentTbls(masterReportContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.masterReportTbl = null;
		}
		
		private void attach_masterReportTagTbls(masterReportTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.masterReportTbl = this;
		}
		
		private void detach_masterReportTagTbls(masterReportTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.masterReportTbl = null;
		}
		
		private void attach_masterRreportSubGroupTbls(masterRreportSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.masterReportTbl = this;
		}
		
		private void detach_masterRreportSubGroupTbls(masterRreportSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.masterReportTbl = null;
		}
		
		private void attach_reportCommentTbls(reportCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.masterReportTbl = this;
		}
		
		private void detach_reportCommentTbls(reportCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.masterReportTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.masterRreportSubGroupTbl")]
	public partial class masterRreportSubGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _reportID;
		
		private long _subGroupID;
		
		private EntityRef<masterReportTbl> _masterReportTbl;
		
		private EntityRef<SubGroupTbl> _SubGroupTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnreportIDChanging(long value);
    partial void OnreportIDChanged();
    partial void OnsubGroupIDChanging(long value);
    partial void OnsubGroupIDChanged();
    #endregion
		
		public masterRreportSubGroupTbl()
		{
			this._masterReportTbl = default(EntityRef<masterReportTbl>);
			this._SubGroupTbl = default(EntityRef<SubGroupTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reportID", DbType="BigInt NOT NULL")]
		public long reportID
		{
			get
			{
				return this._reportID;
			}
			set
			{
				if ((this._reportID != value))
				{
					if (this._masterReportTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreportIDChanging(value);
					this.SendPropertyChanging();
					this._reportID = value;
					this.SendPropertyChanged("reportID");
					this.OnreportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subGroupID", DbType="BigInt NOT NULL")]
		public long subGroupID
		{
			get
			{
				return this._subGroupID;
			}
			set
			{
				if ((this._subGroupID != value))
				{
					if (this._SubGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubGroupIDChanging(value);
					this.SendPropertyChanging();
					this._subGroupID = value;
					this.SendPropertyChanged("subGroupID");
					this.OnsubGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="masterReportTbl_masterRreportSubGroupTbl", Storage="_masterReportTbl", ThisKey="reportID", OtherKey="ID", IsForeignKey=true)]
		public masterReportTbl masterReportTbl
		{
			get
			{
				return this._masterReportTbl.Entity;
			}
			set
			{
				masterReportTbl previousValue = this._masterReportTbl.Entity;
				if (((previousValue != value) 
							|| (this._masterReportTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._masterReportTbl.Entity = null;
						previousValue.masterRreportSubGroupTbls.Remove(this);
					}
					this._masterReportTbl.Entity = value;
					if ((value != null))
					{
						value.masterRreportSubGroupTbls.Add(this);
						this._reportID = value.ID;
					}
					else
					{
						this._reportID = default(long);
					}
					this.SendPropertyChanged("masterReportTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_masterRreportSubGroupTbl", Storage="_SubGroupTbl", ThisKey="subGroupID", OtherKey="ID", IsForeignKey=true)]
		public SubGroupTbl SubGroupTbl
		{
			get
			{
				return this._SubGroupTbl.Entity;
			}
			set
			{
				SubGroupTbl previousValue = this._SubGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._SubGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubGroupTbl.Entity = null;
						previousValue.masterRreportSubGroupTbls.Remove(this);
					}
					this._SubGroupTbl.Entity = value;
					if ((value != null))
					{
						value.masterRreportSubGroupTbls.Add(this);
						this._subGroupID = value.ID;
					}
					else
					{
						this._subGroupID = default(long);
					}
					this.SendPropertyChanged("SubGroupTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.messageRecieverTbl")]
	public partial class messageRecieverTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _recieverID;
		
		private long _messageID;
		
		private EntityRef<messageTbl> _messageTbl;
		
		private EntityRef<mUserTbl> _mUserTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnrecieverIDChanging(long value);
    partial void OnrecieverIDChanged();
    partial void OnmessageIDChanging(long value);
    partial void OnmessageIDChanged();
    #endregion
		
		public messageRecieverTbl()
		{
			this._messageTbl = default(EntityRef<messageTbl>);
			this._mUserTbl = default(EntityRef<mUserTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recieverID", DbType="BigInt NOT NULL")]
		public long recieverID
		{
			get
			{
				return this._recieverID;
			}
			set
			{
				if ((this._recieverID != value))
				{
					if (this._mUserTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrecieverIDChanging(value);
					this.SendPropertyChanging();
					this._recieverID = value;
					this.SendPropertyChanged("recieverID");
					this.OnrecieverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageID", DbType="BigInt NOT NULL")]
		public long messageID
		{
			get
			{
				return this._messageID;
			}
			set
			{
				if ((this._messageID != value))
				{
					if (this._messageTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmessageIDChanging(value);
					this.SendPropertyChanging();
					this._messageID = value;
					this.SendPropertyChanged("messageID");
					this.OnmessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="messageTbl_messageRecieverTbl", Storage="_messageTbl", ThisKey="messageID", OtherKey="ID", IsForeignKey=true)]
		public messageTbl messageTbl
		{
			get
			{
				return this._messageTbl.Entity;
			}
			set
			{
				messageTbl previousValue = this._messageTbl.Entity;
				if (((previousValue != value) 
							|| (this._messageTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._messageTbl.Entity = null;
						previousValue.messageRecieverTbls.Remove(this);
					}
					this._messageTbl.Entity = value;
					if ((value != null))
					{
						value.messageRecieverTbls.Add(this);
						this._messageID = value.ID;
					}
					else
					{
						this._messageID = default(long);
					}
					this.SendPropertyChanged("messageTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_messageRecieverTbl", Storage="_mUserTbl", ThisKey="recieverID", OtherKey="ID", IsForeignKey=true)]
		public mUserTbl mUserTbl
		{
			get
			{
				return this._mUserTbl.Entity;
			}
			set
			{
				mUserTbl previousValue = this._mUserTbl.Entity;
				if (((previousValue != value) 
							|| (this._mUserTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mUserTbl.Entity = null;
						previousValue.messageRecieverTbls.Remove(this);
					}
					this._mUserTbl.Entity = value;
					if ((value != null))
					{
						value.messageRecieverTbls.Add(this);
						this._recieverID = value.ID;
					}
					else
					{
						this._recieverID = default(long);
					}
					this.SendPropertyChanged("mUserTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.messageSubGroupTbl")]
	public partial class messageSubGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _messageID;
		
		private long _subGroupID;
		
		private EntityRef<messageTbl> _messageTbl;
		
		private EntityRef<SubGroupTbl> _SubGroupTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnmessageIDChanging(long value);
    partial void OnmessageIDChanged();
    partial void OnsubGroupIDChanging(long value);
    partial void OnsubGroupIDChanged();
    #endregion
		
		public messageSubGroupTbl()
		{
			this._messageTbl = default(EntityRef<messageTbl>);
			this._SubGroupTbl = default(EntityRef<SubGroupTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageID", DbType="BigInt NOT NULL")]
		public long messageID
		{
			get
			{
				return this._messageID;
			}
			set
			{
				if ((this._messageID != value))
				{
					if (this._messageTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmessageIDChanging(value);
					this.SendPropertyChanging();
					this._messageID = value;
					this.SendPropertyChanged("messageID");
					this.OnmessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subGroupID", DbType="BigInt NOT NULL")]
		public long subGroupID
		{
			get
			{
				return this._subGroupID;
			}
			set
			{
				if ((this._subGroupID != value))
				{
					if (this._SubGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubGroupIDChanging(value);
					this.SendPropertyChanging();
					this._subGroupID = value;
					this.SendPropertyChanged("subGroupID");
					this.OnsubGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="messageTbl_messageSubGroupTbl", Storage="_messageTbl", ThisKey="messageID", OtherKey="ID", IsForeignKey=true)]
		public messageTbl messageTbl
		{
			get
			{
				return this._messageTbl.Entity;
			}
			set
			{
				messageTbl previousValue = this._messageTbl.Entity;
				if (((previousValue != value) 
							|| (this._messageTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._messageTbl.Entity = null;
						previousValue.messageSubGroupTbls.Remove(this);
					}
					this._messageTbl.Entity = value;
					if ((value != null))
					{
						value.messageSubGroupTbls.Add(this);
						this._messageID = value.ID;
					}
					else
					{
						this._messageID = default(long);
					}
					this.SendPropertyChanged("messageTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_messageSubGroupTbl", Storage="_SubGroupTbl", ThisKey="subGroupID", OtherKey="ID", IsForeignKey=true)]
		public SubGroupTbl SubGroupTbl
		{
			get
			{
				return this._SubGroupTbl.Entity;
			}
			set
			{
				SubGroupTbl previousValue = this._SubGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._SubGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubGroupTbl.Entity = null;
						previousValue.messageSubGroupTbls.Remove(this);
					}
					this._SubGroupTbl.Entity = value;
					if ((value != null))
					{
						value.messageSubGroupTbls.Add(this);
						this._subGroupID = value.ID;
					}
					else
					{
						this._subGroupID = default(long);
					}
					this.SendPropertyChanged("SubGroupTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.messageTbl")]
	public partial class messageTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _title;
		
		private string _text;
		
		private System.DateTime _regDate;
		
		private string _attachment;
		
		private System.Nullable<long> _userID;
		
		private long _mUserID;
		
		private bool _toPartner;
		
		private bool _toAll;
		
		private System.Nullable<long> _downloadCount;
		
		private string _fileType;
		
		private System.Nullable<int> _fileSize;
		
		private bool _isBlock;
		
		private EntitySet<messageRecieverTbl> _messageRecieverTbls;
		
		private EntitySet<messageSubGroupTbl> _messageSubGroupTbls;
		
		private EntityRef<mUserTbl> _mUserTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnattachmentChanging(string value);
    partial void OnattachmentChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    partial void OnmUserIDChanging(long value);
    partial void OnmUserIDChanged();
    partial void OntoPartnerChanging(bool value);
    partial void OntoPartnerChanged();
    partial void OntoAllChanging(bool value);
    partial void OntoAllChanged();
    partial void OndownloadCountChanging(System.Nullable<long> value);
    partial void OndownloadCountChanged();
    partial void OnfileTypeChanging(string value);
    partial void OnfileTypeChanged();
    partial void OnfileSizeChanging(System.Nullable<int> value);
    partial void OnfileSizeChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    #endregion
		
		public messageTbl()
		{
			this._messageRecieverTbls = new EntitySet<messageRecieverTbl>(new Action<messageRecieverTbl>(this.attach_messageRecieverTbls), new Action<messageRecieverTbl>(this.detach_messageRecieverTbls));
			this._messageSubGroupTbls = new EntitySet<messageSubGroupTbl>(new Action<messageSubGroupTbl>(this.attach_messageSubGroupTbls), new Action<messageSubGroupTbl>(this.detach_messageSubGroupTbls));
			this._mUserTbl = default(EntityRef<mUserTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attachment", DbType="NVarChar(500)")]
		public string attachment
		{
			get
			{
				return this._attachment;
			}
			set
			{
				if ((this._attachment != value))
				{
					this.OnattachmentChanging(value);
					this.SendPropertyChanging();
					this._attachment = value;
					this.SendPropertyChanged("attachment");
					this.OnattachmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt NOT NULL")]
		public long mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					if (this._mUserTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toPartner", DbType="Bit NOT NULL")]
		public bool toPartner
		{
			get
			{
				return this._toPartner;
			}
			set
			{
				if ((this._toPartner != value))
				{
					this.OntoPartnerChanging(value);
					this.SendPropertyChanging();
					this._toPartner = value;
					this.SendPropertyChanged("toPartner");
					this.OntoPartnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toAll", DbType="Bit NOT NULL")]
		public bool toAll
		{
			get
			{
				return this._toAll;
			}
			set
			{
				if ((this._toAll != value))
				{
					this.OntoAllChanging(value);
					this.SendPropertyChanging();
					this._toAll = value;
					this.SendPropertyChanged("toAll");
					this.OntoAllChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_downloadCount", DbType="BigInt")]
		public System.Nullable<long> downloadCount
		{
			get
			{
				return this._downloadCount;
			}
			set
			{
				if ((this._downloadCount != value))
				{
					this.OndownloadCountChanging(value);
					this.SendPropertyChanging();
					this._downloadCount = value;
					this.SendPropertyChanged("downloadCount");
					this.OndownloadCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileType", DbType="NVarChar(50)")]
		public string fileType
		{
			get
			{
				return this._fileType;
			}
			set
			{
				if ((this._fileType != value))
				{
					this.OnfileTypeChanging(value);
					this.SendPropertyChanging();
					this._fileType = value;
					this.SendPropertyChanged("fileType");
					this.OnfileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileSize", DbType="Int")]
		public System.Nullable<int> fileSize
		{
			get
			{
				return this._fileSize;
			}
			set
			{
				if ((this._fileSize != value))
				{
					this.OnfileSizeChanging(value);
					this.SendPropertyChanging();
					this._fileSize = value;
					this.SendPropertyChanged("fileSize");
					this.OnfileSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="messageTbl_messageRecieverTbl", Storage="_messageRecieverTbls", ThisKey="ID", OtherKey="messageID")]
		public EntitySet<messageRecieverTbl> messageRecieverTbls
		{
			get
			{
				return this._messageRecieverTbls;
			}
			set
			{
				this._messageRecieverTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="messageTbl_messageSubGroupTbl", Storage="_messageSubGroupTbls", ThisKey="ID", OtherKey="messageID")]
		public EntitySet<messageSubGroupTbl> messageSubGroupTbls
		{
			get
			{
				return this._messageSubGroupTbls;
			}
			set
			{
				this._messageSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_messageTbl", Storage="_mUserTbl", ThisKey="mUserID", OtherKey="ID", IsForeignKey=true)]
		public mUserTbl mUserTbl
		{
			get
			{
				return this._mUserTbl.Entity;
			}
			set
			{
				mUserTbl previousValue = this._mUserTbl.Entity;
				if (((previousValue != value) 
							|| (this._mUserTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mUserTbl.Entity = null;
						previousValue.messageTbls.Remove(this);
					}
					this._mUserTbl.Entity = value;
					if ((value != null))
					{
						value.messageTbls.Add(this);
						this._mUserID = value.ID;
					}
					else
					{
						this._mUserID = default(long);
					}
					this.SendPropertyChanged("mUserTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_messageRecieverTbls(messageRecieverTbl entity)
		{
			this.SendPropertyChanging();
			entity.messageTbl = this;
		}
		
		private void detach_messageRecieverTbls(messageRecieverTbl entity)
		{
			this.SendPropertyChanging();
			entity.messageTbl = null;
		}
		
		private void attach_messageSubGroupTbls(messageSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.messageTbl = this;
		}
		
		private void detach_messageSubGroupTbls(messageSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.messageTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.mUserOptionTbl")]
	public partial class mUserOptionTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _optionID;
		
		private long _mUserID;
		
		private System.DateTime _regDate;
		
		private EntityRef<mUserTbl> _mUserTbl;
		
		private EntityRef<optionTbl> _optionTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnoptionIDChanging(long value);
    partial void OnoptionIDChanged();
    partial void OnmUserIDChanging(long value);
    partial void OnmUserIDChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public mUserOptionTbl()
		{
			this._mUserTbl = default(EntityRef<mUserTbl>);
			this._optionTbl = default(EntityRef<optionTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_optionID", DbType="BigInt NOT NULL")]
		public long optionID
		{
			get
			{
				return this._optionID;
			}
			set
			{
				if ((this._optionID != value))
				{
					if (this._optionTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnoptionIDChanging(value);
					this.SendPropertyChanging();
					this._optionID = value;
					this.SendPropertyChanged("optionID");
					this.OnoptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt NOT NULL")]
		public long mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					if (this._mUserTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_mUserOptionTbl", Storage="_mUserTbl", ThisKey="mUserID", OtherKey="ID", IsForeignKey=true)]
		public mUserTbl mUserTbl
		{
			get
			{
				return this._mUserTbl.Entity;
			}
			set
			{
				mUserTbl previousValue = this._mUserTbl.Entity;
				if (((previousValue != value) 
							|| (this._mUserTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mUserTbl.Entity = null;
						previousValue.mUserOptionTbls.Remove(this);
					}
					this._mUserTbl.Entity = value;
					if ((value != null))
					{
						value.mUserOptionTbls.Add(this);
						this._mUserID = value.ID;
					}
					else
					{
						this._mUserID = default(long);
					}
					this.SendPropertyChanged("mUserTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="optionTbl_mUserOptionTbl", Storage="_optionTbl", ThisKey="optionID", OtherKey="ID", IsForeignKey=true)]
		public optionTbl optionTbl
		{
			get
			{
				return this._optionTbl.Entity;
			}
			set
			{
				optionTbl previousValue = this._optionTbl.Entity;
				if (((previousValue != value) 
							|| (this._optionTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._optionTbl.Entity = null;
						previousValue.mUserOptionTbls.Remove(this);
					}
					this._optionTbl.Entity = value;
					if ((value != null))
					{
						value.mUserOptionTbls.Add(this);
						this._optionID = value.ID;
					}
					else
					{
						this._optionID = default(long);
					}
					this.SendPropertyChanged("optionTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.mUserTbl")]
	public partial class mUserTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _accessID;
		
		private string _name;
		
		private string _family;
		
		private string _emailtell;
		
		private string _password;
		
		private bool _isBlock;
		
		private string _lastedit;
		
		private System.DateTime _regDate;
		
		private EntitySet<answerTbl> _answerTbls;
		
		private EntitySet<downloadLikeTbl> _downloadLikeTbls;
		
		private EntitySet<eventsLikeTbl> _eventsLikeTbls;
		
		private EntitySet<icanTbl> _icanTbls;
		
		private EntitySet<ideasLikeTbl> _ideasLikeTbls;
		
		private EntitySet<ideasTbl> _ideasTbls;
		
		private EntitySet<ioLikeTbl> _ioLikeTbls;
		
		private EntitySet<messageRecieverTbl> _messageRecieverTbls;
		
		private EntitySet<messageTbl> _messageTbls;
		
		private EntitySet<mUserOptionTbl> _mUserOptionTbls;
		
		private EntitySet<newsLikeTbl> _newsLikeTbls;
		
		private EntitySet<publicationLikeTbl> _publicationLikeTbls;
		
		private EntitySet<responseTbl> _responseTbls;
		
		private EntitySet<userSubGroupTbl> _userSubGroupTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnaccessIDChanging(int value);
    partial void OnaccessIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnfamilyChanging(string value);
    partial void OnfamilyChanged();
    partial void OnemailtellChanging(string value);
    partial void OnemailtellChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnlasteditChanging(string value);
    partial void OnlasteditChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public mUserTbl()
		{
			this._answerTbls = new EntitySet<answerTbl>(new Action<answerTbl>(this.attach_answerTbls), new Action<answerTbl>(this.detach_answerTbls));
			this._downloadLikeTbls = new EntitySet<downloadLikeTbl>(new Action<downloadLikeTbl>(this.attach_downloadLikeTbls), new Action<downloadLikeTbl>(this.detach_downloadLikeTbls));
			this._eventsLikeTbls = new EntitySet<eventsLikeTbl>(new Action<eventsLikeTbl>(this.attach_eventsLikeTbls), new Action<eventsLikeTbl>(this.detach_eventsLikeTbls));
			this._icanTbls = new EntitySet<icanTbl>(new Action<icanTbl>(this.attach_icanTbls), new Action<icanTbl>(this.detach_icanTbls));
			this._ideasLikeTbls = new EntitySet<ideasLikeTbl>(new Action<ideasLikeTbl>(this.attach_ideasLikeTbls), new Action<ideasLikeTbl>(this.detach_ideasLikeTbls));
			this._ideasTbls = new EntitySet<ideasTbl>(new Action<ideasTbl>(this.attach_ideasTbls), new Action<ideasTbl>(this.detach_ideasTbls));
			this._ioLikeTbls = new EntitySet<ioLikeTbl>(new Action<ioLikeTbl>(this.attach_ioLikeTbls), new Action<ioLikeTbl>(this.detach_ioLikeTbls));
			this._messageRecieverTbls = new EntitySet<messageRecieverTbl>(new Action<messageRecieverTbl>(this.attach_messageRecieverTbls), new Action<messageRecieverTbl>(this.detach_messageRecieverTbls));
			this._messageTbls = new EntitySet<messageTbl>(new Action<messageTbl>(this.attach_messageTbls), new Action<messageTbl>(this.detach_messageTbls));
			this._mUserOptionTbls = new EntitySet<mUserOptionTbl>(new Action<mUserOptionTbl>(this.attach_mUserOptionTbls), new Action<mUserOptionTbl>(this.detach_mUserOptionTbls));
			this._newsLikeTbls = new EntitySet<newsLikeTbl>(new Action<newsLikeTbl>(this.attach_newsLikeTbls), new Action<newsLikeTbl>(this.detach_newsLikeTbls));
			this._publicationLikeTbls = new EntitySet<publicationLikeTbl>(new Action<publicationLikeTbl>(this.attach_publicationLikeTbls), new Action<publicationLikeTbl>(this.detach_publicationLikeTbls));
			this._responseTbls = new EntitySet<responseTbl>(new Action<responseTbl>(this.attach_responseTbls), new Action<responseTbl>(this.detach_responseTbls));
			this._userSubGroupTbls = new EntitySet<userSubGroupTbl>(new Action<userSubGroupTbl>(this.attach_userSubGroupTbls), new Action<userSubGroupTbl>(this.detach_userSubGroupTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accessID", DbType="Int NOT NULL")]
		public int accessID
		{
			get
			{
				return this._accessID;
			}
			set
			{
				if ((this._accessID != value))
				{
					this.OnaccessIDChanging(value);
					this.SendPropertyChanging();
					this._accessID = value;
					this.SendPropertyChanged("accessID");
					this.OnaccessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_family", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string family
		{
			get
			{
				return this._family;
			}
			set
			{
				if ((this._family != value))
				{
					this.OnfamilyChanging(value);
					this.SendPropertyChanging();
					this._family = value;
					this.SendPropertyChanged("family");
					this.OnfamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailtell", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string emailtell
		{
			get
			{
				return this._emailtell;
			}
			set
			{
				if ((this._emailtell != value))
				{
					this.OnemailtellChanging(value);
					this.SendPropertyChanging();
					this._emailtell = value;
					this.SendPropertyChanged("emailtell");
					this.OnemailtellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastedit", DbType="NVarChar(550) NOT NULL", CanBeNull=false)]
		public string lastedit
		{
			get
			{
				return this._lastedit;
			}
			set
			{
				if ((this._lastedit != value))
				{
					this.OnlasteditChanging(value);
					this.SendPropertyChanging();
					this._lastedit = value;
					this.SendPropertyChanged("lastedit");
					this.OnlasteditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_answerTbl", Storage="_answerTbls", ThisKey="ID", OtherKey="mUserID")]
		public EntitySet<answerTbl> answerTbls
		{
			get
			{
				return this._answerTbls;
			}
			set
			{
				this._answerTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_downloadLikeTbl", Storage="_downloadLikeTbls", ThisKey="ID", OtherKey="userID")]
		public EntitySet<downloadLikeTbl> downloadLikeTbls
		{
			get
			{
				return this._downloadLikeTbls;
			}
			set
			{
				this._downloadLikeTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_eventsLikeTbl", Storage="_eventsLikeTbls", ThisKey="ID", OtherKey="userID")]
		public EntitySet<eventsLikeTbl> eventsLikeTbls
		{
			get
			{
				return this._eventsLikeTbls;
			}
			set
			{
				this._eventsLikeTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_icanTbl", Storage="_icanTbls", ThisKey="ID", OtherKey="creatorID")]
		public EntitySet<icanTbl> icanTbls
		{
			get
			{
				return this._icanTbls;
			}
			set
			{
				this._icanTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_ideasLikeTbl", Storage="_ideasLikeTbls", ThisKey="ID", OtherKey="userID")]
		public EntitySet<ideasLikeTbl> ideasLikeTbls
		{
			get
			{
				return this._ideasLikeTbls;
			}
			set
			{
				this._ideasLikeTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_ideasTbl", Storage="_ideasTbls", ThisKey="ID", OtherKey="mUserID")]
		public EntitySet<ideasTbl> ideasTbls
		{
			get
			{
				return this._ideasTbls;
			}
			set
			{
				this._ideasTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_ioLikeTbl", Storage="_ioLikeTbls", ThisKey="ID", OtherKey="userID")]
		public EntitySet<ioLikeTbl> ioLikeTbls
		{
			get
			{
				return this._ioLikeTbls;
			}
			set
			{
				this._ioLikeTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_messageRecieverTbl", Storage="_messageRecieverTbls", ThisKey="ID", OtherKey="recieverID")]
		public EntitySet<messageRecieverTbl> messageRecieverTbls
		{
			get
			{
				return this._messageRecieverTbls;
			}
			set
			{
				this._messageRecieverTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_messageTbl", Storage="_messageTbls", ThisKey="ID", OtherKey="mUserID")]
		public EntitySet<messageTbl> messageTbls
		{
			get
			{
				return this._messageTbls;
			}
			set
			{
				this._messageTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_mUserOptionTbl", Storage="_mUserOptionTbls", ThisKey="ID", OtherKey="mUserID")]
		public EntitySet<mUserOptionTbl> mUserOptionTbls
		{
			get
			{
				return this._mUserOptionTbls;
			}
			set
			{
				this._mUserOptionTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_newsLikeTbl", Storage="_newsLikeTbls", ThisKey="ID", OtherKey="userID")]
		public EntitySet<newsLikeTbl> newsLikeTbls
		{
			get
			{
				return this._newsLikeTbls;
			}
			set
			{
				this._newsLikeTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_publicationLikeTbl", Storage="_publicationLikeTbls", ThisKey="ID", OtherKey="userID")]
		public EntitySet<publicationLikeTbl> publicationLikeTbls
		{
			get
			{
				return this._publicationLikeTbls;
			}
			set
			{
				this._publicationLikeTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_responseTbl", Storage="_responseTbls", ThisKey="ID", OtherKey="mUserID")]
		public EntitySet<responseTbl> responseTbls
		{
			get
			{
				return this._responseTbls;
			}
			set
			{
				this._responseTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_userSubGroupTbl", Storage="_userSubGroupTbls", ThisKey="ID", OtherKey="userID")]
		public EntitySet<userSubGroupTbl> userSubGroupTbls
		{
			get
			{
				return this._userSubGroupTbls;
			}
			set
			{
				this._userSubGroupTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_answerTbls(answerTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = this;
		}
		
		private void detach_answerTbls(answerTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = null;
		}
		
		private void attach_downloadLikeTbls(downloadLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = this;
		}
		
		private void detach_downloadLikeTbls(downloadLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = null;
		}
		
		private void attach_eventsLikeTbls(eventsLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = this;
		}
		
		private void detach_eventsLikeTbls(eventsLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = null;
		}
		
		private void attach_icanTbls(icanTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = this;
		}
		
		private void detach_icanTbls(icanTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = null;
		}
		
		private void attach_ideasLikeTbls(ideasLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = this;
		}
		
		private void detach_ideasLikeTbls(ideasLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = null;
		}
		
		private void attach_ideasTbls(ideasTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = this;
		}
		
		private void detach_ideasTbls(ideasTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = null;
		}
		
		private void attach_ioLikeTbls(ioLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = this;
		}
		
		private void detach_ioLikeTbls(ioLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = null;
		}
		
		private void attach_messageRecieverTbls(messageRecieverTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = this;
		}
		
		private void detach_messageRecieverTbls(messageRecieverTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = null;
		}
		
		private void attach_messageTbls(messageTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = this;
		}
		
		private void detach_messageTbls(messageTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = null;
		}
		
		private void attach_mUserOptionTbls(mUserOptionTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = this;
		}
		
		private void detach_mUserOptionTbls(mUserOptionTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = null;
		}
		
		private void attach_newsLikeTbls(newsLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = this;
		}
		
		private void detach_newsLikeTbls(newsLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = null;
		}
		
		private void attach_publicationLikeTbls(publicationLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = this;
		}
		
		private void detach_publicationLikeTbls(publicationLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = null;
		}
		
		private void attach_responseTbls(responseTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = this;
		}
		
		private void detach_responseTbls(responseTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = null;
		}
		
		private void attach_userSubGroupTbls(userSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = this;
		}
		
		private void detach_userSubGroupTbls(userSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.mUserTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.myIranContentTbl")]
	public partial class myIranContentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _myIranID;
		
		private int _contentType;
		
		private string _value;
		
		private long _pri;
		
		private System.DateTime _regDate;
		
		private EntityRef<myIranTbl> _myIranTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnmyIranIDChanging(long value);
    partial void OnmyIranIDChanged();
    partial void OncontentTypeChanging(int value);
    partial void OncontentTypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnpriChanging(long value);
    partial void OnpriChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public myIranContentTbl()
		{
			this._myIranTbl = default(EntityRef<myIranTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_myIranID", DbType="BigInt NOT NULL")]
		public long myIranID
		{
			get
			{
				return this._myIranID;
			}
			set
			{
				if ((this._myIranID != value))
				{
					if (this._myIranTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmyIranIDChanging(value);
					this.SendPropertyChanging();
					this._myIranID = value;
					this.SendPropertyChanged("myIranID");
					this.OnmyIranIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentType", DbType="Int NOT NULL")]
		public int contentType
		{
			get
			{
				return this._contentType;
			}
			set
			{
				if ((this._contentType != value))
				{
					this.OncontentTypeChanging(value);
					this.SendPropertyChanging();
					this._contentType = value;
					this.SendPropertyChanged("contentType");
					this.OncontentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pri", DbType="BigInt NOT NULL")]
		public long pri
		{
			get
			{
				return this._pri;
			}
			set
			{
				if ((this._pri != value))
				{
					this.OnpriChanging(value);
					this.SendPropertyChanging();
					this._pri = value;
					this.SendPropertyChanged("pri");
					this.OnpriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="myIranTbl_myIranContentTbl", Storage="_myIranTbl", ThisKey="myIranID", OtherKey="ID", IsForeignKey=true)]
		public myIranTbl myIranTbl
		{
			get
			{
				return this._myIranTbl.Entity;
			}
			set
			{
				myIranTbl previousValue = this._myIranTbl.Entity;
				if (((previousValue != value) 
							|| (this._myIranTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._myIranTbl.Entity = null;
						previousValue.myIranContentTbls.Remove(this);
					}
					this._myIranTbl.Entity = value;
					if ((value != null))
					{
						value.myIranContentTbls.Add(this);
						this._myIranID = value.ID;
					}
					else
					{
						this._myIranID = default(long);
					}
					this.SendPropertyChanged("myIranTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.myIranTagTbl")]
	public partial class myIranTagTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _tagID;
		
		private long _myIranID;
		
		private EntityRef<myIranTbl> _myIranTbl;
		
		private EntityRef<tagTbl> _tagTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OntagIDChanging(long value);
    partial void OntagIDChanged();
    partial void OnmyIranIDChanging(long value);
    partial void OnmyIranIDChanged();
    #endregion
		
		public myIranTagTbl()
		{
			this._myIranTbl = default(EntityRef<myIranTbl>);
			this._tagTbl = default(EntityRef<tagTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tagID", DbType="BigInt NOT NULL")]
		public long tagID
		{
			get
			{
				return this._tagID;
			}
			set
			{
				if ((this._tagID != value))
				{
					if (this._tagTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntagIDChanging(value);
					this.SendPropertyChanging();
					this._tagID = value;
					this.SendPropertyChanged("tagID");
					this.OntagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_myIranID", DbType="BigInt NOT NULL")]
		public long myIranID
		{
			get
			{
				return this._myIranID;
			}
			set
			{
				if ((this._myIranID != value))
				{
					if (this._myIranTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmyIranIDChanging(value);
					this.SendPropertyChanging();
					this._myIranID = value;
					this.SendPropertyChanged("myIranID");
					this.OnmyIranIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="myIranTbl_myIranTagTbl", Storage="_myIranTbl", ThisKey="myIranID", OtherKey="ID", IsForeignKey=true)]
		public myIranTbl myIranTbl
		{
			get
			{
				return this._myIranTbl.Entity;
			}
			set
			{
				myIranTbl previousValue = this._myIranTbl.Entity;
				if (((previousValue != value) 
							|| (this._myIranTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._myIranTbl.Entity = null;
						previousValue.myIranTagTbls.Remove(this);
					}
					this._myIranTbl.Entity = value;
					if ((value != null))
					{
						value.myIranTagTbls.Add(this);
						this._myIranID = value.ID;
					}
					else
					{
						this._myIranID = default(long);
					}
					this.SendPropertyChanged("myIranTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_myIranTagTbl", Storage="_tagTbl", ThisKey="tagID", OtherKey="ID", IsForeignKey=true)]
		public tagTbl tagTbl
		{
			get
			{
				return this._tagTbl.Entity;
			}
			set
			{
				tagTbl previousValue = this._tagTbl.Entity;
				if (((previousValue != value) 
							|| (this._tagTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tagTbl.Entity = null;
						previousValue.myIranTagTbls.Remove(this);
					}
					this._tagTbl.Entity = value;
					if ((value != null))
					{
						value.myIranTagTbls.Add(this);
						this._tagID = value.ID;
					}
					else
					{
						this._tagID = default(long);
					}
					this.SendPropertyChanged("tagTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.myIranTbl")]
	public partial class myIranTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _userID;
		
		private string _title;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private bool _isDone;
		
		private bool _isSendNotification;
		
		private string _notificationText;
		
		private System.Nullable<System.DateTime> _doneDate;
		
		private EntitySet<myIranContentTbl> _myIranContentTbls;
		
		private EntitySet<myIranTagTbl> _myIranTagTbls;
		
		private EntitySet<responseTbl> _responseTbls;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnuserIDChanging(long value);
    partial void OnuserIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    partial void OnisDoneChanging(bool value);
    partial void OnisDoneChanged();
    partial void OnisSendNotificationChanging(bool value);
    partial void OnisSendNotificationChanged();
    partial void OnnotificationTextChanging(string value);
    partial void OnnotificationTextChanged();
    partial void OndoneDateChanging(System.Nullable<System.DateTime> value);
    partial void OndoneDateChanged();
    #endregion
		
		public myIranTbl()
		{
			this._myIranContentTbls = new EntitySet<myIranContentTbl>(new Action<myIranContentTbl>(this.attach_myIranContentTbls), new Action<myIranContentTbl>(this.detach_myIranContentTbls));
			this._myIranTagTbls = new EntitySet<myIranTagTbl>(new Action<myIranTagTbl>(this.attach_myIranTagTbls), new Action<myIranTagTbl>(this.detach_myIranTagTbls));
			this._responseTbls = new EntitySet<responseTbl>(new Action<responseTbl>(this.attach_responseTbls), new Action<responseTbl>(this.detach_responseTbls));
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt NOT NULL")]
		public long userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="DateTime NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="DateTime NOT NULL")]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDone", DbType="Bit NOT NULL")]
		public bool isDone
		{
			get
			{
				return this._isDone;
			}
			set
			{
				if ((this._isDone != value))
				{
					this.OnisDoneChanging(value);
					this.SendPropertyChanging();
					this._isDone = value;
					this.SendPropertyChanged("isDone");
					this.OnisDoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSendNotification", DbType="Bit NOT NULL")]
		public bool isSendNotification
		{
			get
			{
				return this._isSendNotification;
			}
			set
			{
				if ((this._isSendNotification != value))
				{
					this.OnisSendNotificationChanging(value);
					this.SendPropertyChanging();
					this._isSendNotification = value;
					this.SendPropertyChanged("isSendNotification");
					this.OnisSendNotificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notificationText", DbType="NVarChar(250)")]
		public string notificationText
		{
			get
			{
				return this._notificationText;
			}
			set
			{
				if ((this._notificationText != value))
				{
					this.OnnotificationTextChanging(value);
					this.SendPropertyChanging();
					this._notificationText = value;
					this.SendPropertyChanged("notificationText");
					this.OnnotificationTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doneDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> doneDate
		{
			get
			{
				return this._doneDate;
			}
			set
			{
				if ((this._doneDate != value))
				{
					this.OndoneDateChanging(value);
					this.SendPropertyChanging();
					this._doneDate = value;
					this.SendPropertyChanged("doneDate");
					this.OndoneDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="myIranTbl_myIranContentTbl", Storage="_myIranContentTbls", ThisKey="ID", OtherKey="myIranID")]
		public EntitySet<myIranContentTbl> myIranContentTbls
		{
			get
			{
				return this._myIranContentTbls;
			}
			set
			{
				this._myIranContentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="myIranTbl_myIranTagTbl", Storage="_myIranTagTbls", ThisKey="ID", OtherKey="myIranID")]
		public EntitySet<myIranTagTbl> myIranTagTbls
		{
			get
			{
				return this._myIranTagTbls;
			}
			set
			{
				this._myIranTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="myIranTbl_responseTbl", Storage="_responseTbls", ThisKey="ID", OtherKey="myIranID")]
		public EntitySet<responseTbl> responseTbls
		{
			get
			{
				return this._responseTbls;
			}
			set
			{
				this._responseTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_myIranTbl", Storage="_userTbl", ThisKey="userID", OtherKey="ID", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.myIranTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.myIranTbls.Add(this);
						this._userID = value.ID;
					}
					else
					{
						this._userID = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_myIranContentTbls(myIranContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.myIranTbl = this;
		}
		
		private void detach_myIranContentTbls(myIranContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.myIranTbl = null;
		}
		
		private void attach_myIranTagTbls(myIranTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.myIranTbl = this;
		}
		
		private void detach_myIranTagTbls(myIranTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.myIranTbl = null;
		}
		
		private void attach_responseTbls(responseTbl entity)
		{
			this.SendPropertyChanging();
			entity.myIranTbl = this;
		}
		
		private void detach_responseTbls(responseTbl entity)
		{
			this.SendPropertyChanging();
			entity.myIranTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.newsCommentTbl")]
	public partial class newsCommentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _newsID;
		
		private System.Nullable<long> _mUserID;
		
		private string _fullName;
		
		private string _mobile;
		
		private string _email;
		
		private string _text;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private System.Nullable<long> _userID;
		
		private EntityRef<newsTbl> _newsTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnnewsIDChanging(long value);
    partial void OnnewsIDChanged();
    partial void OnmUserIDChanging(System.Nullable<long> value);
    partial void OnmUserIDChanged();
    partial void OnfullNameChanging(string value);
    partial void OnfullNameChanged();
    partial void OnmobileChanging(string value);
    partial void OnmobileChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    #endregion
		
		public newsCommentTbl()
		{
			this._newsTbl = default(EntityRef<newsTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newsID", DbType="BigInt NOT NULL")]
		public long newsID
		{
			get
			{
				return this._newsID;
			}
			set
			{
				if ((this._newsID != value))
				{
					if (this._newsTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnewsIDChanging(value);
					this.SendPropertyChanging();
					this._newsID = value;
					this.SendPropertyChanged("newsID");
					this.OnnewsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt")]
		public System.Nullable<long> mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string fullName
		{
			get
			{
				return this._fullName;
			}
			set
			{
				if ((this._fullName != value))
				{
					this.OnfullNameChanging(value);
					this.SendPropertyChanging();
					this._fullName = value;
					this.SendPropertyChanged("fullName");
					this.OnfullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobile", DbType="NVarChar(12)")]
		public string mobile
		{
			get
			{
				return this._mobile;
			}
			set
			{
				if ((this._mobile != value))
				{
					this.OnmobileChanging(value);
					this.SendPropertyChanging();
					this._mobile = value;
					this.SendPropertyChanged("mobile");
					this.OnmobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(150)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="newsTbl_newsCommentTbl", Storage="_newsTbl", ThisKey="newsID", OtherKey="ID", IsForeignKey=true)]
		public newsTbl newsTbl
		{
			get
			{
				return this._newsTbl.Entity;
			}
			set
			{
				newsTbl previousValue = this._newsTbl.Entity;
				if (((previousValue != value) 
							|| (this._newsTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._newsTbl.Entity = null;
						previousValue.newsCommentTbls.Remove(this);
					}
					this._newsTbl.Entity = value;
					if ((value != null))
					{
						value.newsCommentTbls.Add(this);
						this._newsID = value.ID;
					}
					else
					{
						this._newsID = default(long);
					}
					this.SendPropertyChanged("newsTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.newsContentTbl")]
	public partial class newsContentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _newsID;
		
		private int _contentType;
		
		private string _value;
		
		private long _pri;
		
		private System.DateTime _regDate;
		
		private EntityRef<newsTbl> _newsTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnnewsIDChanging(long value);
    partial void OnnewsIDChanged();
    partial void OncontentTypeChanging(int value);
    partial void OncontentTypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnpriChanging(long value);
    partial void OnpriChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public newsContentTbl()
		{
			this._newsTbl = default(EntityRef<newsTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newsID", DbType="BigInt NOT NULL")]
		public long newsID
		{
			get
			{
				return this._newsID;
			}
			set
			{
				if ((this._newsID != value))
				{
					if (this._newsTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnewsIDChanging(value);
					this.SendPropertyChanging();
					this._newsID = value;
					this.SendPropertyChanged("newsID");
					this.OnnewsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentType", DbType="Int NOT NULL")]
		public int contentType
		{
			get
			{
				return this._contentType;
			}
			set
			{
				if ((this._contentType != value))
				{
					this.OncontentTypeChanging(value);
					this.SendPropertyChanging();
					this._contentType = value;
					this.SendPropertyChanged("contentType");
					this.OncontentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pri", DbType="BigInt NOT NULL")]
		public long pri
		{
			get
			{
				return this._pri;
			}
			set
			{
				if ((this._pri != value))
				{
					this.OnpriChanging(value);
					this.SendPropertyChanging();
					this._pri = value;
					this.SendPropertyChanged("pri");
					this.OnpriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="newsTbl_newsContentTbl", Storage="_newsTbl", ThisKey="newsID", OtherKey="ID", IsForeignKey=true)]
		public newsTbl newsTbl
		{
			get
			{
				return this._newsTbl.Entity;
			}
			set
			{
				newsTbl previousValue = this._newsTbl.Entity;
				if (((previousValue != value) 
							|| (this._newsTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._newsTbl.Entity = null;
						previousValue.newsContentTbls.Remove(this);
					}
					this._newsTbl.Entity = value;
					if ((value != null))
					{
						value.newsContentTbls.Add(this);
						this._newsID = value.ID;
					}
					else
					{
						this._newsID = default(long);
					}
					this.SendPropertyChanged("newsTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.newsLikeTbl")]
	public partial class newsLikeTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _newsID;
		
		private long _userID;
		
		private bool _isLike;
		
		private System.DateTime _regDate;
		
		private EntityRef<mUserTbl> _mUserTbl;
		
		private EntityRef<newsTbl> _newsTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnnewsIDChanging(long value);
    partial void OnnewsIDChanged();
    partial void OnuserIDChanging(long value);
    partial void OnuserIDChanged();
    partial void OnisLikeChanging(bool value);
    partial void OnisLikeChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public newsLikeTbl()
		{
			this._mUserTbl = default(EntityRef<mUserTbl>);
			this._newsTbl = default(EntityRef<newsTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newsID", DbType="BigInt NOT NULL")]
		public long newsID
		{
			get
			{
				return this._newsID;
			}
			set
			{
				if ((this._newsID != value))
				{
					if (this._newsTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnewsIDChanging(value);
					this.SendPropertyChanging();
					this._newsID = value;
					this.SendPropertyChanged("newsID");
					this.OnnewsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt NOT NULL")]
		public long userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._mUserTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isLike", DbType="Bit NOT NULL")]
		public bool isLike
		{
			get
			{
				return this._isLike;
			}
			set
			{
				if ((this._isLike != value))
				{
					this.OnisLikeChanging(value);
					this.SendPropertyChanging();
					this._isLike = value;
					this.SendPropertyChanged("isLike");
					this.OnisLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_newsLikeTbl", Storage="_mUserTbl", ThisKey="userID", OtherKey="ID", IsForeignKey=true)]
		public mUserTbl mUserTbl
		{
			get
			{
				return this._mUserTbl.Entity;
			}
			set
			{
				mUserTbl previousValue = this._mUserTbl.Entity;
				if (((previousValue != value) 
							|| (this._mUserTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mUserTbl.Entity = null;
						previousValue.newsLikeTbls.Remove(this);
					}
					this._mUserTbl.Entity = value;
					if ((value != null))
					{
						value.newsLikeTbls.Add(this);
						this._userID = value.ID;
					}
					else
					{
						this._userID = default(long);
					}
					this.SendPropertyChanged("mUserTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="newsTbl_newsLikeTbl", Storage="_newsTbl", ThisKey="newsID", OtherKey="ID", IsForeignKey=true)]
		public newsTbl newsTbl
		{
			get
			{
				return this._newsTbl.Entity;
			}
			set
			{
				newsTbl previousValue = this._newsTbl.Entity;
				if (((previousValue != value) 
							|| (this._newsTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._newsTbl.Entity = null;
						previousValue.newsLikeTbls.Remove(this);
					}
					this._newsTbl.Entity = value;
					if ((value != null))
					{
						value.newsLikeTbls.Add(this);
						this._newsID = value.ID;
					}
					else
					{
						this._newsID = default(long);
					}
					this.SendPropertyChanged("newsTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.newsSubGroupTbl")]
	public partial class newsSubGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _newsID;
		
		private long _subGroupID;
		
		private EntityRef<newsTbl> _newsTbl;
		
		private EntityRef<SubGroupTbl> _SubGroupTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnnewsIDChanging(long value);
    partial void OnnewsIDChanged();
    partial void OnsubGroupIDChanging(long value);
    partial void OnsubGroupIDChanged();
    #endregion
		
		public newsSubGroupTbl()
		{
			this._newsTbl = default(EntityRef<newsTbl>);
			this._SubGroupTbl = default(EntityRef<SubGroupTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newsID", DbType="BigInt NOT NULL")]
		public long newsID
		{
			get
			{
				return this._newsID;
			}
			set
			{
				if ((this._newsID != value))
				{
					if (this._newsTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnewsIDChanging(value);
					this.SendPropertyChanging();
					this._newsID = value;
					this.SendPropertyChanged("newsID");
					this.OnnewsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subGroupID", DbType="BigInt NOT NULL")]
		public long subGroupID
		{
			get
			{
				return this._subGroupID;
			}
			set
			{
				if ((this._subGroupID != value))
				{
					if (this._SubGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubGroupIDChanging(value);
					this.SendPropertyChanging();
					this._subGroupID = value;
					this.SendPropertyChanged("subGroupID");
					this.OnsubGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="newsTbl_newsSubGroupTbl", Storage="_newsTbl", ThisKey="newsID", OtherKey="ID", IsForeignKey=true)]
		public newsTbl newsTbl
		{
			get
			{
				return this._newsTbl.Entity;
			}
			set
			{
				newsTbl previousValue = this._newsTbl.Entity;
				if (((previousValue != value) 
							|| (this._newsTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._newsTbl.Entity = null;
						previousValue.newsSubGroupTbls.Remove(this);
					}
					this._newsTbl.Entity = value;
					if ((value != null))
					{
						value.newsSubGroupTbls.Add(this);
						this._newsID = value.ID;
					}
					else
					{
						this._newsID = default(long);
					}
					this.SendPropertyChanged("newsTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_newsSubGroupTbl", Storage="_SubGroupTbl", ThisKey="subGroupID", OtherKey="ID", IsForeignKey=true)]
		public SubGroupTbl SubGroupTbl
		{
			get
			{
				return this._SubGroupTbl.Entity;
			}
			set
			{
				SubGroupTbl previousValue = this._SubGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._SubGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubGroupTbl.Entity = null;
						previousValue.newsSubGroupTbls.Remove(this);
					}
					this._SubGroupTbl.Entity = value;
					if ((value != null))
					{
						value.newsSubGroupTbls.Add(this);
						this._subGroupID = value.ID;
					}
					else
					{
						this._subGroupID = default(long);
					}
					this.SendPropertyChanged("SubGroupTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.newsTagTbl")]
	public partial class newsTagTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _tagID;
		
		private long _newsID;
		
		private EntityRef<newsTbl> _newsTbl;
		
		private EntityRef<tagTbl> _tagTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OntagIDChanging(long value);
    partial void OntagIDChanged();
    partial void OnnewsIDChanging(long value);
    partial void OnnewsIDChanged();
    #endregion
		
		public newsTagTbl()
		{
			this._newsTbl = default(EntityRef<newsTbl>);
			this._tagTbl = default(EntityRef<tagTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tagID", DbType="BigInt NOT NULL")]
		public long tagID
		{
			get
			{
				return this._tagID;
			}
			set
			{
				if ((this._tagID != value))
				{
					if (this._tagTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntagIDChanging(value);
					this.SendPropertyChanging();
					this._tagID = value;
					this.SendPropertyChanged("tagID");
					this.OntagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newsID", DbType="BigInt NOT NULL")]
		public long newsID
		{
			get
			{
				return this._newsID;
			}
			set
			{
				if ((this._newsID != value))
				{
					if (this._newsTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnewsIDChanging(value);
					this.SendPropertyChanging();
					this._newsID = value;
					this.SendPropertyChanged("newsID");
					this.OnnewsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="newsTbl_newsTagTbl", Storage="_newsTbl", ThisKey="newsID", OtherKey="ID", IsForeignKey=true)]
		public newsTbl newsTbl
		{
			get
			{
				return this._newsTbl.Entity;
			}
			set
			{
				newsTbl previousValue = this._newsTbl.Entity;
				if (((previousValue != value) 
							|| (this._newsTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._newsTbl.Entity = null;
						previousValue.newsTagTbls.Remove(this);
					}
					this._newsTbl.Entity = value;
					if ((value != null))
					{
						value.newsTagTbls.Add(this);
						this._newsID = value.ID;
					}
					else
					{
						this._newsID = default(long);
					}
					this.SendPropertyChanged("newsTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_newsTagTbl", Storage="_tagTbl", ThisKey="tagID", OtherKey="ID", IsForeignKey=true)]
		public tagTbl tagTbl
		{
			get
			{
				return this._tagTbl.Entity;
			}
			set
			{
				tagTbl previousValue = this._tagTbl.Entity;
				if (((previousValue != value) 
							|| (this._tagTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tagTbl.Entity = null;
						previousValue.newsTagTbls.Remove(this);
					}
					this._tagTbl.Entity = value;
					if ((value != null))
					{
						value.newsTagTbls.Add(this);
						this._tagID = value.ID;
					}
					else
					{
						this._tagID = default(long);
					}
					this.SendPropertyChanged("tagTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.newsTbl")]
	public partial class newsTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _userID;
		
		private System.Nullable<long> _mUserID;
		
		private string _title;
		
		private bool _isPublished;
		
		private int _viewCount;
		
		private System.DateTime _publishDate;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private EntitySet<newsCommentTbl> _newsCommentTbls;
		
		private EntitySet<newsContentTbl> _newsContentTbls;
		
		private EntitySet<newsLikeTbl> _newsLikeTbls;
		
		private EntitySet<newsSubGroupTbl> _newsSubGroupTbls;
		
		private EntitySet<newsTagTbl> _newsTagTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    partial void OnmUserIDChanging(System.Nullable<long> value);
    partial void OnmUserIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnisPublishedChanging(bool value);
    partial void OnisPublishedChanged();
    partial void OnviewCountChanging(int value);
    partial void OnviewCountChanged();
    partial void OnpublishDateChanging(System.DateTime value);
    partial void OnpublishDateChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public newsTbl()
		{
			this._newsCommentTbls = new EntitySet<newsCommentTbl>(new Action<newsCommentTbl>(this.attach_newsCommentTbls), new Action<newsCommentTbl>(this.detach_newsCommentTbls));
			this._newsContentTbls = new EntitySet<newsContentTbl>(new Action<newsContentTbl>(this.attach_newsContentTbls), new Action<newsContentTbl>(this.detach_newsContentTbls));
			this._newsLikeTbls = new EntitySet<newsLikeTbl>(new Action<newsLikeTbl>(this.attach_newsLikeTbls), new Action<newsLikeTbl>(this.detach_newsLikeTbls));
			this._newsSubGroupTbls = new EntitySet<newsSubGroupTbl>(new Action<newsSubGroupTbl>(this.attach_newsSubGroupTbls), new Action<newsSubGroupTbl>(this.detach_newsSubGroupTbls));
			this._newsTagTbls = new EntitySet<newsTagTbl>(new Action<newsTagTbl>(this.attach_newsTagTbls), new Action<newsTagTbl>(this.detach_newsTagTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt")]
		public System.Nullable<long> mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPublished", DbType="Bit NOT NULL")]
		public bool isPublished
		{
			get
			{
				return this._isPublished;
			}
			set
			{
				if ((this._isPublished != value))
				{
					this.OnisPublishedChanging(value);
					this.SendPropertyChanging();
					this._isPublished = value;
					this.SendPropertyChanged("isPublished");
					this.OnisPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_viewCount", DbType="Int NOT NULL")]
		public int viewCount
		{
			get
			{
				return this._viewCount;
			}
			set
			{
				if ((this._viewCount != value))
				{
					this.OnviewCountChanging(value);
					this.SendPropertyChanging();
					this._viewCount = value;
					this.SendPropertyChanged("viewCount");
					this.OnviewCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publishDate", DbType="DateTime NOT NULL")]
		public System.DateTime publishDate
		{
			get
			{
				return this._publishDate;
			}
			set
			{
				if ((this._publishDate != value))
				{
					this.OnpublishDateChanging(value);
					this.SendPropertyChanging();
					this._publishDate = value;
					this.SendPropertyChanged("publishDate");
					this.OnpublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="newsTbl_newsCommentTbl", Storage="_newsCommentTbls", ThisKey="ID", OtherKey="newsID")]
		public EntitySet<newsCommentTbl> newsCommentTbls
		{
			get
			{
				return this._newsCommentTbls;
			}
			set
			{
				this._newsCommentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="newsTbl_newsContentTbl", Storage="_newsContentTbls", ThisKey="ID", OtherKey="newsID")]
		public EntitySet<newsContentTbl> newsContentTbls
		{
			get
			{
				return this._newsContentTbls;
			}
			set
			{
				this._newsContentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="newsTbl_newsLikeTbl", Storage="_newsLikeTbls", ThisKey="ID", OtherKey="newsID")]
		public EntitySet<newsLikeTbl> newsLikeTbls
		{
			get
			{
				return this._newsLikeTbls;
			}
			set
			{
				this._newsLikeTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="newsTbl_newsSubGroupTbl", Storage="_newsSubGroupTbls", ThisKey="ID", OtherKey="newsID")]
		public EntitySet<newsSubGroupTbl> newsSubGroupTbls
		{
			get
			{
				return this._newsSubGroupTbls;
			}
			set
			{
				this._newsSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="newsTbl_newsTagTbl", Storage="_newsTagTbls", ThisKey="ID", OtherKey="newsID")]
		public EntitySet<newsTagTbl> newsTagTbls
		{
			get
			{
				return this._newsTagTbls;
			}
			set
			{
				this._newsTagTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_newsCommentTbls(newsCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.newsTbl = this;
		}
		
		private void detach_newsCommentTbls(newsCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.newsTbl = null;
		}
		
		private void attach_newsContentTbls(newsContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.newsTbl = this;
		}
		
		private void detach_newsContentTbls(newsContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.newsTbl = null;
		}
		
		private void attach_newsLikeTbls(newsLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.newsTbl = this;
		}
		
		private void detach_newsLikeTbls(newsLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.newsTbl = null;
		}
		
		private void attach_newsSubGroupTbls(newsSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.newsTbl = this;
		}
		
		private void detach_newsSubGroupTbls(newsSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.newsTbl = null;
		}
		
		private void attach_newsTagTbls(newsTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.newsTbl = this;
		}
		
		private void detach_newsTagTbls(newsTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.newsTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.optionTbl")]
	public partial class optionTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _pollID;
		
		private string _text;
		
		private System.DateTime _regDate;
		
		private EntitySet<mUserOptionTbl> _mUserOptionTbls;
		
		private EntityRef<pollTbl> _pollTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnpollIDChanging(long value);
    partial void OnpollIDChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public optionTbl()
		{
			this._mUserOptionTbls = new EntitySet<mUserOptionTbl>(new Action<mUserOptionTbl>(this.attach_mUserOptionTbls), new Action<mUserOptionTbl>(this.detach_mUserOptionTbls));
			this._pollTbl = default(EntityRef<pollTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pollID", DbType="BigInt NOT NULL")]
		public long pollID
		{
			get
			{
				return this._pollID;
			}
			set
			{
				if ((this._pollID != value))
				{
					if (this._pollTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpollIDChanging(value);
					this.SendPropertyChanging();
					this._pollID = value;
					this.SendPropertyChanged("pollID");
					this.OnpollIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="optionTbl_mUserOptionTbl", Storage="_mUserOptionTbls", ThisKey="ID", OtherKey="optionID")]
		public EntitySet<mUserOptionTbl> mUserOptionTbls
		{
			get
			{
				return this._mUserOptionTbls;
			}
			set
			{
				this._mUserOptionTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pollTbl_optionTbl", Storage="_pollTbl", ThisKey="pollID", OtherKey="ID", IsForeignKey=true)]
		public pollTbl pollTbl
		{
			get
			{
				return this._pollTbl.Entity;
			}
			set
			{
				pollTbl previousValue = this._pollTbl.Entity;
				if (((previousValue != value) 
							|| (this._pollTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._pollTbl.Entity = null;
						previousValue.optionTbls.Remove(this);
					}
					this._pollTbl.Entity = value;
					if ((value != null))
					{
						value.optionTbls.Add(this);
						this._pollID = value.ID;
					}
					else
					{
						this._pollID = default(long);
					}
					this.SendPropertyChanged("pollTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_mUserOptionTbls(mUserOptionTbl entity)
		{
			this.SendPropertyChanging();
			entity.optionTbl = this;
		}
		
		private void detach_mUserOptionTbls(mUserOptionTbl entity)
		{
			this.SendPropertyChanging();
			entity.optionTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.packetUploadServiceTbl")]
	public partial class packetUploadServiceTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _token;
		
		private string _data;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OntokenChanging(string value);
    partial void OntokenChanged();
    partial void OndataChanging(string value);
    partial void OndataChanged();
    #endregion
		
		public packetUploadServiceTbl()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_token", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string token
		{
			get
			{
				return this._token;
			}
			set
			{
				if ((this._token != value))
				{
					this.OntokenChanging(value);
					this.SendPropertyChanging();
					this._token = value;
					this.SendPropertyChanged("token");
					this.OntokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string data
		{
			get
			{
				return this._data;
			}
			set
			{
				if ((this._data != value))
				{
					this.OndataChanging(value);
					this.SendPropertyChanging();
					this._data = value;
					this.SendPropertyChanged("data");
					this.OndataChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.partnersTbl")]
	public partial class partnersTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _name;
		
		private string _family;
		
		private string _innerTell;
		
		private string _email;
		
		private string _level;
		
		private string _registrationmobile;
		
		private string _optionalmobile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnfamilyChanging(string value);
    partial void OnfamilyChanged();
    partial void OninnerTellChanging(string value);
    partial void OninnerTellChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnlevelChanging(string value);
    partial void OnlevelChanged();
    partial void OnregistrationmobileChanging(string value);
    partial void OnregistrationmobileChanged();
    partial void OnoptionalmobileChanging(string value);
    partial void OnoptionalmobileChanged();
    #endregion
		
		public partnersTbl()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(300)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_family", DbType="NVarChar(300)")]
		public string family
		{
			get
			{
				return this._family;
			}
			set
			{
				if ((this._family != value))
				{
					this.OnfamilyChanging(value);
					this.SendPropertyChanging();
					this._family = value;
					this.SendPropertyChanged("family");
					this.OnfamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_innerTell", DbType="NVarChar(300)")]
		public string innerTell
		{
			get
			{
				return this._innerTell;
			}
			set
			{
				if ((this._innerTell != value))
				{
					this.OninnerTellChanging(value);
					this.SendPropertyChanging();
					this._innerTell = value;
					this.SendPropertyChanged("innerTell");
					this.OninnerTellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(300)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[level]", Storage="_level", DbType="NVarChar(300)")]
		public string level
		{
			get
			{
				return this._level;
			}
			set
			{
				if ((this._level != value))
				{
					this.OnlevelChanging(value);
					this.SendPropertyChanging();
					this._level = value;
					this.SendPropertyChanged("level");
					this.OnlevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registrationmobile", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string registrationmobile
		{
			get
			{
				return this._registrationmobile;
			}
			set
			{
				if ((this._registrationmobile != value))
				{
					this.OnregistrationmobileChanging(value);
					this.SendPropertyChanging();
					this._registrationmobile = value;
					this.SendPropertyChanged("registrationmobile");
					this.OnregistrationmobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_optionalmobile", DbType="NVarChar(300)")]
		public string optionalmobile
		{
			get
			{
				return this._optionalmobile;
			}
			set
			{
				if ((this._optionalmobile != value))
				{
					this.OnoptionalmobileChanging(value);
					this.SendPropertyChanging();
					this._optionalmobile = value;
					this.SendPropertyChanged("optionalmobile");
					this.OnoptionalmobileChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pollContentTbl")]
	public partial class pollContentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _pollID;
		
		private int _contentType;
		
		private string _value;
		
		private long _pri;
		
		private System.DateTime _regDate;
		
		private EntityRef<pollTbl> _pollTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnpollIDChanging(long value);
    partial void OnpollIDChanged();
    partial void OncontentTypeChanging(int value);
    partial void OncontentTypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnpriChanging(long value);
    partial void OnpriChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public pollContentTbl()
		{
			this._pollTbl = default(EntityRef<pollTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pollID", DbType="BigInt NOT NULL")]
		public long pollID
		{
			get
			{
				return this._pollID;
			}
			set
			{
				if ((this._pollID != value))
				{
					if (this._pollTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpollIDChanging(value);
					this.SendPropertyChanging();
					this._pollID = value;
					this.SendPropertyChanged("pollID");
					this.OnpollIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentType", DbType="Int NOT NULL")]
		public int contentType
		{
			get
			{
				return this._contentType;
			}
			set
			{
				if ((this._contentType != value))
				{
					this.OncontentTypeChanging(value);
					this.SendPropertyChanging();
					this._contentType = value;
					this.SendPropertyChanged("contentType");
					this.OncontentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pri", DbType="BigInt NOT NULL")]
		public long pri
		{
			get
			{
				return this._pri;
			}
			set
			{
				if ((this._pri != value))
				{
					this.OnpriChanging(value);
					this.SendPropertyChanging();
					this._pri = value;
					this.SendPropertyChanged("pri");
					this.OnpriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pollTbl_pollContentTbl", Storage="_pollTbl", ThisKey="pollID", OtherKey="ID", IsForeignKey=true)]
		public pollTbl pollTbl
		{
			get
			{
				return this._pollTbl.Entity;
			}
			set
			{
				pollTbl previousValue = this._pollTbl.Entity;
				if (((previousValue != value) 
							|| (this._pollTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._pollTbl.Entity = null;
						previousValue.pollContentTbls.Remove(this);
					}
					this._pollTbl.Entity = value;
					if ((value != null))
					{
						value.pollContentTbls.Add(this);
						this._pollID = value.ID;
					}
					else
					{
						this._pollID = default(long);
					}
					this.SendPropertyChanged("pollTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pollSubGroupTbl")]
	public partial class pollSubGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _pollID;
		
		private long _subGroupID;
		
		private EntityRef<pollTbl> _pollTbl;
		
		private EntityRef<SubGroupTbl> _SubGroupTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnpollIDChanging(long value);
    partial void OnpollIDChanged();
    partial void OnsubGroupIDChanging(long value);
    partial void OnsubGroupIDChanged();
    #endregion
		
		public pollSubGroupTbl()
		{
			this._pollTbl = default(EntityRef<pollTbl>);
			this._SubGroupTbl = default(EntityRef<SubGroupTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pollID", DbType="BigInt NOT NULL")]
		public long pollID
		{
			get
			{
				return this._pollID;
			}
			set
			{
				if ((this._pollID != value))
				{
					if (this._pollTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpollIDChanging(value);
					this.SendPropertyChanging();
					this._pollID = value;
					this.SendPropertyChanged("pollID");
					this.OnpollIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subGroupID", DbType="BigInt NOT NULL")]
		public long subGroupID
		{
			get
			{
				return this._subGroupID;
			}
			set
			{
				if ((this._subGroupID != value))
				{
					if (this._SubGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubGroupIDChanging(value);
					this.SendPropertyChanging();
					this._subGroupID = value;
					this.SendPropertyChanged("subGroupID");
					this.OnsubGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pollTbl_pollSubGroupTbl", Storage="_pollTbl", ThisKey="pollID", OtherKey="ID", IsForeignKey=true)]
		public pollTbl pollTbl
		{
			get
			{
				return this._pollTbl.Entity;
			}
			set
			{
				pollTbl previousValue = this._pollTbl.Entity;
				if (((previousValue != value) 
							|| (this._pollTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._pollTbl.Entity = null;
						previousValue.pollSubGroupTbls.Remove(this);
					}
					this._pollTbl.Entity = value;
					if ((value != null))
					{
						value.pollSubGroupTbls.Add(this);
						this._pollID = value.ID;
					}
					else
					{
						this._pollID = default(long);
					}
					this.SendPropertyChanged("pollTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_pollSubGroupTbl", Storage="_SubGroupTbl", ThisKey="subGroupID", OtherKey="ID", IsForeignKey=true)]
		public SubGroupTbl SubGroupTbl
		{
			get
			{
				return this._SubGroupTbl.Entity;
			}
			set
			{
				SubGroupTbl previousValue = this._SubGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._SubGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubGroupTbl.Entity = null;
						previousValue.pollSubGroupTbls.Remove(this);
					}
					this._SubGroupTbl.Entity = value;
					if ((value != null))
					{
						value.pollSubGroupTbls.Add(this);
						this._subGroupID = value.ID;
					}
					else
					{
						this._subGroupID = default(long);
					}
					this.SendPropertyChanged("SubGroupTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pollTagTbl")]
	public partial class pollTagTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _tagID;
		
		private long _pollID;
		
		private EntityRef<pollTbl> _pollTbl;
		
		private EntityRef<tagTbl> _tagTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OntagIDChanging(long value);
    partial void OntagIDChanged();
    partial void OnpollIDChanging(long value);
    partial void OnpollIDChanged();
    #endregion
		
		public pollTagTbl()
		{
			this._pollTbl = default(EntityRef<pollTbl>);
			this._tagTbl = default(EntityRef<tagTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tagID", DbType="BigInt NOT NULL")]
		public long tagID
		{
			get
			{
				return this._tagID;
			}
			set
			{
				if ((this._tagID != value))
				{
					if (this._tagTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntagIDChanging(value);
					this.SendPropertyChanging();
					this._tagID = value;
					this.SendPropertyChanged("tagID");
					this.OntagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pollID", DbType="BigInt NOT NULL")]
		public long pollID
		{
			get
			{
				return this._pollID;
			}
			set
			{
				if ((this._pollID != value))
				{
					if (this._pollTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpollIDChanging(value);
					this.SendPropertyChanging();
					this._pollID = value;
					this.SendPropertyChanged("pollID");
					this.OnpollIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pollTbl_pollTagTbl", Storage="_pollTbl", ThisKey="pollID", OtherKey="ID", IsForeignKey=true)]
		public pollTbl pollTbl
		{
			get
			{
				return this._pollTbl.Entity;
			}
			set
			{
				pollTbl previousValue = this._pollTbl.Entity;
				if (((previousValue != value) 
							|| (this._pollTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._pollTbl.Entity = null;
						previousValue.pollTagTbls.Remove(this);
					}
					this._pollTbl.Entity = value;
					if ((value != null))
					{
						value.pollTagTbls.Add(this);
						this._pollID = value.ID;
					}
					else
					{
						this._pollID = default(long);
					}
					this.SendPropertyChanged("pollTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_pollTagTbl", Storage="_tagTbl", ThisKey="tagID", OtherKey="ID", IsForeignKey=true)]
		public tagTbl tagTbl
		{
			get
			{
				return this._tagTbl.Entity;
			}
			set
			{
				tagTbl previousValue = this._tagTbl.Entity;
				if (((previousValue != value) 
							|| (this._tagTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tagTbl.Entity = null;
						previousValue.pollTagTbls.Remove(this);
					}
					this._tagTbl.Entity = value;
					if ((value != null))
					{
						value.pollTagTbls.Add(this);
						this._tagID = value.ID;
					}
					else
					{
						this._tagID = default(long);
					}
					this.SendPropertyChanged("tagTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pollTbl")]
	public partial class pollTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _userID;
		
		private int _viewCount;
		
		private bool _isBlock;
		
		private bool _isFinished;
		
		private System.DateTime _regDate;
		
		private System.DateTime _finishedDate;
		
		private System.DateTime _startDate;
		
		private EntitySet<optionTbl> _optionTbls;
		
		private EntitySet<pollContentTbl> _pollContentTbls;
		
		private EntitySet<pollSubGroupTbl> _pollSubGroupTbls;
		
		private EntitySet<pollTagTbl> _pollTagTbls;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnuserIDChanging(long value);
    partial void OnuserIDChanged();
    partial void OnviewCountChanging(int value);
    partial void OnviewCountChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnisFinishedChanging(bool value);
    partial void OnisFinishedChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnfinishedDateChanging(System.DateTime value);
    partial void OnfinishedDateChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    #endregion
		
		public pollTbl()
		{
			this._optionTbls = new EntitySet<optionTbl>(new Action<optionTbl>(this.attach_optionTbls), new Action<optionTbl>(this.detach_optionTbls));
			this._pollContentTbls = new EntitySet<pollContentTbl>(new Action<pollContentTbl>(this.attach_pollContentTbls), new Action<pollContentTbl>(this.detach_pollContentTbls));
			this._pollSubGroupTbls = new EntitySet<pollSubGroupTbl>(new Action<pollSubGroupTbl>(this.attach_pollSubGroupTbls), new Action<pollSubGroupTbl>(this.detach_pollSubGroupTbls));
			this._pollTagTbls = new EntitySet<pollTagTbl>(new Action<pollTagTbl>(this.attach_pollTagTbls), new Action<pollTagTbl>(this.detach_pollTagTbls));
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt NOT NULL")]
		public long userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_viewCount", DbType="Int NOT NULL")]
		public int viewCount
		{
			get
			{
				return this._viewCount;
			}
			set
			{
				if ((this._viewCount != value))
				{
					this.OnviewCountChanging(value);
					this.SendPropertyChanging();
					this._viewCount = value;
					this.SendPropertyChanged("viewCount");
					this.OnviewCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFinished", DbType="Bit NOT NULL")]
		public bool isFinished
		{
			get
			{
				return this._isFinished;
			}
			set
			{
				if ((this._isFinished != value))
				{
					this.OnisFinishedChanging(value);
					this.SendPropertyChanging();
					this._isFinished = value;
					this.SendPropertyChanged("isFinished");
					this.OnisFinishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finishedDate", DbType="DateTime NOT NULL")]
		public System.DateTime finishedDate
		{
			get
			{
				return this._finishedDate;
			}
			set
			{
				if ((this._finishedDate != value))
				{
					this.OnfinishedDateChanging(value);
					this.SendPropertyChanging();
					this._finishedDate = value;
					this.SendPropertyChanged("finishedDate");
					this.OnfinishedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="DateTime NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pollTbl_optionTbl", Storage="_optionTbls", ThisKey="ID", OtherKey="pollID")]
		public EntitySet<optionTbl> optionTbls
		{
			get
			{
				return this._optionTbls;
			}
			set
			{
				this._optionTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pollTbl_pollContentTbl", Storage="_pollContentTbls", ThisKey="ID", OtherKey="pollID")]
		public EntitySet<pollContentTbl> pollContentTbls
		{
			get
			{
				return this._pollContentTbls;
			}
			set
			{
				this._pollContentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pollTbl_pollSubGroupTbl", Storage="_pollSubGroupTbls", ThisKey="ID", OtherKey="pollID")]
		public EntitySet<pollSubGroupTbl> pollSubGroupTbls
		{
			get
			{
				return this._pollSubGroupTbls;
			}
			set
			{
				this._pollSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pollTbl_pollTagTbl", Storage="_pollTagTbls", ThisKey="ID", OtherKey="pollID")]
		public EntitySet<pollTagTbl> pollTagTbls
		{
			get
			{
				return this._pollTagTbls;
			}
			set
			{
				this._pollTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_pollTbl", Storage="_userTbl", ThisKey="userID", OtherKey="ID", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.pollTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.pollTbls.Add(this);
						this._userID = value.ID;
					}
					else
					{
						this._userID = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_optionTbls(optionTbl entity)
		{
			this.SendPropertyChanging();
			entity.pollTbl = this;
		}
		
		private void detach_optionTbls(optionTbl entity)
		{
			this.SendPropertyChanging();
			entity.pollTbl = null;
		}
		
		private void attach_pollContentTbls(pollContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.pollTbl = this;
		}
		
		private void detach_pollContentTbls(pollContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.pollTbl = null;
		}
		
		private void attach_pollSubGroupTbls(pollSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.pollTbl = this;
		}
		
		private void detach_pollSubGroupTbls(pollSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.pollTbl = null;
		}
		
		private void attach_pollTagTbls(pollTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.pollTbl = this;
		}
		
		private void detach_pollTagTbls(pollTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.pollTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.publicationCommentTbl")]
	public partial class publicationCommentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _publicationID;
		
		private System.Nullable<long> _mUserID;
		
		private string _fullName;
		
		private string _mobile;
		
		private string _email;
		
		private string _text;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private System.Nullable<long> _userID;
		
		private EntityRef<publicationTbl> _publicationTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnpublicationIDChanging(long value);
    partial void OnpublicationIDChanged();
    partial void OnmUserIDChanging(System.Nullable<long> value);
    partial void OnmUserIDChanged();
    partial void OnfullNameChanging(string value);
    partial void OnfullNameChanged();
    partial void OnmobileChanging(string value);
    partial void OnmobileChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    #endregion
		
		public publicationCommentTbl()
		{
			this._publicationTbl = default(EntityRef<publicationTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publicationID", DbType="BigInt NOT NULL")]
		public long publicationID
		{
			get
			{
				return this._publicationID;
			}
			set
			{
				if ((this._publicationID != value))
				{
					if (this._publicationTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpublicationIDChanging(value);
					this.SendPropertyChanging();
					this._publicationID = value;
					this.SendPropertyChanged("publicationID");
					this.OnpublicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt")]
		public System.Nullable<long> mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string fullName
		{
			get
			{
				return this._fullName;
			}
			set
			{
				if ((this._fullName != value))
				{
					this.OnfullNameChanging(value);
					this.SendPropertyChanging();
					this._fullName = value;
					this.SendPropertyChanged("fullName");
					this.OnfullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobile", DbType="NVarChar(12)")]
		public string mobile
		{
			get
			{
				return this._mobile;
			}
			set
			{
				if ((this._mobile != value))
				{
					this.OnmobileChanging(value);
					this.SendPropertyChanging();
					this._mobile = value;
					this.SendPropertyChanged("mobile");
					this.OnmobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(150)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="publicationTbl_publicationCommentTbl", Storage="_publicationTbl", ThisKey="publicationID", OtherKey="ID", IsForeignKey=true)]
		public publicationTbl publicationTbl
		{
			get
			{
				return this._publicationTbl.Entity;
			}
			set
			{
				publicationTbl previousValue = this._publicationTbl.Entity;
				if (((previousValue != value) 
							|| (this._publicationTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._publicationTbl.Entity = null;
						previousValue.publicationCommentTbls.Remove(this);
					}
					this._publicationTbl.Entity = value;
					if ((value != null))
					{
						value.publicationCommentTbls.Add(this);
						this._publicationID = value.ID;
					}
					else
					{
						this._publicationID = default(long);
					}
					this.SendPropertyChanged("publicationTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.publicationContentTbl")]
	public partial class publicationContentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _publicationsID;
		
		private int _contentType;
		
		private string _value;
		
		private long _pri;
		
		private System.DateTime _regDate;
		
		private EntityRef<publicationTbl> _publicationTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnpublicationsIDChanging(long value);
    partial void OnpublicationsIDChanged();
    partial void OncontentTypeChanging(int value);
    partial void OncontentTypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnpriChanging(long value);
    partial void OnpriChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public publicationContentTbl()
		{
			this._publicationTbl = default(EntityRef<publicationTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publicationsID", DbType="BigInt NOT NULL")]
		public long publicationsID
		{
			get
			{
				return this._publicationsID;
			}
			set
			{
				if ((this._publicationsID != value))
				{
					if (this._publicationTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpublicationsIDChanging(value);
					this.SendPropertyChanging();
					this._publicationsID = value;
					this.SendPropertyChanged("publicationsID");
					this.OnpublicationsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentType", DbType="Int NOT NULL")]
		public int contentType
		{
			get
			{
				return this._contentType;
			}
			set
			{
				if ((this._contentType != value))
				{
					this.OncontentTypeChanging(value);
					this.SendPropertyChanging();
					this._contentType = value;
					this.SendPropertyChanged("contentType");
					this.OncontentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pri", DbType="BigInt NOT NULL")]
		public long pri
		{
			get
			{
				return this._pri;
			}
			set
			{
				if ((this._pri != value))
				{
					this.OnpriChanging(value);
					this.SendPropertyChanging();
					this._pri = value;
					this.SendPropertyChanged("pri");
					this.OnpriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="publicationTbl_publicationContentTbl", Storage="_publicationTbl", ThisKey="publicationsID", OtherKey="ID", IsForeignKey=true)]
		public publicationTbl publicationTbl
		{
			get
			{
				return this._publicationTbl.Entity;
			}
			set
			{
				publicationTbl previousValue = this._publicationTbl.Entity;
				if (((previousValue != value) 
							|| (this._publicationTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._publicationTbl.Entity = null;
						previousValue.publicationContentTbls.Remove(this);
					}
					this._publicationTbl.Entity = value;
					if ((value != null))
					{
						value.publicationContentTbls.Add(this);
						this._publicationsID = value.ID;
					}
					else
					{
						this._publicationsID = default(long);
					}
					this.SendPropertyChanged("publicationTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.publicationLikeTbl")]
	public partial class publicationLikeTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _publicationsID;
		
		private long _userID;
		
		private bool _isLike;
		
		private System.DateTime _regDate;
		
		private EntityRef<mUserTbl> _mUserTbl;
		
		private EntityRef<publicationTbl> _publicationTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnpublicationsIDChanging(long value);
    partial void OnpublicationsIDChanged();
    partial void OnuserIDChanging(long value);
    partial void OnuserIDChanged();
    partial void OnisLikeChanging(bool value);
    partial void OnisLikeChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public publicationLikeTbl()
		{
			this._mUserTbl = default(EntityRef<mUserTbl>);
			this._publicationTbl = default(EntityRef<publicationTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publicationsID", DbType="BigInt NOT NULL")]
		public long publicationsID
		{
			get
			{
				return this._publicationsID;
			}
			set
			{
				if ((this._publicationsID != value))
				{
					if (this._publicationTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpublicationsIDChanging(value);
					this.SendPropertyChanging();
					this._publicationsID = value;
					this.SendPropertyChanged("publicationsID");
					this.OnpublicationsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt NOT NULL")]
		public long userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._mUserTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isLike", DbType="Bit NOT NULL")]
		public bool isLike
		{
			get
			{
				return this._isLike;
			}
			set
			{
				if ((this._isLike != value))
				{
					this.OnisLikeChanging(value);
					this.SendPropertyChanging();
					this._isLike = value;
					this.SendPropertyChanged("isLike");
					this.OnisLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_publicationLikeTbl", Storage="_mUserTbl", ThisKey="userID", OtherKey="ID", IsForeignKey=true)]
		public mUserTbl mUserTbl
		{
			get
			{
				return this._mUserTbl.Entity;
			}
			set
			{
				mUserTbl previousValue = this._mUserTbl.Entity;
				if (((previousValue != value) 
							|| (this._mUserTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mUserTbl.Entity = null;
						previousValue.publicationLikeTbls.Remove(this);
					}
					this._mUserTbl.Entity = value;
					if ((value != null))
					{
						value.publicationLikeTbls.Add(this);
						this._userID = value.ID;
					}
					else
					{
						this._userID = default(long);
					}
					this.SendPropertyChanged("mUserTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="publicationTbl_publicationLikeTbl", Storage="_publicationTbl", ThisKey="publicationsID", OtherKey="ID", IsForeignKey=true)]
		public publicationTbl publicationTbl
		{
			get
			{
				return this._publicationTbl.Entity;
			}
			set
			{
				publicationTbl previousValue = this._publicationTbl.Entity;
				if (((previousValue != value) 
							|| (this._publicationTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._publicationTbl.Entity = null;
						previousValue.publicationLikeTbls.Remove(this);
					}
					this._publicationTbl.Entity = value;
					if ((value != null))
					{
						value.publicationLikeTbls.Add(this);
						this._publicationsID = value.ID;
					}
					else
					{
						this._publicationsID = default(long);
					}
					this.SendPropertyChanged("publicationTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.publicationSubGroupTbl")]
	public partial class publicationSubGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _publicationsID;
		
		private long _subGroupID;
		
		private EntityRef<publicationTbl> _publicationTbl;
		
		private EntityRef<SubGroupTbl> _SubGroupTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnpublicationsIDChanging(long value);
    partial void OnpublicationsIDChanged();
    partial void OnsubGroupIDChanging(long value);
    partial void OnsubGroupIDChanged();
    #endregion
		
		public publicationSubGroupTbl()
		{
			this._publicationTbl = default(EntityRef<publicationTbl>);
			this._SubGroupTbl = default(EntityRef<SubGroupTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publicationsID", DbType="BigInt NOT NULL")]
		public long publicationsID
		{
			get
			{
				return this._publicationsID;
			}
			set
			{
				if ((this._publicationsID != value))
				{
					if (this._publicationTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpublicationsIDChanging(value);
					this.SendPropertyChanging();
					this._publicationsID = value;
					this.SendPropertyChanged("publicationsID");
					this.OnpublicationsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subGroupID", DbType="BigInt NOT NULL")]
		public long subGroupID
		{
			get
			{
				return this._subGroupID;
			}
			set
			{
				if ((this._subGroupID != value))
				{
					if (this._SubGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubGroupIDChanging(value);
					this.SendPropertyChanging();
					this._subGroupID = value;
					this.SendPropertyChanged("subGroupID");
					this.OnsubGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="publicationTbl_publicationSubGroupTbl", Storage="_publicationTbl", ThisKey="publicationsID", OtherKey="ID", IsForeignKey=true)]
		public publicationTbl publicationTbl
		{
			get
			{
				return this._publicationTbl.Entity;
			}
			set
			{
				publicationTbl previousValue = this._publicationTbl.Entity;
				if (((previousValue != value) 
							|| (this._publicationTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._publicationTbl.Entity = null;
						previousValue.publicationSubGroupTbls.Remove(this);
					}
					this._publicationTbl.Entity = value;
					if ((value != null))
					{
						value.publicationSubGroupTbls.Add(this);
						this._publicationsID = value.ID;
					}
					else
					{
						this._publicationsID = default(long);
					}
					this.SendPropertyChanged("publicationTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_publicationSubGroupTbl", Storage="_SubGroupTbl", ThisKey="subGroupID", OtherKey="ID", IsForeignKey=true)]
		public SubGroupTbl SubGroupTbl
		{
			get
			{
				return this._SubGroupTbl.Entity;
			}
			set
			{
				SubGroupTbl previousValue = this._SubGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._SubGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubGroupTbl.Entity = null;
						previousValue.publicationSubGroupTbls.Remove(this);
					}
					this._SubGroupTbl.Entity = value;
					if ((value != null))
					{
						value.publicationSubGroupTbls.Add(this);
						this._subGroupID = value.ID;
					}
					else
					{
						this._subGroupID = default(long);
					}
					this.SendPropertyChanged("SubGroupTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.publicationTagTbl")]
	public partial class publicationTagTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _publicationID;
		
		private long _tagID;
		
		private EntityRef<publicationTbl> _publicationTbl;
		
		private EntityRef<tagTbl> _tagTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnpublicationIDChanging(long value);
    partial void OnpublicationIDChanged();
    partial void OntagIDChanging(long value);
    partial void OntagIDChanged();
    #endregion
		
		public publicationTagTbl()
		{
			this._publicationTbl = default(EntityRef<publicationTbl>);
			this._tagTbl = default(EntityRef<tagTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publicationID", DbType="BigInt NOT NULL")]
		public long publicationID
		{
			get
			{
				return this._publicationID;
			}
			set
			{
				if ((this._publicationID != value))
				{
					if (this._publicationTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpublicationIDChanging(value);
					this.SendPropertyChanging();
					this._publicationID = value;
					this.SendPropertyChanged("publicationID");
					this.OnpublicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tagID", DbType="BigInt NOT NULL")]
		public long tagID
		{
			get
			{
				return this._tagID;
			}
			set
			{
				if ((this._tagID != value))
				{
					if (this._tagTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntagIDChanging(value);
					this.SendPropertyChanging();
					this._tagID = value;
					this.SendPropertyChanged("tagID");
					this.OntagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="publicationTbl_publicationTagTbl", Storage="_publicationTbl", ThisKey="publicationID", OtherKey="ID", IsForeignKey=true)]
		public publicationTbl publicationTbl
		{
			get
			{
				return this._publicationTbl.Entity;
			}
			set
			{
				publicationTbl previousValue = this._publicationTbl.Entity;
				if (((previousValue != value) 
							|| (this._publicationTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._publicationTbl.Entity = null;
						previousValue.publicationTagTbls.Remove(this);
					}
					this._publicationTbl.Entity = value;
					if ((value != null))
					{
						value.publicationTagTbls.Add(this);
						this._publicationID = value.ID;
					}
					else
					{
						this._publicationID = default(long);
					}
					this.SendPropertyChanged("publicationTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_publicationTagTbl", Storage="_tagTbl", ThisKey="tagID", OtherKey="ID", IsForeignKey=true)]
		public tagTbl tagTbl
		{
			get
			{
				return this._tagTbl.Entity;
			}
			set
			{
				tagTbl previousValue = this._tagTbl.Entity;
				if (((previousValue != value) 
							|| (this._tagTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tagTbl.Entity = null;
						previousValue.publicationTagTbls.Remove(this);
					}
					this._tagTbl.Entity = value;
					if ((value != null))
					{
						value.publicationTagTbls.Add(this);
						this._tagID = value.ID;
					}
					else
					{
						this._tagID = default(long);
					}
					this.SendPropertyChanged("tagTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.publicationTbl")]
	public partial class publicationTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _userID;
		
		private System.Nullable<long> _mUserID;
		
		private string _title;
		
		private bool _isPublished;
		
		private int _viewCount;
		
		private System.DateTime _publishDate;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private EntitySet<publicationCommentTbl> _publicationCommentTbls;
		
		private EntitySet<publicationContentTbl> _publicationContentTbls;
		
		private EntitySet<publicationLikeTbl> _publicationLikeTbls;
		
		private EntitySet<publicationSubGroupTbl> _publicationSubGroupTbls;
		
		private EntitySet<publicationTagTbl> _publicationTagTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    partial void OnmUserIDChanging(System.Nullable<long> value);
    partial void OnmUserIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnisPublishedChanging(bool value);
    partial void OnisPublishedChanged();
    partial void OnviewCountChanging(int value);
    partial void OnviewCountChanged();
    partial void OnpublishDateChanging(System.DateTime value);
    partial void OnpublishDateChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public publicationTbl()
		{
			this._publicationCommentTbls = new EntitySet<publicationCommentTbl>(new Action<publicationCommentTbl>(this.attach_publicationCommentTbls), new Action<publicationCommentTbl>(this.detach_publicationCommentTbls));
			this._publicationContentTbls = new EntitySet<publicationContentTbl>(new Action<publicationContentTbl>(this.attach_publicationContentTbls), new Action<publicationContentTbl>(this.detach_publicationContentTbls));
			this._publicationLikeTbls = new EntitySet<publicationLikeTbl>(new Action<publicationLikeTbl>(this.attach_publicationLikeTbls), new Action<publicationLikeTbl>(this.detach_publicationLikeTbls));
			this._publicationSubGroupTbls = new EntitySet<publicationSubGroupTbl>(new Action<publicationSubGroupTbl>(this.attach_publicationSubGroupTbls), new Action<publicationSubGroupTbl>(this.detach_publicationSubGroupTbls));
			this._publicationTagTbls = new EntitySet<publicationTagTbl>(new Action<publicationTagTbl>(this.attach_publicationTagTbls), new Action<publicationTagTbl>(this.detach_publicationTagTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt")]
		public System.Nullable<long> mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPublished", DbType="Bit NOT NULL")]
		public bool isPublished
		{
			get
			{
				return this._isPublished;
			}
			set
			{
				if ((this._isPublished != value))
				{
					this.OnisPublishedChanging(value);
					this.SendPropertyChanging();
					this._isPublished = value;
					this.SendPropertyChanged("isPublished");
					this.OnisPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_viewCount", DbType="Int NOT NULL")]
		public int viewCount
		{
			get
			{
				return this._viewCount;
			}
			set
			{
				if ((this._viewCount != value))
				{
					this.OnviewCountChanging(value);
					this.SendPropertyChanging();
					this._viewCount = value;
					this.SendPropertyChanged("viewCount");
					this.OnviewCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publishDate", DbType="DateTime NOT NULL")]
		public System.DateTime publishDate
		{
			get
			{
				return this._publishDate;
			}
			set
			{
				if ((this._publishDate != value))
				{
					this.OnpublishDateChanging(value);
					this.SendPropertyChanging();
					this._publishDate = value;
					this.SendPropertyChanged("publishDate");
					this.OnpublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="publicationTbl_publicationCommentTbl", Storage="_publicationCommentTbls", ThisKey="ID", OtherKey="publicationID")]
		public EntitySet<publicationCommentTbl> publicationCommentTbls
		{
			get
			{
				return this._publicationCommentTbls;
			}
			set
			{
				this._publicationCommentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="publicationTbl_publicationContentTbl", Storage="_publicationContentTbls", ThisKey="ID", OtherKey="publicationsID")]
		public EntitySet<publicationContentTbl> publicationContentTbls
		{
			get
			{
				return this._publicationContentTbls;
			}
			set
			{
				this._publicationContentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="publicationTbl_publicationLikeTbl", Storage="_publicationLikeTbls", ThisKey="ID", OtherKey="publicationsID")]
		public EntitySet<publicationLikeTbl> publicationLikeTbls
		{
			get
			{
				return this._publicationLikeTbls;
			}
			set
			{
				this._publicationLikeTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="publicationTbl_publicationSubGroupTbl", Storage="_publicationSubGroupTbls", ThisKey="ID", OtherKey="publicationsID")]
		public EntitySet<publicationSubGroupTbl> publicationSubGroupTbls
		{
			get
			{
				return this._publicationSubGroupTbls;
			}
			set
			{
				this._publicationSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="publicationTbl_publicationTagTbl", Storage="_publicationTagTbls", ThisKey="ID", OtherKey="publicationID")]
		public EntitySet<publicationTagTbl> publicationTagTbls
		{
			get
			{
				return this._publicationTagTbls;
			}
			set
			{
				this._publicationTagTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_publicationCommentTbls(publicationCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.publicationTbl = this;
		}
		
		private void detach_publicationCommentTbls(publicationCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.publicationTbl = null;
		}
		
		private void attach_publicationContentTbls(publicationContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.publicationTbl = this;
		}
		
		private void detach_publicationContentTbls(publicationContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.publicationTbl = null;
		}
		
		private void attach_publicationLikeTbls(publicationLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.publicationTbl = this;
		}
		
		private void detach_publicationLikeTbls(publicationLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.publicationTbl = null;
		}
		
		private void attach_publicationSubGroupTbls(publicationSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.publicationTbl = this;
		}
		
		private void detach_publicationSubGroupTbls(publicationSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.publicationTbl = null;
		}
		
		private void attach_publicationTagTbls(publicationTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.publicationTbl = this;
		}
		
		private void detach_publicationTagTbls(publicationTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.publicationTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pushMessageSubGroupTbl")]
	public partial class pushMessageSubGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _pushMessageID;
		
		private long _subGroupID;
		
		private EntityRef<pushMessageTbl> _pushMessageTbl;
		
		private EntityRef<SubGroupTbl> _SubGroupTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnpushMessageIDChanging(long value);
    partial void OnpushMessageIDChanged();
    partial void OnsubGroupIDChanging(long value);
    partial void OnsubGroupIDChanged();
    #endregion
		
		public pushMessageSubGroupTbl()
		{
			this._pushMessageTbl = default(EntityRef<pushMessageTbl>);
			this._SubGroupTbl = default(EntityRef<SubGroupTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pushMessageID", DbType="BigInt NOT NULL")]
		public long pushMessageID
		{
			get
			{
				return this._pushMessageID;
			}
			set
			{
				if ((this._pushMessageID != value))
				{
					if (this._pushMessageTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpushMessageIDChanging(value);
					this.SendPropertyChanging();
					this._pushMessageID = value;
					this.SendPropertyChanged("pushMessageID");
					this.OnpushMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subGroupID", DbType="BigInt NOT NULL")]
		public long subGroupID
		{
			get
			{
				return this._subGroupID;
			}
			set
			{
				if ((this._subGroupID != value))
				{
					if (this._SubGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubGroupIDChanging(value);
					this.SendPropertyChanging();
					this._subGroupID = value;
					this.SendPropertyChanged("subGroupID");
					this.OnsubGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pushMessageTbl_pushMessageSubGroupTbl", Storage="_pushMessageTbl", ThisKey="pushMessageID", OtherKey="ID", IsForeignKey=true)]
		public pushMessageTbl pushMessageTbl
		{
			get
			{
				return this._pushMessageTbl.Entity;
			}
			set
			{
				pushMessageTbl previousValue = this._pushMessageTbl.Entity;
				if (((previousValue != value) 
							|| (this._pushMessageTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._pushMessageTbl.Entity = null;
						previousValue.pushMessageSubGroupTbls.Remove(this);
					}
					this._pushMessageTbl.Entity = value;
					if ((value != null))
					{
						value.pushMessageSubGroupTbls.Add(this);
						this._pushMessageID = value.ID;
					}
					else
					{
						this._pushMessageID = default(long);
					}
					this.SendPropertyChanged("pushMessageTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_pushMessageSubGroupTbl", Storage="_SubGroupTbl", ThisKey="subGroupID", OtherKey="ID", IsForeignKey=true)]
		public SubGroupTbl SubGroupTbl
		{
			get
			{
				return this._SubGroupTbl.Entity;
			}
			set
			{
				SubGroupTbl previousValue = this._SubGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._SubGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubGroupTbl.Entity = null;
						previousValue.pushMessageSubGroupTbls.Remove(this);
					}
					this._SubGroupTbl.Entity = value;
					if ((value != null))
					{
						value.pushMessageSubGroupTbls.Add(this);
						this._subGroupID = value.ID;
					}
					else
					{
						this._subGroupID = default(long);
					}
					this.SendPropertyChanged("SubGroupTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pushMessageTbl")]
	public partial class pushMessageTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _creatorID;
		
		private string _title;
		
		private string _text;
		
		private bool _toPartner;
		
		private bool _toAll;
		
		private System.DateTime _regDate;
		
		private EntitySet<pushMessageSubGroupTbl> _pushMessageSubGroupTbls;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OncreatorIDChanging(long value);
    partial void OncreatorIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OntoPartnerChanging(bool value);
    partial void OntoPartnerChanged();
    partial void OntoAllChanging(bool value);
    partial void OntoAllChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public pushMessageTbl()
		{
			this._pushMessageSubGroupTbls = new EntitySet<pushMessageSubGroupTbl>(new Action<pushMessageSubGroupTbl>(this.attach_pushMessageSubGroupTbls), new Action<pushMessageSubGroupTbl>(this.detach_pushMessageSubGroupTbls));
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creatorID", DbType="BigInt NOT NULL")]
		public long creatorID
		{
			get
			{
				return this._creatorID;
			}
			set
			{
				if ((this._creatorID != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncreatorIDChanging(value);
					this.SendPropertyChanging();
					this._creatorID = value;
					this.SendPropertyChanged("creatorID");
					this.OncreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toPartner", DbType="Bit NOT NULL")]
		public bool toPartner
		{
			get
			{
				return this._toPartner;
			}
			set
			{
				if ((this._toPartner != value))
				{
					this.OntoPartnerChanging(value);
					this.SendPropertyChanging();
					this._toPartner = value;
					this.SendPropertyChanged("toPartner");
					this.OntoPartnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toAll", DbType="Bit NOT NULL")]
		public bool toAll
		{
			get
			{
				return this._toAll;
			}
			set
			{
				if ((this._toAll != value))
				{
					this.OntoAllChanging(value);
					this.SendPropertyChanging();
					this._toAll = value;
					this.SendPropertyChanged("toAll");
					this.OntoAllChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pushMessageTbl_pushMessageSubGroupTbl", Storage="_pushMessageSubGroupTbls", ThisKey="ID", OtherKey="pushMessageID")]
		public EntitySet<pushMessageSubGroupTbl> pushMessageSubGroupTbls
		{
			get
			{
				return this._pushMessageSubGroupTbls;
			}
			set
			{
				this._pushMessageSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_pushMessageTbl", Storage="_userTbl", ThisKey="creatorID", OtherKey="ID", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.pushMessageTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.pushMessageTbls.Add(this);
						this._creatorID = value.ID;
					}
					else
					{
						this._creatorID = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_pushMessageSubGroupTbls(pushMessageSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.pushMessageTbl = this;
		}
		
		private void detach_pushMessageSubGroupTbls(pushMessageSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.pushMessageTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pushUserTbl")]
	public partial class pushUserTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _mUsreID;
		
		private string _token;
		
		private string _deviceID;
		
		private double _latitude;
		
		private double _longitude;
		
		private System.DateTime _lastUpdateDate;
		
		private System.DateTime _registerDate;
		
		private System.Nullable<int> _openedCount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnmUsreIDChanging(System.Nullable<long> value);
    partial void OnmUsreIDChanged();
    partial void OntokenChanging(string value);
    partial void OntokenChanged();
    partial void OndeviceIDChanging(string value);
    partial void OndeviceIDChanged();
    partial void OnlatitudeChanging(double value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(double value);
    partial void OnlongitudeChanged();
    partial void OnlastUpdateDateChanging(System.DateTime value);
    partial void OnlastUpdateDateChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    partial void OnopenedCountChanging(System.Nullable<int> value);
    partial void OnopenedCountChanged();
    #endregion
		
		public pushUserTbl()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUsreID", DbType="BigInt")]
		public System.Nullable<long> mUsreID
		{
			get
			{
				return this._mUsreID;
			}
			set
			{
				if ((this._mUsreID != value))
				{
					this.OnmUsreIDChanging(value);
					this.SendPropertyChanging();
					this._mUsreID = value;
					this.SendPropertyChanged("mUsreID");
					this.OnmUsreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_token", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string token
		{
			get
			{
				return this._token;
			}
			set
			{
				if ((this._token != value))
				{
					this.OntokenChanging(value);
					this.SendPropertyChanging();
					this._token = value;
					this.SendPropertyChanged("token");
					this.OntokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deviceID", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string deviceID
		{
			get
			{
				return this._deviceID;
			}
			set
			{
				if ((this._deviceID != value))
				{
					this.OndeviceIDChanging(value);
					this.SendPropertyChanging();
					this._deviceID = value;
					this.SendPropertyChanged("deviceID");
					this.OndeviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float NOT NULL")]
		public double latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float NOT NULL")]
		public double longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastUpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime lastUpdateDate
		{
			get
			{
				return this._lastUpdateDate;
			}
			set
			{
				if ((this._lastUpdateDate != value))
				{
					this.OnlastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._lastUpdateDate = value;
					this.SendPropertyChanged("lastUpdateDate");
					this.OnlastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_openedCount", DbType="Int")]
		public System.Nullable<int> openedCount
		{
			get
			{
				return this._openedCount;
			}
			set
			{
				if ((this._openedCount != value))
				{
					this.OnopenedCountChanging(value);
					this.SendPropertyChanging();
					this._openedCount = value;
					this.SendPropertyChanged("openedCount");
					this.OnopenedCountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.reportCommentTbl")]
	public partial class reportCommentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _reportID;
		
		private System.Nullable<long> _mUserID;
		
		private string _fullName;
		
		private string _mobile;
		
		private string _email;
		
		private string _text;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private System.Nullable<long> _userID;
		
		private EntityRef<masterReportTbl> _masterReportTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnreportIDChanging(long value);
    partial void OnreportIDChanged();
    partial void OnmUserIDChanging(System.Nullable<long> value);
    partial void OnmUserIDChanged();
    partial void OnfullNameChanging(string value);
    partial void OnfullNameChanged();
    partial void OnmobileChanging(string value);
    partial void OnmobileChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    #endregion
		
		public reportCommentTbl()
		{
			this._masterReportTbl = default(EntityRef<masterReportTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reportID", DbType="BigInt NOT NULL")]
		public long reportID
		{
			get
			{
				return this._reportID;
			}
			set
			{
				if ((this._reportID != value))
				{
					if (this._masterReportTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreportIDChanging(value);
					this.SendPropertyChanging();
					this._reportID = value;
					this.SendPropertyChanged("reportID");
					this.OnreportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt")]
		public System.Nullable<long> mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string fullName
		{
			get
			{
				return this._fullName;
			}
			set
			{
				if ((this._fullName != value))
				{
					this.OnfullNameChanging(value);
					this.SendPropertyChanging();
					this._fullName = value;
					this.SendPropertyChanged("fullName");
					this.OnfullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobile", DbType="NVarChar(12)")]
		public string mobile
		{
			get
			{
				return this._mobile;
			}
			set
			{
				if ((this._mobile != value))
				{
					this.OnmobileChanging(value);
					this.SendPropertyChanging();
					this._mobile = value;
					this.SendPropertyChanged("mobile");
					this.OnmobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(150)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="masterReportTbl_reportCommentTbl", Storage="_masterReportTbl", ThisKey="reportID", OtherKey="ID", IsForeignKey=true)]
		public masterReportTbl masterReportTbl
		{
			get
			{
				return this._masterReportTbl.Entity;
			}
			set
			{
				masterReportTbl previousValue = this._masterReportTbl.Entity;
				if (((previousValue != value) 
							|| (this._masterReportTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._masterReportTbl.Entity = null;
						previousValue.reportCommentTbls.Remove(this);
					}
					this._masterReportTbl.Entity = value;
					if ((value != null))
					{
						value.reportCommentTbls.Add(this);
						this._reportID = value.ID;
					}
					else
					{
						this._reportID = default(long);
					}
					this.SendPropertyChanged("masterReportTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.reportTbl")]
	public partial class reportTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _xTitle;
		
		private string _yTitle;
		
		private string _charttypes;
		
		private EntitySet<chartTbl> _chartTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnxTitleChanging(string value);
    partial void OnxTitleChanged();
    partial void OnyTitleChanging(string value);
    partial void OnyTitleChanged();
    partial void OncharttypesChanging(string value);
    partial void OncharttypesChanged();
    #endregion
		
		public reportTbl()
		{
			this._chartTbls = new EntitySet<chartTbl>(new Action<chartTbl>(this.attach_chartTbls), new Action<chartTbl>(this.detach_chartTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xTitle", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string xTitle
		{
			get
			{
				return this._xTitle;
			}
			set
			{
				if ((this._xTitle != value))
				{
					this.OnxTitleChanging(value);
					this.SendPropertyChanging();
					this._xTitle = value;
					this.SendPropertyChanged("xTitle");
					this.OnxTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_yTitle", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string yTitle
		{
			get
			{
				return this._yTitle;
			}
			set
			{
				if ((this._yTitle != value))
				{
					this.OnyTitleChanging(value);
					this.SendPropertyChanging();
					this._yTitle = value;
					this.SendPropertyChanged("yTitle");
					this.OnyTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_charttypes", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string charttypes
		{
			get
			{
				return this._charttypes;
			}
			set
			{
				if ((this._charttypes != value))
				{
					this.OncharttypesChanging(value);
					this.SendPropertyChanging();
					this._charttypes = value;
					this.SendPropertyChanged("charttypes");
					this.OncharttypesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="reportTbl_chartTbl", Storage="_chartTbls", ThisKey="ID", OtherKey="reportID")]
		public EntitySet<chartTbl> chartTbls
		{
			get
			{
				return this._chartTbls;
			}
			set
			{
				this._chartTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_chartTbls(chartTbl entity)
		{
			this.SendPropertyChanging();
			entity.reportTbl = this;
		}
		
		private void detach_chartTbls(chartTbl entity)
		{
			this.SendPropertyChanging();
			entity.reportTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.responseContentTbl")]
	public partial class responseContentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _responseID;
		
		private int _contentType;
		
		private string _value;
		
		private long _pri;
		
		private System.DateTime _regDate;
		
		private EntityRef<responseTbl> _responseTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnresponseIDChanging(long value);
    partial void OnresponseIDChanged();
    partial void OncontentTypeChanging(int value);
    partial void OncontentTypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnpriChanging(long value);
    partial void OnpriChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public responseContentTbl()
		{
			this._responseTbl = default(EntityRef<responseTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_responseID", DbType="BigInt NOT NULL")]
		public long responseID
		{
			get
			{
				return this._responseID;
			}
			set
			{
				if ((this._responseID != value))
				{
					if (this._responseTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnresponseIDChanging(value);
					this.SendPropertyChanging();
					this._responseID = value;
					this.SendPropertyChanged("responseID");
					this.OnresponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentType", DbType="Int NOT NULL")]
		public int contentType
		{
			get
			{
				return this._contentType;
			}
			set
			{
				if ((this._contentType != value))
				{
					this.OncontentTypeChanging(value);
					this.SendPropertyChanging();
					this._contentType = value;
					this.SendPropertyChanged("contentType");
					this.OncontentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pri", DbType="BigInt NOT NULL")]
		public long pri
		{
			get
			{
				return this._pri;
			}
			set
			{
				if ((this._pri != value))
				{
					this.OnpriChanging(value);
					this.SendPropertyChanging();
					this._pri = value;
					this.SendPropertyChanged("pri");
					this.OnpriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="responseTbl_responseContentTbl", Storage="_responseTbl", ThisKey="responseID", OtherKey="ID", IsForeignKey=true)]
		public responseTbl responseTbl
		{
			get
			{
				return this._responseTbl.Entity;
			}
			set
			{
				responseTbl previousValue = this._responseTbl.Entity;
				if (((previousValue != value) 
							|| (this._responseTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._responseTbl.Entity = null;
						previousValue.responseContentTbls.Remove(this);
					}
					this._responseTbl.Entity = value;
					if ((value != null))
					{
						value.responseContentTbls.Add(this);
						this._responseID = value.ID;
					}
					else
					{
						this._responseID = default(long);
					}
					this.SendPropertyChanged("responseTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.responseTbl")]
	public partial class responseTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _mUserID;
		
		private long _myIranID;
		
		private string _title;
		
		private bool _isCorrect;
		
		private bool _isWinner;
		
		private bool _isBlock;
		
		private System.DateTime _regDate;
		
		private System.Nullable<long> _userID;
		
		private EntitySet<responseContentTbl> _responseContentTbls;
		
		private EntityRef<mUserTbl> _mUserTbl;
		
		private EntityRef<myIranTbl> _myIranTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnmUserIDChanging(long value);
    partial void OnmUserIDChanged();
    partial void OnmyIranIDChanging(long value);
    partial void OnmyIranIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnisCorrectChanging(bool value);
    partial void OnisCorrectChanged();
    partial void OnisWinnerChanging(bool value);
    partial void OnisWinnerChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    partial void OnuserIDChanging(System.Nullable<long> value);
    partial void OnuserIDChanged();
    #endregion
		
		public responseTbl()
		{
			this._responseContentTbls = new EntitySet<responseContentTbl>(new Action<responseContentTbl>(this.attach_responseContentTbls), new Action<responseContentTbl>(this.detach_responseContentTbls));
			this._mUserTbl = default(EntityRef<mUserTbl>);
			this._myIranTbl = default(EntityRef<myIranTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mUserID", DbType="BigInt NOT NULL")]
		public long mUserID
		{
			get
			{
				return this._mUserID;
			}
			set
			{
				if ((this._mUserID != value))
				{
					if (this._mUserTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmUserIDChanging(value);
					this.SendPropertyChanging();
					this._mUserID = value;
					this.SendPropertyChanged("mUserID");
					this.OnmUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_myIranID", DbType="BigInt NOT NULL")]
		public long myIranID
		{
			get
			{
				return this._myIranID;
			}
			set
			{
				if ((this._myIranID != value))
				{
					if (this._myIranTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmyIranIDChanging(value);
					this.SendPropertyChanging();
					this._myIranID = value;
					this.SendPropertyChanged("myIranID");
					this.OnmyIranIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isCorrect", DbType="Bit NOT NULL")]
		public bool isCorrect
		{
			get
			{
				return this._isCorrect;
			}
			set
			{
				if ((this._isCorrect != value))
				{
					this.OnisCorrectChanging(value);
					this.SendPropertyChanging();
					this._isCorrect = value;
					this.SendPropertyChanged("isCorrect");
					this.OnisCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isWinner", DbType="Bit NOT NULL")]
		public bool isWinner
		{
			get
			{
				return this._isWinner;
			}
			set
			{
				if ((this._isWinner != value))
				{
					this.OnisWinnerChanging(value);
					this.SendPropertyChanging();
					this._isWinner = value;
					this.SendPropertyChanged("isWinner");
					this.OnisWinnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt")]
		public System.Nullable<long> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="responseTbl_responseContentTbl", Storage="_responseContentTbls", ThisKey="ID", OtherKey="responseID")]
		public EntitySet<responseContentTbl> responseContentTbls
		{
			get
			{
				return this._responseContentTbls;
			}
			set
			{
				this._responseContentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_responseTbl", Storage="_mUserTbl", ThisKey="mUserID", OtherKey="ID", IsForeignKey=true)]
		public mUserTbl mUserTbl
		{
			get
			{
				return this._mUserTbl.Entity;
			}
			set
			{
				mUserTbl previousValue = this._mUserTbl.Entity;
				if (((previousValue != value) 
							|| (this._mUserTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mUserTbl.Entity = null;
						previousValue.responseTbls.Remove(this);
					}
					this._mUserTbl.Entity = value;
					if ((value != null))
					{
						value.responseTbls.Add(this);
						this._mUserID = value.ID;
					}
					else
					{
						this._mUserID = default(long);
					}
					this.SendPropertyChanged("mUserTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="myIranTbl_responseTbl", Storage="_myIranTbl", ThisKey="myIranID", OtherKey="ID", IsForeignKey=true)]
		public myIranTbl myIranTbl
		{
			get
			{
				return this._myIranTbl.Entity;
			}
			set
			{
				myIranTbl previousValue = this._myIranTbl.Entity;
				if (((previousValue != value) 
							|| (this._myIranTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._myIranTbl.Entity = null;
						previousValue.responseTbls.Remove(this);
					}
					this._myIranTbl.Entity = value;
					if ((value != null))
					{
						value.responseTbls.Add(this);
						this._myIranID = value.ID;
					}
					else
					{
						this._myIranID = default(long);
					}
					this.SendPropertyChanged("myIranTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_responseContentTbls(responseContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.responseTbl = this;
		}
		
		private void detach_responseContentTbls(responseContentTbl entity)
		{
			this.SendPropertyChanging();
			entity.responseTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.settingTbl")]
	public partial class settingTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _title;
		
		private string _value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    #endregion
		
		public settingTbl()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.subGroupPushTbl")]
	public partial class subGroupPushTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _subGroupID;
		
		private long _toSubGroupID;
		
		private EntityRef<SubGroupTbl> _SubGroupTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnsubGroupIDChanging(long value);
    partial void OnsubGroupIDChanged();
    partial void OntoSubGroupIDChanging(long value);
    partial void OntoSubGroupIDChanged();
    #endregion
		
		public subGroupPushTbl()
		{
			this._SubGroupTbl = default(EntityRef<SubGroupTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subGroupID", DbType="BigInt NOT NULL")]
		public long subGroupID
		{
			get
			{
				return this._subGroupID;
			}
			set
			{
				if ((this._subGroupID != value))
				{
					if (this._SubGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubGroupIDChanging(value);
					this.SendPropertyChanging();
					this._subGroupID = value;
					this.SendPropertyChanged("subGroupID");
					this.OnsubGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toSubGroupID", DbType="BigInt NOT NULL")]
		public long toSubGroupID
		{
			get
			{
				return this._toSubGroupID;
			}
			set
			{
				if ((this._toSubGroupID != value))
				{
					this.OntoSubGroupIDChanging(value);
					this.SendPropertyChanging();
					this._toSubGroupID = value;
					this.SendPropertyChanged("toSubGroupID");
					this.OntoSubGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_subGroupPushTbl", Storage="_SubGroupTbl", ThisKey="subGroupID", OtherKey="ID", IsForeignKey=true)]
		public SubGroupTbl SubGroupTbl
		{
			get
			{
				return this._SubGroupTbl.Entity;
			}
			set
			{
				SubGroupTbl previousValue = this._SubGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._SubGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubGroupTbl.Entity = null;
						previousValue.subGroupPushTbls.Remove(this);
					}
					this._SubGroupTbl.Entity = value;
					if ((value != null))
					{
						value.subGroupPushTbls.Add(this);
						this._subGroupID = value.ID;
					}
					else
					{
						this._subGroupID = default(long);
					}
					this.SendPropertyChanged("SubGroupTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubGroupTbl")]
	public partial class SubGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _groupID;
		
		private string _title;
		
		private bool _isBlock;
		
		private bool _canPush;
		
		private bool _toAll;
		
		private bool _toPartner;
		
		private System.DateTime _regDate;
		
		private EntitySet<downloadSubGroupTbl> _downloadSubGroupTbls;
		
		private EntitySet<eventsSubGroupTbl> _eventsSubGroupTbls;
		
		private EntitySet<ioSubGroupTbl> _ioSubGroupTbls;
		
		private EntitySet<masterRreportSubGroupTbl> _masterRreportSubGroupTbls;
		
		private EntitySet<messageSubGroupTbl> _messageSubGroupTbls;
		
		private EntitySet<newsSubGroupTbl> _newsSubGroupTbls;
		
		private EntitySet<pollSubGroupTbl> _pollSubGroupTbls;
		
		private EntitySet<publicationSubGroupTbl> _publicationSubGroupTbls;
		
		private EntitySet<pushMessageSubGroupTbl> _pushMessageSubGroupTbls;
		
		private EntitySet<subGroupPushTbl> _subGroupPushTbls;
		
		private EntitySet<userSubGroupTbl> _userSubGroupTbls;
		
		private EntityRef<GroupTbl> _GroupTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OngroupIDChanging(long value);
    partial void OngroupIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnisBlockChanging(bool value);
    partial void OnisBlockChanged();
    partial void OncanPushChanging(bool value);
    partial void OncanPushChanged();
    partial void OntoAllChanging(bool value);
    partial void OntoAllChanged();
    partial void OntoPartnerChanging(bool value);
    partial void OntoPartnerChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public SubGroupTbl()
		{
			this._downloadSubGroupTbls = new EntitySet<downloadSubGroupTbl>(new Action<downloadSubGroupTbl>(this.attach_downloadSubGroupTbls), new Action<downloadSubGroupTbl>(this.detach_downloadSubGroupTbls));
			this._eventsSubGroupTbls = new EntitySet<eventsSubGroupTbl>(new Action<eventsSubGroupTbl>(this.attach_eventsSubGroupTbls), new Action<eventsSubGroupTbl>(this.detach_eventsSubGroupTbls));
			this._ioSubGroupTbls = new EntitySet<ioSubGroupTbl>(new Action<ioSubGroupTbl>(this.attach_ioSubGroupTbls), new Action<ioSubGroupTbl>(this.detach_ioSubGroupTbls));
			this._masterRreportSubGroupTbls = new EntitySet<masterRreportSubGroupTbl>(new Action<masterRreportSubGroupTbl>(this.attach_masterRreportSubGroupTbls), new Action<masterRreportSubGroupTbl>(this.detach_masterRreportSubGroupTbls));
			this._messageSubGroupTbls = new EntitySet<messageSubGroupTbl>(new Action<messageSubGroupTbl>(this.attach_messageSubGroupTbls), new Action<messageSubGroupTbl>(this.detach_messageSubGroupTbls));
			this._newsSubGroupTbls = new EntitySet<newsSubGroupTbl>(new Action<newsSubGroupTbl>(this.attach_newsSubGroupTbls), new Action<newsSubGroupTbl>(this.detach_newsSubGroupTbls));
			this._pollSubGroupTbls = new EntitySet<pollSubGroupTbl>(new Action<pollSubGroupTbl>(this.attach_pollSubGroupTbls), new Action<pollSubGroupTbl>(this.detach_pollSubGroupTbls));
			this._publicationSubGroupTbls = new EntitySet<publicationSubGroupTbl>(new Action<publicationSubGroupTbl>(this.attach_publicationSubGroupTbls), new Action<publicationSubGroupTbl>(this.detach_publicationSubGroupTbls));
			this._pushMessageSubGroupTbls = new EntitySet<pushMessageSubGroupTbl>(new Action<pushMessageSubGroupTbl>(this.attach_pushMessageSubGroupTbls), new Action<pushMessageSubGroupTbl>(this.detach_pushMessageSubGroupTbls));
			this._subGroupPushTbls = new EntitySet<subGroupPushTbl>(new Action<subGroupPushTbl>(this.attach_subGroupPushTbls), new Action<subGroupPushTbl>(this.detach_subGroupPushTbls));
			this._userSubGroupTbls = new EntitySet<userSubGroupTbl>(new Action<userSubGroupTbl>(this.attach_userSubGroupTbls), new Action<userSubGroupTbl>(this.detach_userSubGroupTbls));
			this._GroupTbl = default(EntityRef<GroupTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupID", DbType="BigInt NOT NULL")]
		public long groupID
		{
			get
			{
				return this._groupID;
			}
			set
			{
				if ((this._groupID != value))
				{
					if (this._GroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngroupIDChanging(value);
					this.SendPropertyChanging();
					this._groupID = value;
					this.SendPropertyChanged("groupID");
					this.OngroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(350) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isBlock", DbType="Bit NOT NULL")]
		public bool isBlock
		{
			get
			{
				return this._isBlock;
			}
			set
			{
				if ((this._isBlock != value))
				{
					this.OnisBlockChanging(value);
					this.SendPropertyChanging();
					this._isBlock = value;
					this.SendPropertyChanged("isBlock");
					this.OnisBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_canPush", DbType="Bit NOT NULL")]
		public bool canPush
		{
			get
			{
				return this._canPush;
			}
			set
			{
				if ((this._canPush != value))
				{
					this.OncanPushChanging(value);
					this.SendPropertyChanging();
					this._canPush = value;
					this.SendPropertyChanged("canPush");
					this.OncanPushChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toAll", DbType="Bit NOT NULL")]
		public bool toAll
		{
			get
			{
				return this._toAll;
			}
			set
			{
				if ((this._toAll != value))
				{
					this.OntoAllChanging(value);
					this.SendPropertyChanging();
					this._toAll = value;
					this.SendPropertyChanged("toAll");
					this.OntoAllChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toPartner", DbType="Bit NOT NULL")]
		public bool toPartner
		{
			get
			{
				return this._toPartner;
			}
			set
			{
				if ((this._toPartner != value))
				{
					this.OntoPartnerChanging(value);
					this.SendPropertyChanging();
					this._toPartner = value;
					this.SendPropertyChanged("toPartner");
					this.OntoPartnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_downloadSubGroupTbl", Storage="_downloadSubGroupTbls", ThisKey="ID", OtherKey="subGroupID")]
		public EntitySet<downloadSubGroupTbl> downloadSubGroupTbls
		{
			get
			{
				return this._downloadSubGroupTbls;
			}
			set
			{
				this._downloadSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_eventsSubGroupTbl", Storage="_eventsSubGroupTbls", ThisKey="ID", OtherKey="subGroupID")]
		public EntitySet<eventsSubGroupTbl> eventsSubGroupTbls
		{
			get
			{
				return this._eventsSubGroupTbls;
			}
			set
			{
				this._eventsSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_ioSubGroupTbl", Storage="_ioSubGroupTbls", ThisKey="ID", OtherKey="subGroupID")]
		public EntitySet<ioSubGroupTbl> ioSubGroupTbls
		{
			get
			{
				return this._ioSubGroupTbls;
			}
			set
			{
				this._ioSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_masterRreportSubGroupTbl", Storage="_masterRreportSubGroupTbls", ThisKey="ID", OtherKey="subGroupID")]
		public EntitySet<masterRreportSubGroupTbl> masterRreportSubGroupTbls
		{
			get
			{
				return this._masterRreportSubGroupTbls;
			}
			set
			{
				this._masterRreportSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_messageSubGroupTbl", Storage="_messageSubGroupTbls", ThisKey="ID", OtherKey="subGroupID")]
		public EntitySet<messageSubGroupTbl> messageSubGroupTbls
		{
			get
			{
				return this._messageSubGroupTbls;
			}
			set
			{
				this._messageSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_newsSubGroupTbl", Storage="_newsSubGroupTbls", ThisKey="ID", OtherKey="subGroupID")]
		public EntitySet<newsSubGroupTbl> newsSubGroupTbls
		{
			get
			{
				return this._newsSubGroupTbls;
			}
			set
			{
				this._newsSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_pollSubGroupTbl", Storage="_pollSubGroupTbls", ThisKey="ID", OtherKey="subGroupID")]
		public EntitySet<pollSubGroupTbl> pollSubGroupTbls
		{
			get
			{
				return this._pollSubGroupTbls;
			}
			set
			{
				this._pollSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_publicationSubGroupTbl", Storage="_publicationSubGroupTbls", ThisKey="ID", OtherKey="subGroupID")]
		public EntitySet<publicationSubGroupTbl> publicationSubGroupTbls
		{
			get
			{
				return this._publicationSubGroupTbls;
			}
			set
			{
				this._publicationSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_pushMessageSubGroupTbl", Storage="_pushMessageSubGroupTbls", ThisKey="ID", OtherKey="subGroupID")]
		public EntitySet<pushMessageSubGroupTbl> pushMessageSubGroupTbls
		{
			get
			{
				return this._pushMessageSubGroupTbls;
			}
			set
			{
				this._pushMessageSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_subGroupPushTbl", Storage="_subGroupPushTbls", ThisKey="ID", OtherKey="subGroupID")]
		public EntitySet<subGroupPushTbl> subGroupPushTbls
		{
			get
			{
				return this._subGroupPushTbls;
			}
			set
			{
				this._subGroupPushTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_userSubGroupTbl", Storage="_userSubGroupTbls", ThisKey="ID", OtherKey="subGroupID")]
		public EntitySet<userSubGroupTbl> userSubGroupTbls
		{
			get
			{
				return this._userSubGroupTbls;
			}
			set
			{
				this._userSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupTbl_SubGroupTbl", Storage="_GroupTbl", ThisKey="groupID", OtherKey="ID", IsForeignKey=true)]
		public GroupTbl GroupTbl
		{
			get
			{
				return this._GroupTbl.Entity;
			}
			set
			{
				GroupTbl previousValue = this._GroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._GroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupTbl.Entity = null;
						previousValue.SubGroupTbls.Remove(this);
					}
					this._GroupTbl.Entity = value;
					if ((value != null))
					{
						value.SubGroupTbls.Add(this);
						this._groupID = value.ID;
					}
					else
					{
						this._groupID = default(long);
					}
					this.SendPropertyChanged("GroupTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_downloadSubGroupTbls(downloadSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = this;
		}
		
		private void detach_downloadSubGroupTbls(downloadSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = null;
		}
		
		private void attach_eventsSubGroupTbls(eventsSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = this;
		}
		
		private void detach_eventsSubGroupTbls(eventsSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = null;
		}
		
		private void attach_ioSubGroupTbls(ioSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = this;
		}
		
		private void detach_ioSubGroupTbls(ioSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = null;
		}
		
		private void attach_masterRreportSubGroupTbls(masterRreportSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = this;
		}
		
		private void detach_masterRreportSubGroupTbls(masterRreportSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = null;
		}
		
		private void attach_messageSubGroupTbls(messageSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = this;
		}
		
		private void detach_messageSubGroupTbls(messageSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = null;
		}
		
		private void attach_newsSubGroupTbls(newsSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = this;
		}
		
		private void detach_newsSubGroupTbls(newsSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = null;
		}
		
		private void attach_pollSubGroupTbls(pollSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = this;
		}
		
		private void detach_pollSubGroupTbls(pollSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = null;
		}
		
		private void attach_publicationSubGroupTbls(publicationSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = this;
		}
		
		private void detach_publicationSubGroupTbls(publicationSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = null;
		}
		
		private void attach_pushMessageSubGroupTbls(pushMessageSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = this;
		}
		
		private void detach_pushMessageSubGroupTbls(pushMessageSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = null;
		}
		
		private void attach_subGroupPushTbls(subGroupPushTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = this;
		}
		
		private void detach_subGroupPushTbls(subGroupPushTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = null;
		}
		
		private void attach_userSubGroupTbls(userSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = this;
		}
		
		private void detach_userSubGroupTbls(userSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.SubGroupTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tagTbl")]
	public partial class tagTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _title;
		
		private EntitySet<bestIdeaCompetitionsTagTbl> _bestIdeaCompetitionsTagTbls;
		
		private EntitySet<creativityCompetitionTagTbl> _creativityCompetitionTagTbls;
		
		private EntitySet<downloadTagTbl> _downloadTagTbls;
		
		private EntitySet<eventTagTbl> _eventTagTbls;
		
		private EntitySet<ideasTagTbl> _ideasTagTbls;
		
		private EntitySet<ioTagTbl> _ioTagTbls;
		
		private EntitySet<masterReportTagTbl> _masterReportTagTbls;
		
		private EntitySet<myIranTagTbl> _myIranTagTbls;
		
		private EntitySet<newsTagTbl> _newsTagTbls;
		
		private EntitySet<pollTagTbl> _pollTagTbls;
		
		private EntitySet<publicationTagTbl> _publicationTagTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public tagTbl()
		{
			this._bestIdeaCompetitionsTagTbls = new EntitySet<bestIdeaCompetitionsTagTbl>(new Action<bestIdeaCompetitionsTagTbl>(this.attach_bestIdeaCompetitionsTagTbls), new Action<bestIdeaCompetitionsTagTbl>(this.detach_bestIdeaCompetitionsTagTbls));
			this._creativityCompetitionTagTbls = new EntitySet<creativityCompetitionTagTbl>(new Action<creativityCompetitionTagTbl>(this.attach_creativityCompetitionTagTbls), new Action<creativityCompetitionTagTbl>(this.detach_creativityCompetitionTagTbls));
			this._downloadTagTbls = new EntitySet<downloadTagTbl>(new Action<downloadTagTbl>(this.attach_downloadTagTbls), new Action<downloadTagTbl>(this.detach_downloadTagTbls));
			this._eventTagTbls = new EntitySet<eventTagTbl>(new Action<eventTagTbl>(this.attach_eventTagTbls), new Action<eventTagTbl>(this.detach_eventTagTbls));
			this._ideasTagTbls = new EntitySet<ideasTagTbl>(new Action<ideasTagTbl>(this.attach_ideasTagTbls), new Action<ideasTagTbl>(this.detach_ideasTagTbls));
			this._ioTagTbls = new EntitySet<ioTagTbl>(new Action<ioTagTbl>(this.attach_ioTagTbls), new Action<ioTagTbl>(this.detach_ioTagTbls));
			this._masterReportTagTbls = new EntitySet<masterReportTagTbl>(new Action<masterReportTagTbl>(this.attach_masterReportTagTbls), new Action<masterReportTagTbl>(this.detach_masterReportTagTbls));
			this._myIranTagTbls = new EntitySet<myIranTagTbl>(new Action<myIranTagTbl>(this.attach_myIranTagTbls), new Action<myIranTagTbl>(this.detach_myIranTagTbls));
			this._newsTagTbls = new EntitySet<newsTagTbl>(new Action<newsTagTbl>(this.attach_newsTagTbls), new Action<newsTagTbl>(this.detach_newsTagTbls));
			this._pollTagTbls = new EntitySet<pollTagTbl>(new Action<pollTagTbl>(this.attach_pollTagTbls), new Action<pollTagTbl>(this.detach_pollTagTbls));
			this._publicationTagTbls = new EntitySet<publicationTagTbl>(new Action<publicationTagTbl>(this.attach_publicationTagTbls), new Action<publicationTagTbl>(this.detach_publicationTagTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_bestIdeaCompetitionsTagTbl", Storage="_bestIdeaCompetitionsTagTbls", ThisKey="ID", OtherKey="tagID")]
		public EntitySet<bestIdeaCompetitionsTagTbl> bestIdeaCompetitionsTagTbls
		{
			get
			{
				return this._bestIdeaCompetitionsTagTbls;
			}
			set
			{
				this._bestIdeaCompetitionsTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_creativityCompetitionTagTbl", Storage="_creativityCompetitionTagTbls", ThisKey="ID", OtherKey="tagID")]
		public EntitySet<creativityCompetitionTagTbl> creativityCompetitionTagTbls
		{
			get
			{
				return this._creativityCompetitionTagTbls;
			}
			set
			{
				this._creativityCompetitionTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_downloadTagTbl", Storage="_downloadTagTbls", ThisKey="ID", OtherKey="tagID")]
		public EntitySet<downloadTagTbl> downloadTagTbls
		{
			get
			{
				return this._downloadTagTbls;
			}
			set
			{
				this._downloadTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_eventTagTbl", Storage="_eventTagTbls", ThisKey="ID", OtherKey="tagID")]
		public EntitySet<eventTagTbl> eventTagTbls
		{
			get
			{
				return this._eventTagTbls;
			}
			set
			{
				this._eventTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_ideasTagTbl", Storage="_ideasTagTbls", ThisKey="ID", OtherKey="tagID")]
		public EntitySet<ideasTagTbl> ideasTagTbls
		{
			get
			{
				return this._ideasTagTbls;
			}
			set
			{
				this._ideasTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_ioTagTbl", Storage="_ioTagTbls", ThisKey="ID", OtherKey="tagID")]
		public EntitySet<ioTagTbl> ioTagTbls
		{
			get
			{
				return this._ioTagTbls;
			}
			set
			{
				this._ioTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_masterReportTagTbl", Storage="_masterReportTagTbls", ThisKey="ID", OtherKey="tagID")]
		public EntitySet<masterReportTagTbl> masterReportTagTbls
		{
			get
			{
				return this._masterReportTagTbls;
			}
			set
			{
				this._masterReportTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_myIranTagTbl", Storage="_myIranTagTbls", ThisKey="ID", OtherKey="tagID")]
		public EntitySet<myIranTagTbl> myIranTagTbls
		{
			get
			{
				return this._myIranTagTbls;
			}
			set
			{
				this._myIranTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_newsTagTbl", Storage="_newsTagTbls", ThisKey="ID", OtherKey="tagID")]
		public EntitySet<newsTagTbl> newsTagTbls
		{
			get
			{
				return this._newsTagTbls;
			}
			set
			{
				this._newsTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_pollTagTbl", Storage="_pollTagTbls", ThisKey="ID", OtherKey="tagID")]
		public EntitySet<pollTagTbl> pollTagTbls
		{
			get
			{
				return this._pollTagTbls;
			}
			set
			{
				this._pollTagTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tagTbl_publicationTagTbl", Storage="_publicationTagTbls", ThisKey="ID", OtherKey="tagID")]
		public EntitySet<publicationTagTbl> publicationTagTbls
		{
			get
			{
				return this._publicationTagTbls;
			}
			set
			{
				this._publicationTagTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_bestIdeaCompetitionsTagTbls(bestIdeaCompetitionsTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = this;
		}
		
		private void detach_bestIdeaCompetitionsTagTbls(bestIdeaCompetitionsTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = null;
		}
		
		private void attach_creativityCompetitionTagTbls(creativityCompetitionTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = this;
		}
		
		private void detach_creativityCompetitionTagTbls(creativityCompetitionTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = null;
		}
		
		private void attach_downloadTagTbls(downloadTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = this;
		}
		
		private void detach_downloadTagTbls(downloadTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = null;
		}
		
		private void attach_eventTagTbls(eventTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = this;
		}
		
		private void detach_eventTagTbls(eventTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = null;
		}
		
		private void attach_ideasTagTbls(ideasTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = this;
		}
		
		private void detach_ideasTagTbls(ideasTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = null;
		}
		
		private void attach_ioTagTbls(ioTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = this;
		}
		
		private void detach_ioTagTbls(ioTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = null;
		}
		
		private void attach_masterReportTagTbls(masterReportTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = this;
		}
		
		private void detach_masterReportTagTbls(masterReportTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = null;
		}
		
		private void attach_myIranTagTbls(myIranTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = this;
		}
		
		private void detach_myIranTagTbls(myIranTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = null;
		}
		
		private void attach_newsTagTbls(newsTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = this;
		}
		
		private void detach_newsTagTbls(newsTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = null;
		}
		
		private void attach_pollTagTbls(pollTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = this;
		}
		
		private void detach_pollTagTbls(pollTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = null;
		}
		
		private void attach_publicationTagTbls(publicationTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = this;
		}
		
		private void detach_publicationTagTbls(publicationTagTbl entity)
		{
			this.SendPropertyChanging();
			entity.tagTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.temporaryRegistrationTbl")]
	public partial class temporaryRegistrationTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _code;
		
		private string _emailMobile;
		
		private System.DateTime _regDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnemailMobileChanging(string value);
    partial void OnemailMobileChanged();
    partial void OnregDateChanging(System.DateTime value);
    partial void OnregDateChanged();
    #endregion
		
		public temporaryRegistrationTbl()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailMobile", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string emailMobile
		{
			get
			{
				return this._emailMobile;
			}
			set
			{
				if ((this._emailMobile != value))
				{
					this.OnemailMobileChanging(value);
					this.SendPropertyChanging();
					this._emailMobile = value;
					this.SendPropertyChanged("emailMobile");
					this.OnemailMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regDate", DbType="DateTime NOT NULL")]
		public System.DateTime regDate
		{
			get
			{
				return this._regDate;
			}
			set
			{
				if ((this._regDate != value))
				{
					this.OnregDateChanging(value);
					this.SendPropertyChanging();
					this._regDate = value;
					this.SendPropertyChanged("regDate");
					this.OnregDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tokenUploadServiceTbl")]
	public partial class tokenUploadServiceTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _token;
		
		private int _packetCount;
		
		private int _receivedPacket;
		
		private string _format;
		
		private System.DateTime _upDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OntokenChanging(string value);
    partial void OntokenChanged();
    partial void OnpacketCountChanging(int value);
    partial void OnpacketCountChanged();
    partial void OnreceivedPacketChanging(int value);
    partial void OnreceivedPacketChanged();
    partial void OnformatChanging(string value);
    partial void OnformatChanged();
    partial void OnupDateChanging(System.DateTime value);
    partial void OnupDateChanged();
    #endregion
		
		public tokenUploadServiceTbl()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_token", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string token
		{
			get
			{
				return this._token;
			}
			set
			{
				if ((this._token != value))
				{
					this.OntokenChanging(value);
					this.SendPropertyChanging();
					this._token = value;
					this.SendPropertyChanged("token");
					this.OntokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_packetCount", DbType="Int NOT NULL")]
		public int packetCount
		{
			get
			{
				return this._packetCount;
			}
			set
			{
				if ((this._packetCount != value))
				{
					this.OnpacketCountChanging(value);
					this.SendPropertyChanging();
					this._packetCount = value;
					this.SendPropertyChanged("packetCount");
					this.OnpacketCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_receivedPacket", DbType="Int NOT NULL")]
		public int receivedPacket
		{
			get
			{
				return this._receivedPacket;
			}
			set
			{
				if ((this._receivedPacket != value))
				{
					this.OnreceivedPacketChanging(value);
					this.SendPropertyChanging();
					this._receivedPacket = value;
					this.SendPropertyChanged("receivedPacket");
					this.OnreceivedPacketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_format", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string format
		{
			get
			{
				return this._format;
			}
			set
			{
				if ((this._format != value))
				{
					this.OnformatChanging(value);
					this.SendPropertyChanging();
					this._format = value;
					this.SendPropertyChanged("format");
					this.OnformatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[upDate]", Storage="_upDate", DbType="DateTime NOT NULL")]
		public System.DateTime upDate
		{
			get
			{
				return this._upDate;
			}
			set
			{
				if ((this._upDate != value))
				{
					this.OnupDateChanging(value);
					this.SendPropertyChanging();
					this._upDate = value;
					this.SendPropertyChanged("upDate");
					this.OnupDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.userSubGroupTbl")]
	public partial class userSubGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _userID;
		
		private long _subGroupID;
		
		private EntityRef<mUserTbl> _mUserTbl;
		
		private EntityRef<SubGroupTbl> _SubGroupTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnuserIDChanging(long value);
    partial void OnuserIDChanged();
    partial void OnsubGroupIDChanging(long value);
    partial void OnsubGroupIDChanged();
    #endregion
		
		public userSubGroupTbl()
		{
			this._mUserTbl = default(EntityRef<mUserTbl>);
			this._SubGroupTbl = default(EntityRef<SubGroupTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="BigInt NOT NULL")]
		public long userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._mUserTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subGroupID", DbType="BigInt NOT NULL")]
		public long subGroupID
		{
			get
			{
				return this._subGroupID;
			}
			set
			{
				if ((this._subGroupID != value))
				{
					if (this._SubGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubGroupIDChanging(value);
					this.SendPropertyChanging();
					this._subGroupID = value;
					this.SendPropertyChanged("subGroupID");
					this.OnsubGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mUserTbl_userSubGroupTbl", Storage="_mUserTbl", ThisKey="userID", OtherKey="ID", IsForeignKey=true)]
		public mUserTbl mUserTbl
		{
			get
			{
				return this._mUserTbl.Entity;
			}
			set
			{
				mUserTbl previousValue = this._mUserTbl.Entity;
				if (((previousValue != value) 
							|| (this._mUserTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mUserTbl.Entity = null;
						previousValue.userSubGroupTbls.Remove(this);
					}
					this._mUserTbl.Entity = value;
					if ((value != null))
					{
						value.userSubGroupTbls.Add(this);
						this._userID = value.ID;
					}
					else
					{
						this._userID = default(long);
					}
					this.SendPropertyChanged("mUserTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroupTbl_userSubGroupTbl", Storage="_SubGroupTbl", ThisKey="subGroupID", OtherKey="ID", IsForeignKey=true)]
		public SubGroupTbl SubGroupTbl
		{
			get
			{
				return this._SubGroupTbl.Entity;
			}
			set
			{
				SubGroupTbl previousValue = this._SubGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._SubGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubGroupTbl.Entity = null;
						previousValue.userSubGroupTbls.Remove(this);
					}
					this._SubGroupTbl.Entity = value;
					if ((value != null))
					{
						value.userSubGroupTbls.Add(this);
						this._subGroupID = value.ID;
					}
					else
					{
						this._subGroupID = default(long);
					}
					this.SendPropertyChanged("SubGroupTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
